{
  "openapi": "3.0.1",
  "info": {
    "title": "Source Code API v2",
    "description": "This documentation describes the Source Code API.",
    "version": "V2"
  },
  "servers": [
    {
      "url": "/app/sourcecode/api/api/v2"
    }
  ],
  "security": [
    {
      "BasicAuth": []
    },
    {
      "AuthorizationHeaderToken": []
    }
  ],
  "paths": {
    "/admin/cache/permissions": {
      "delete": {
        "tags": [
          "admin"
        ],
        "summary": "Resets the cache.",
        "description": "Resets the cache that stores all access rights for users.\nIf query is not passed, then we reset the entire cache; if passed, then only certain parameters\nDatasource: DB",
        "operationId": "engrAuthResetCache",
        "parameters": [
          {
            "name": "user_ids",
            "in": "query",
            "description": "user ids array",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "self",
            "in": "query",
            "description": "if self is true, then the cache value is reset for the user who makes the request",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No Content",
            "content": {}
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/config": {
      "get": {
        "tags": [
          "common"
        ],
        "summary": "Get limits from app config.",
        "operationId": "Config",
        "responses": {
          "200": {
            "$ref": "#/components/responses/ConfigResponse"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/favorite/projects/{projectKey}": {
      "put": {
        "tags": [
          "favorite_project"
        ],
        "summary": "Create a favorite project.",
        "description": "Create a favorite project.\nDatasource: DB",
        "operationId": "addFavoriteProject",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "key of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/FavoriteProjectResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      },
      "delete": {
        "tags": [
          "favorite_project"
        ],
        "summary": "Delete a favorite project.",
        "description": "Delete a favorite project.\nDatasource: Git",
        "operationId": "deleteFavoriteProject",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "key of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No Content",
            "content": {}
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/health": {
      "get": {
        "tags": [
          "common"
        ],
        "summary": "Health check",
        "description": "Check the functionality of the service",
        "operationId": "HealthCheck",
        "responses": {
          "200": {
            "description": "OK",
            "content": {}
          }
        }
      }
    },
    "/jobs/run": {
      "post": {
        "tags": [
          "job"
        ],
        "summary": "Runs a new job.",
        "description": "Runs a new job.\nDatasource: DB, Job",
        "operationId": "runJob",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JobInput"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/JobResponse"
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "x-codegen-request-body-name": "input"
      }
    },
    "/jobs/{jobId}": {
      "get": {
        "tags": [
          "job"
        ],
        "summary": "Get an existing background job state.",
        "description": "Get an existing background job state.\nDatasource: DB, Job",
        "operationId": "getJob",
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "description": "id of the project",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/JobResponse"
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/projects": {
      "get": {
        "tags": [
          "project"
        ],
        "summary": "List projects",
        "description": "Paginated list of projects.\nDatasource: DB",
        "operationId": "listProjects",
        "parameters": [
          {
            "name": "cursor",
            "in": "query",
            "description": "cursor of the requested page (received from the previous request)",
            "allowEmptyValue": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "page size of results (ignored if cursor is set)",
            "allowEmptyValue": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sorting type of results",
            "allowEmptyValue": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "sort order of results",
            "allowEmptyValue": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "filter organizations by name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "favoriteProjects",
            "in": "query",
            "description": "filter favorite projects",
            "allowEmptyValue": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "createAction",
            "in": "query",
            "description": "filter projects with sfera.code.project.repo.create available permission",
            "allowEmptyValue": true,
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ProjectsListResponse"
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      },
      "post": {
        "tags": [
          "project"
        ],
        "summary": "Create a new project.",
        "description": "Create a new project.\nDatasource: DB",
        "operationId": "createProject",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProjectInput"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ProjectResponse"
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "x-codegen-request-body-name": "input"
      }
    },
    "/projects/repos/migration": {
      "post": {
        "tags": [
          "migration"
        ],
        "summary": "Start a project repository migration.",
        "description": "Start a project repository migration.\nDatasource: DB, Git, Job",
        "operationId": "StartRepositoriesMigration",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MultiMigrationOptions"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/MigrationsResponse"
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "x-codegen-request-body-name": "input"
      }
    },
    "/projects/{projectKey}": {
      "get": {
        "tags": [
          "project"
        ],
        "summary": "Get an existing project.",
        "description": "Get an existing project.\nDatasource: DB",
        "operationId": "getProject",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "key of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ProjectResponse"
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      },
      "delete": {
        "tags": [
          "project"
        ],
        "summary": "Delete an existing project.",
        "description": "Delete an existing project and all the project repositories.\nDatasource: DB",
        "operationId": "deleteProject",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "key of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/DeleteProjectResponse"
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      },
      "patch": {
        "tags": [
          "project"
        ],
        "summary": "Update an existing project.",
        "description": "Update an existing project fields. At least one input field must be provided.\nDatasource: DB",
        "operationId": "updateProject",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "key of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProjectInput"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ProjectResponse"
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "x-codegen-request-body-name": "input"
      }
    },
    "/projects/{projectKey}/content": {
      "get": {
        "tags": [
          "repository"
        ],
        "summary": "List a project content.",
        "description": "Paginated list of a project groups & repos.\nDatasource: DB",
        "operationId": "listProjectContent",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "key of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "cursor of the requested page (received from the previous request)",
            "allowEmptyValue": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "page size of results (ignored if cursor is set)",
            "allowEmptyValue": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sorting type of results",
            "allowEmptyValue": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "sort order of results",
            "allowEmptyValue": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "filter repos by name",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListGroupsAndReposResponse"
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "404": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/projects/{projectKey}/groups": {
      "get": {
        "tags": [
          "project"
        ],
        "summary": "Get project groups.",
        "description": "Get project groups.\nDatasource: DB",
        "operationId": "getProjectGroups",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "key of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "recursive",
            "in": "query",
            "description": "get groups recursively",
            "allowEmptyValue": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sorting type of results",
            "allowEmptyValue": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "sort order of results",
            "allowEmptyValue": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "cursor of the requested page (received from the previous request)",
            "allowEmptyValue": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "page size of results",
            "allowEmptyValue": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ProjectGroupsResponse"
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/projects/{projectKey}/repos": {
      "get": {
        "tags": [
          "repository"
        ],
        "summary": "List a project repos.",
        "description": "Paginated list of a project repos.\nDatasource: DB",
        "operationId": "listProjectRepos",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "key of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "cursor of the requested page (received from the previous request)",
            "allowEmptyValue": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "page size of results (ignored if cursor is set)",
            "allowEmptyValue": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sorting type of results",
            "allowEmptyValue": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "sort order of results",
            "allowEmptyValue": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "filter repos by name",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListOrgReposResponse"
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "404": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      },
      "post": {
        "tags": [
          "repository"
        ],
        "summary": "Create a project repository.",
        "description": "Create a project repository.\nDatasource: DB, Git",
        "operationId": "createProjectRepo",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "key of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRepositoryInput"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/RepoResponse"
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "x-codegen-request-body-name": "input"
      }
    },
    "/projects/{projectKey}/repos/{repoName}": {
      "get": {
        "tags": [
          "repository"
        ],
        "summary": "Get an existing project repository.",
        "description": "Get an existing project repository.\nDatasource: DB",
        "operationId": "getProjectRepo",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "key of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repoName",
            "in": "path",
            "description": "name of the repository",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/RepoResponse"
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      },
      "delete": {
        "tags": [
          "repository"
        ],
        "summary": "Delete a project repository.",
        "description": "Delete a project repository.\nDatasource: DB, Git, Job",
        "operationId": "deleteProjectRepo",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "key of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repoName",
            "in": "path",
            "description": "name of the repository",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/DeleteRepoResponse"
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      },
      "patch": {
        "tags": [
          "repository"
        ],
        "summary": "Update a project repository.",
        "description": "Update a project repository.\nDatasource: DB, Git",
        "operationId": "updateProjectRepo",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "key of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repoName",
            "in": "path",
            "description": "name of the repository",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRepositoryInput"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/RepoResponse"
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "x-codegen-request-body-name": "input"
      }
    },
    "/projects/{projectKey}/repos/{repoName}/archive/{gitRev}.{format}": {
      "get": {
        "tags": [
          "repository"
        ],
        "summary": "Archive a repository.",
        "description": "Archive a repository.\nDatasource: Git",
        "operationId": "archiveRepo",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "key of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repoName",
            "in": "path",
            "description": "name of the repository",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "gitRev",
            "in": "path",
            "description": "revision of the repository, refs or commit hash",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "format",
            "in": "path",
            "description": "format of the archive file",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "archive file",
            "headers": {
              "Content-Disposition": {
                "description": "my-repo-branch.zip, my-repo-tagname-v4.0.0.tar, etc...",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "404": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/projects/{projectKey}/repos/{repoName}/blame/{treePath}": {
      "get": {
        "tags": [
          "content"
        ],
        "summary": "Get a project repository file blame info.",
        "description": "Get a project repository file blame info.\nDatasource: Git",
        "operationId": "getProjectRepoFileBlameInfo",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "key of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repoName",
            "in": "path",
            "description": "name of the repository",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "treePath",
            "in": "path",
            "description": "path to the repository file object",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "rev",
            "in": "query",
            "description": "git rev (commit/branch/tag,commit-ish or any other git revision).",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "cursor of the requested page (received from the previous request)",
            "allowEmptyValue": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "page size of results (ignored if cursor is set)",
            "allowEmptyValue": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/RepoFileBlameResponse"
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "401": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/projects/{projectKey}/repos/{repoName}/branches": {
      "get": {
        "tags": [
          "repository"
        ],
        "summary": "List project repository branches (all).",
        "description": "List project repository branches (all).\nDatasource: Git",
        "operationId": "listProjectRepoBranches",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "key of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repoName",
            "in": "path",
            "description": "name of the repository",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sorting type of results",
            "allowEmptyValue": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "sort order of results",
            "allowEmptyValue": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "filter branches by name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "merged",
            "in": "query",
            "description": "list merged branches",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "issueName",
            "in": "query",
            "description": "issue name to find all branches to which the issue entity is linked.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListRepoBranchesResponse"
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      },
      "post": {
        "tags": [
          "repository"
        ],
        "summary": "Create a project repository branch.",
        "description": "Create a project repository branch.\nDatasource: Git",
        "operationId": "createProjectRepoBranch",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "key of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repoName",
            "in": "path",
            "description": "name of the repository",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateBranchInput"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/RepoBranchResponse"
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "x-codegen-request-body-name": "input"
      },
      "delete": {
        "tags": [
          "repository"
        ],
        "summary": "Delete project repository branches (by condition).",
        "description": "Delete project repository branches (by condition).\nDatasource: Git",
        "operationId": "deleteProjectRepoBranches",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "key of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repoName",
            "in": "path",
            "description": "name of the repository",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteBranchesInput"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/DeleteBranchesResponse"
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "x-codegen-request-body-name": "input"
      }
    },
    "/projects/{projectKey}/repos/{repoName}/branches/metadata": {
      "post": {
        "tags": [
          "repository"
        ],
        "summary": "Get a project repository branch metadata.",
        "description": "Get a project repository branch metadata.\nDatasource: DB, Git",
        "operationId": "getProjectRepoBranchMetadata",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "key of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repoName",
            "in": "path",
            "description": "name of the repository",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "behindAheadBaseRev",
            "in": "query",
            "description": "git ahead-behind rev (commit/branch/tag,commit-ish or any other git revision). See git-for-each-ref.",
            "schema": {
              "type": "string",
              "default": "refs/heads/master"
            }
          },
          {
            "name": "withOrphanStatus",
            "in": "query",
            "description": "whether to include orphan status",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BranchWithMetadataInput"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/RepoBranchWithMetadataResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "x-codegen-request-body-name": "input"
      }
    },
    "/projects/{projectKey}/repos/{repoName}/branches/{branchName}": {
      "get": {
        "tags": [
          "repository"
        ],
        "summary": "Get a project repository branch.",
        "description": "Get a project repository branch.\nDatasource: Git",
        "operationId": "getProjectRepoBranch",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "key of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repoName",
            "in": "path",
            "description": "name of the repository",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "branchName",
            "in": "path",
            "description": "name of the branch",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "behindAheadBaseRev",
            "in": "query",
            "description": "git ahead-behind rev (commit/branch/tag,commit-ish or any other git revision). See git-for-each-ref.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/RepoBranchResponse"
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      },
      "delete": {
        "tags": [
          "repository"
        ],
        "summary": "Delete a project repository branch.",
        "description": "Delete a project repository branch.\nDatasource: Git",
        "operationId": "deleteProjectRepoBranch",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "key of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repoName",
            "in": "path",
            "description": "name of the repository",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "branchName",
            "in": "path",
            "description": "name of the branch",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No Content",
            "content": {}
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/projects/{projectKey}/repos/{repoName}/bundles/{bundleId}": {
      "get": {
        "tags": [
          "repository"
        ],
        "summary": "Get an existing bundle.",
        "description": "Get an existing bundle.\nDatasource: Codilo/S3",
        "operationId": "getBundle",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "key of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repoName",
            "in": "path",
            "description": "name of the repository",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "bundleId",
            "in": "path",
            "description": "id of the bundle",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "bundle file data",
            "content": {}
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "404": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/projects/{projectKey}/repos/{repoName}/commits": {
      "get": {
        "tags": [
          "repository"
        ],
        "summary": "List project repository commits.",
        "description": "Paginated list of a project repo commits.\nDatasource: Git",
        "operationId": "listProjectRepoCommits",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "key of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repoName",
            "in": "path",
            "description": "name of the repository",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ref",
            "in": "query",
            "description": "DEPRECATED!!! use `rev` parameter instead.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "rev",
            "in": "query",
            "description": "git rev (commit/branch/tag,commit-ish or any other git revision). Returns all commits by default.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "until",
            "in": "query",
            "description": "git until rev (commit/branch/tag,commit-ish or any other git revision). See git log A..B.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "author",
            "in": "query",
            "description": "commit author",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "committer",
            "in": "query",
            "description": "committer of the commit",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "cursor of the requested page (received from the previous request)",
            "allowEmptyValue": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "page size of results (ignored if cursor is set)",
            "allowEmptyValue": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "before",
            "in": "query",
            "description": "show commits older than a specific date.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "after",
            "in": "query",
            "description": "show commits more recent than a specific date.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "refType",
            "in": "query",
            "description": "reference type ('refs/tag/' or 'refs/heads/')",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "path",
            "in": "query",
            "description": "file or directory path",
            "allowEmptyValue": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fullHistory",
            "in": "query",
            "description": "show full history incl. all merge commits",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListRepoCommitsResponse"
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/projects/{projectKey}/repos/{repoName}/commits/diff": {
      "get": {
        "tags": [
          "repository"
        ],
        "summary": "Get project repository commits diff.",
        "description": "Get project repository commits diff.\nDatasource: Git",
        "operationId": "getProjectRepoCommitsDiff",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "key of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repoName",
            "in": "path",
            "description": "name of the repository",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "rev",
            "in": "query",
            "description": "git rev (commit/branch/tag,commit-ish or any other git revision).",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "until",
            "in": "query",
            "description": "git until rev (commit/branch/tag,commit-ish or any other git revision). See `git diff A B`. The resulting diff doesn't include `until` commit content, but you could use `<refname>^` syntax to include commit content. If not set diff includes all commits up to and including the initial.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "binary",
            "in": "query",
            "description": "whether to include binary file changes. if true, the diff is applicable with git apply",
            "allowEmptyValue": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "path",
            "in": "query",
            "description": "file or directory path",
            "allowEmptyValue": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/DiffResponse"
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/projects/{projectKey}/repos/{repoName}/commits/{sha1}": {
      "get": {
        "tags": [
          "repository"
        ],
        "summary": "Get project repository commit.",
        "description": "Get project repository commit.\nDatasource: Git",
        "operationId": "getProjectRepoCommit",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "key of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repoName",
            "in": "path",
            "description": "name of the repository",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sha1",
            "in": "path",
            "description": "commit SHA1 hash.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/RepoCommitResponse"
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/projects/{projectKey}/repos/{repoName}/commits/{sha1}/diff": {
      "get": {
        "tags": [
          "repository"
        ],
        "summary": "Get project repository commit diff.",
        "description": "Get project repository commit diff.\nDatasource: Git",
        "operationId": "getProjectRepoCommitDiff",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "key of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repoName",
            "in": "path",
            "description": "name of the repository",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sha1",
            "in": "path",
            "description": "commit SHA1 hash.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "binary",
            "in": "query",
            "description": "whether to include binary file changes. if true, the diff is applicable with git apply",
            "allowEmptyValue": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/DiffResponse"
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/projects/{projectKey}/repos/{repoName}/content/{treePath}": {
      "get": {
        "tags": [
          "content"
        ],
        "summary": "Get a project repository content metadata.",
        "description": "Get a project repository content metadata.\nDatasource: Git",
        "operationId": "getProjectRepoContent",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "key of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repoName",
            "in": "path",
            "description": "name of the repository",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "treePath",
            "in": "path",
            "description": "path to the repository tree object",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "rev",
            "in": "query",
            "description": "git rev (commit/branch/tag,commit-ish or any other git revision).",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/RepoContentResponse"
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "401": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "deprecated": true
      }
    },
    "/projects/{projectKey}/repos/{repoName}/file/{treePath}": {
      "get": {
        "tags": [
          "content"
        ],
        "summary": "Get a project repository file content.",
        "description": "Get a project repository file content.\nDatasource: Git",
        "operationId": "getProjectRepoFile",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "key of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repoName",
            "in": "path",
            "description": "name of the repository",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "treePath",
            "in": "path",
            "description": "path to the repository file object",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ref",
            "in": "query",
            "description": "DEPRECATED!!! use `rev` parameter instead.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "rev",
            "in": "query",
            "description": "git rev (commit/branch/tag,commit-ish or any other git revision).",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/RepoFileResponse"
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "401": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/projects/{projectKey}/repos/{repoName}/file_path": {
      "post": {
        "tags": [
          "content"
        ],
        "summary": "Get a project repository files paths relative to root by pattern.",
        "description": "Get a project repository files paths relative to root by pattern.\nDatasource: Git",
        "operationId": "getProjectRepoFilesPaths",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "key of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repoName",
            "in": "path",
            "description": "name of the repository",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "rev",
            "in": "query",
            "description": "git rev (commit/branch/tag,commit-ish or any other git revision).",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListFilesByPatternInput"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListFilesByPatternResponse"
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "401": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "x-codegen-request-body-name": "input"
      }
    },
    "/projects/{projectKey}/repos/{repoName}/files": {
      "post": {
        "tags": [
          "content"
        ],
        "summary": "Get project repository files contents.",
        "description": "Get project repository files contents.\nDatasource: Git",
        "operationId": "getProjectRepoFiles",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "key of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repoName",
            "in": "path",
            "description": "name of the repository",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "rev",
            "in": "query",
            "description": "git rev (commit/branch/tag,commit-ish or any other git revision).",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListFilesContentInput"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/RepoFilesResponse"
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "401": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "x-codegen-request-body-name": "input"
      }
    },
    "/projects/{projectKey}/repos/{repoName}/fork": {
      "post": {
        "tags": [
          "repository"
        ],
        "summary": "Create a project repository fork.",
        "description": "Create a project repository fork.\nDatasource: database",
        "operationId": "createRepoFork",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "key of the source project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repoName",
            "in": "path",
            "description": "name of the source repository",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateForkInput"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ForkRepoResponse"
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "x-codegen-request-body-name": "input"
      }
    },
    "/projects/{projectKey}/repos/{repoName}/forks": {
      "get": {
        "tags": [
          "repository"
        ],
        "summary": "List a repository forks.",
        "description": "Get a list of a repository forks.\nDatasource: DB",
        "operationId": "listRepoForks",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "key of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repoName",
            "in": "path",
            "description": "name of the repository",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "cursor of the requested page (received from the previous request)",
            "allowEmptyValue": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "page size of results (ignored if cursor is set)",
            "allowEmptyValue": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "filter projects by name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sorting type of results",
            "allowEmptyValue": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "sort order of results",
            "allowEmptyValue": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListRepoForksResponse"
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/projects/{projectKey}/repos/{repoName}/issues": {
      "get": {
        "tags": [
          "issue"
        ],
        "summary": "List project repository branches (all) with an issue assigned.",
        "description": "List project repository branches (all) with an issue assigned.\nDatasource: DB, Git",
        "operationId": "listProjectRepoBranchesWithIssues",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "key of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repoName",
            "in": "path",
            "description": "name of the repository",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sorting type of results",
            "allowEmptyValue": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "sort order of results",
            "allowEmptyValue": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "filter branches by name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "behindAheadBaseRev",
            "in": "query",
            "description": "git ahead-behind rev (commit/branch/tag,commit-ish or any other git revision). See git-for-each-ref.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListRepoBranchesEnrichedResponse"
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      },
      "post": {
        "tags": [
          "issue"
        ],
        "summary": "Create an issue for the project repository branch.",
        "description": "Create an issue for the project repository branch.\nDatasource: DB",
        "operationId": "createProjectRepoIssue",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "key of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repoName",
            "in": "path",
            "description": "name of the repository",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateIssueInput"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/IssueResponse"
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "x-codegen-request-body-name": "input"
      }
    },
    "/projects/{projectKey}/repos/{repoName}/issues/{branchName}": {
      "delete": {
        "tags": [
          "issue"
        ],
        "summary": "Delete an existing issue for the project repository branch.",
        "description": "Delete an existing issue for the project repository branch.\nDatasource: DB",
        "operationId": "deleteProjectRepoIssue",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "key of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repoName",
            "in": "path",
            "description": "name of the repository",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "branchName",
            "in": "path",
            "description": "name of the branch",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No Content",
            "content": {}
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      },
      "patch": {
        "tags": [
          "issue"
        ],
        "summary": "Update an existing issue for the project repository branch.",
        "description": "Update an existing issue for the project repository branch.\nDatasource: DB",
        "operationId": "updateProjectRepoIssue",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "key of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repoName",
            "in": "path",
            "description": "name of the repository",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "branchName",
            "in": "path",
            "description": "name of the branch",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateIssueInput"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/IssueResponse"
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "x-codegen-request-body-name": "input"
      }
    },
    "/projects/{projectKey}/repos/{repoName}/migration": {
      "post": {
        "tags": [
          "migration"
        ],
        "summary": "Start a project repository migration.",
        "description": "Start a project repository migration.\nDatasource: DB, Git, Job",
        "operationId": "startProjectRepoMigration",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "key of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repoName",
            "in": "path",
            "description": "name of the repository",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MigrationOptions"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/MigrationResponse"
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "x-codegen-request-body-name": "input"
      }
    },
    "/projects/{projectKey}/repos/{repoName}/patch": {
      "post": {
        "tags": [
          "content"
        ],
        "summary": "Apply a project repository patch.",
        "description": "Apply a project repository patch.\nDatasource: Git",
        "operationId": "applyProjectRepoPatch",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "key of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repoName",
            "in": "path",
            "description": "name of the repository",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApplyRepositoryPatchInput"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/RepoCommitResponse"
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "422": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "x-codegen-request-body-name": "input"
      }
    },
    "/projects/{projectKey}/repos/{repoName}/pull-requests": {
      "get": {
        "tags": [
          "pull_request"
        ],
        "summary": "Get an existing repository pull requests list.",
        "description": "Get an existing repository pull requests list.\nDatasource: DB",
        "operationId": "listProjectRepoPRs",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "key of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repoName",
            "in": "path",
            "description": "name of the repository",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "cursor of the requested page (received from the previous request)",
            "allowEmptyValue": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "page size of results",
            "allowEmptyValue": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sorting type of results",
            "allowEmptyValue": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "sort order of results",
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "default": "asc"
            }
          },
          {
            "name": "prStatus",
            "in": "query",
            "description": "pull requests status to filter out",
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "default": "all"
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "filter pull requests by title or id pull request",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "targetBranch",
            "in": "query",
            "description": "pull requests target branch name to filter out",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sourceBranch",
            "in": "query",
            "description": "pull requests source branch name to filter out",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "posters",
            "in": "query",
            "description": "list of PR posters to filter out (usernames)",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "author",
            "in": "query",
            "description": "author (principal_name) pull requests to filter out",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assignees",
            "in": "query",
            "description": "list of PR assignees (reviewers) to filter out (usernames)",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PullRequestsListResponse"
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      },
      "post": {
        "tags": [
          "pull_request"
        ],
        "summary": "Create new repository pull request.",
        "description": "Create new repository pull request.\nDatasource: DB, Git, Job",
        "operationId": "createProjectRepoPR",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "key of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repoName",
            "in": "path",
            "description": "name of the repository",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePullRequestInput"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/PullRequestResponse"
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "x-codegen-request-body-name": "input"
      }
    },
    "/projects/{projectKey}/repos/{repoName}/pull-requests/authors": {
      "get": {
        "tags": [
          "pull_request"
        ],
        "summary": "Get the authors of pull requests.",
        "description": "Get the authors of pull requests.\nDatasource: DB",
        "operationId": "authorsProjectRepoPRs",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "key of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repoName",
            "in": "path",
            "description": "name of the repository",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PullRequestAuthorsResponse"
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/projects/{projectKey}/repos/{repoName}/pull-requests/counters": {
      "get": {
        "tags": [
          "pull_request"
        ],
        "summary": "Get the count of pull requests depending on status on Open, Merged, Rejected.",
        "description": "Get the count of pull requests depending on status on Open, Merged, Rejected.\nDatasource: DB",
        "operationId": "countProjectRepoPRs",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "key of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repoName",
            "in": "path",
            "description": "name of the repository",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PullRequestCountersResponse"
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/projects/{projectKey}/repos/{repoName}/pull-requests/target-branches": {
      "get": {
        "tags": [
          "pull_request"
        ],
        "summary": "Get a sorted by name list of target branches for all repo PRs.",
        "description": "Get a sorted by name list of target branches for all repo PRs.\nDatasource: DB",
        "operationId": "listProjectRepoPRTargetBranches",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "key of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repoName",
            "in": "path",
            "description": "name of the repository",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "branch names",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/projects/{projectKey}/repos/{repoName}/pull-requests/user-suggestions": {
      "get": {
        "tags": [
          "pull_request"
        ],
        "summary": "Get user suggestions for specified pull request.",
        "description": "Get user suggestions for specified pull request.",
        "operationId": "getUserSuggestions",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "key of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repoName",
            "in": "path",
            "description": "name of the repository",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "filter by name or email",
            "allowEmptyValue": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "prId",
            "in": "query",
            "description": "pull request id",
            "allowEmptyValue": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "skipSelf",
            "in": "query",
            "description": "skip current user from response",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "cursor of the requested page (received from the previous request)",
            "allowEmptyValue": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "page size of results",
            "allowEmptyValue": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/UserSuggestionsResponse"
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/projects/{projectKey}/repos/{repoName}/pull-requests/{prId}": {
      "get": {
        "tags": [
          "pull_request"
        ],
        "summary": "Get an existing repository pull request.",
        "description": "Get an existing repository pull request.\nDatasource: DB",
        "operationId": "getProjectRepoPR",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "key of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repoName",
            "in": "path",
            "description": "name of the repository",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "prId",
            "in": "path",
            "description": "pull request id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PullRequestResponse"
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      },
      "patch": {
        "tags": [
          "pull_request"
        ],
        "summary": "Update an existing pull request.",
        "description": "Update an existing pull request fields. This method can return 200 alongside errors due to partially successful update.\nDatasource: DB",
        "operationId": "updateProjectRepoPR",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "key of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repoName",
            "in": "path",
            "description": "name of the repository",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "prId",
            "in": "path",
            "description": "pull request id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePullRequestInput"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/PullRequestResponse"
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "x-codegen-request-body-name": "input"
      }
    },
    "/projects/{projectKey}/repos/{repoName}/pull-requests/{prId}/activities": {
      "get": {
        "tags": [
          "pull_request"
        ],
        "summary": "Lists pull request activities.",
        "description": "Lists users and background processes activities associated with the pull request.",
        "operationId": "listPullRequestActivities",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "key of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repoName",
            "in": "path",
            "description": "name of the repository",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "prId",
            "in": "path",
            "description": "pull request unique identifier",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "eventGroups",
            "in": "query",
            "description": "event group name for filtering",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "cursor of the requested page (received from the previous request)",
            "allowEmptyValue": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "list page size",
            "allowEmptyValue": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PullRequestsActivityListResponse"
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/projects/{projectKey}/repos/{repoName}/pull-requests/{prId}/assignees": {
      "put": {
        "tags": [
          "pull_request"
        ],
        "summary": "Add assignees to pull request.",
        "description": "Add assignees to pull request.\nDatasource: DB",
        "operationId": "addProjectRepoPRAssignees",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "key of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repoName",
            "in": "path",
            "description": "name of the repository",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "prId",
            "in": "path",
            "description": "pull request id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "optional",
            "in": "query",
            "description": "whether an assignee should be added to a list without a group",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {}
          },
          "required": true
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/AssigneeOperationResponse"
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "deprecated": true,
        "x-codegen-request-body-name": "input"
      },
      "delete": {
        "tags": [
          "pull_request"
        ],
        "summary": "Remove assignees from pull request.",
        "description": "Remove assignees from pull request.\nDatasource: DB",
        "operationId": "removeProjectRepoPRAssignees",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "key of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repoName",
            "in": "path",
            "description": "name of the repository",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "prId",
            "in": "path",
            "description": "pull request id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {}
          },
          "required": true
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/AssigneeOperationResponse"
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "deprecated": true,
        "x-codegen-request-body-name": "input"
      }
    },
    "/projects/{projectKey}/repos/{repoName}/pull-requests/{prId}/auto-merge": {
      "get": {
        "tags": [
          "pull_request"
        ],
        "summary": "Get auto merge configuration for pull request.",
        "description": "Get auto merge configuration for pull request.\nDatasource: DB\n\nWarning! Response field 'data' can be empty as indication of not found (CODE-4087).",
        "operationId": "getPullRequestAutoMerge",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "key of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repoName",
            "in": "path",
            "description": "name of the repository",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "prId",
            "in": "path",
            "description": "pull request id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PullRequestAutoMergeResponse"
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "404": {
            "description": "DEPRECATED! See the description.",
            "content": {}
          },
          "405": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      },
      "put": {
        "tags": [
          "pull_request"
        ],
        "summary": "Enable auto merge for pull request.",
        "description": "Enable auto merge for pull request.\nDatasource: DB",
        "operationId": "configurePullRequestAutoMerge",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "key of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repoName",
            "in": "path",
            "description": "name of the repository",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "prId",
            "in": "path",
            "description": "pull request id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AutoMergeInput"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/PullRequestAutoMergeResponse"
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "405": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "x-codegen-request-body-name": "input"
      },
      "patch": {
        "tags": [
          "pull_request"
        ],
        "summary": "Update auto merge for pull request.",
        "description": "Update auto merge for pull request.\nDatasource: DB",
        "operationId": "updatePullRequestAutoMerge",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "key of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repoName",
            "in": "path",
            "description": "name of the repository",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "prId",
            "in": "path",
            "description": "pull request id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AutoMergeUpdateInput"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/PullRequestAutoMergeResponse"
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "405": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "x-codegen-request-body-name": "input"
      }
    },
    "/projects/{projectKey}/repos/{repoName}/pull-requests/{prId}/build": {
      "get": {
        "tags": [
          "pull_request"
        ],
        "summary": "Get CI/CD build status.",
        "description": "Get CI/CD build status.\n\nWarning! Response field 'data' can be empty as indication of not found (CODE-4087). The API is deprecated, 'builds' operation should be used instead.",
        "operationId": "getBuildStatus",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "key of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repoName",
            "in": "path",
            "description": "name of the repository",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "prId",
            "in": "path",
            "description": "pull request id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/CIBuildResponse"
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "404": {
            "description": "DEPRECATED! See the description.",
            "content": {}
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "deprecated": true
      }
    },
    "/projects/{projectKey}/repos/{repoName}/pull-requests/{prId}/decision": {
      "post": {
        "tags": [
          "pull_request"
        ],
        "summary": "Set pull request assignee decision. The user needs to be an assignee of the pull request.",
        "description": "Set pull request assignee decision. The user needs to be an assignee of the pull request.\nDatasource: DB",
        "operationId": "setProjectRepoPrAssigneeDecision",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "key of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repoName",
            "in": "path",
            "description": "name of the repository",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "prId",
            "in": "path",
            "description": "pull request id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssigneeDecisionInput"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/EmptyResponse"
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "x-codegen-request-body-name": "input"
      }
    },
    "/projects/{projectKey}/repos/{repoName}/pull-requests/{prId}/diff": {
      "get": {
        "tags": [
          "pull_request"
        ],
        "summary": "Get an existing repository pull request diff.",
        "description": "Get an existing repository pull request diff.\nDatasource: DB, Git",
        "operationId": "getProjectRepoPRDiff",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "key of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repoName",
            "in": "path",
            "description": "name of the repository",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "prId",
            "in": "path",
            "description": "pull request id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "binary",
            "in": "query",
            "description": "whether to include binary file changes. if true, the diff is applicable with git apply",
            "allowEmptyValue": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/DiffResponse"
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/projects/{projectKey}/repos/{repoName}/pull-requests/{prId}/linked-issues": {
      "put": {
        "tags": [
          "pull_request"
        ],
        "summary": "Add linked issues to pull request.",
        "description": "Add linked issues to pull request.\nDatasource: DB",
        "operationId": "addLinkedIssues",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "key of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repoName",
            "in": "path",
            "description": "name of the repository",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "prId",
            "in": "path",
            "description": "pull request id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LinkedIssuesInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/PullRequestLinkedIssuesResponse"
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "x-codegen-request-body-name": "input"
      },
      "delete": {
        "tags": [
          "pull_request"
        ],
        "summary": "Remove linked issues to pull request.",
        "description": "Remove linked issues to pull request.\nDatasource: DB",
        "operationId": "removeLinkedIssues",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "key of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repoName",
            "in": "path",
            "description": "name of the repository",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "prId",
            "in": "path",
            "description": "pull request id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LinkedIssuesInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {}
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "x-codegen-request-body-name": "input"
      }
    },
    "/projects/{projectKey}/repos/{repoName}/pull-requests/{prId}/merge": {
      "post": {
        "tags": [
          "pull_request"
        ],
        "summary": "Merge repository pull request.",
        "description": "In order to merge a pull request, merge settings must be followed (min approves, max declines).\nDatasource: DB, Git",
        "operationId": "mergeProjectRepoPR",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "key of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repoName",
            "in": "path",
            "description": "name of the repository",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "prId",
            "in": "path",
            "description": "pull request id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "force",
            "in": "query",
            "description": "force merge",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MergePullRequestInput"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/MergePullRequestResponse"
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "405": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "409": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "x-codegen-request-body-name": "input"
      }
    },
    "/projects/{projectKey}/repos/{repoName}/pull-requests/{prId}/merge-conflicts": {
      "get": {
        "tags": [
          "pull_request"
        ],
        "summary": "Get pull request's merge conflicts.",
        "description": "Get pull request's merge conflicts.\nDatasource: DB, Git",
        "operationId": "getPullRequestMergeConflicts",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "key of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repoName",
            "in": "path",
            "description": "name of the repository",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "prId",
            "in": "path",
            "description": "pull request id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PullRequestMergeConflictsResponse"
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/projects/{projectKey}/repos/{repoName}/pull-requests/{prId}/rebase": {
      "post": {
        "tags": [
          "pull_request"
        ],
        "summary": "Rebase pull request's source branch on target one.",
        "description": "Rebase pull request's source branch on target one.",
        "operationId": "rebasePullRequestSourceOnTarget",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "key of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repoName",
            "in": "path",
            "description": "name of the repository",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "prId",
            "in": "path",
            "description": "pull request id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PullRequestResponse"
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "405": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/projects/{projectKey}/repos/{repoName}/pull-requests/{prId}/reject": {
      "post": {
        "tags": [
          "pull_request"
        ],
        "summary": "Reject an existing pull request.",
        "description": "Reject an existing pull request.\nDatasource: DB",
        "operationId": "rejectProjectRepoPR",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "key of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repoName",
            "in": "path",
            "description": "name of the repository",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "prId",
            "in": "path",
            "description": "pull request id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/EmptyResponse"
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "405": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/projects/{projectKey}/repos/{repoName}/pull-requests/{prId}/reopen": {
      "post": {
        "tags": [
          "pull_request"
        ],
        "summary": "Reopen an existing closed pull request.",
        "description": "Reopen an existing closed pull request.\nDatasource: DB,GIT",
        "operationId": "reopenProjectRepoPR",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "key of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repoName",
            "in": "path",
            "description": "name of the repository",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "prId",
            "in": "path",
            "description": "pull request id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PullRequestResponse"
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "405": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/projects/{projectKey}/repos/{repoName}/pull-requests/{prId}/resolve-conflicts": {
      "post": {
        "tags": [
          "pull_request"
        ],
        "summary": "Resolve pull request's merge conflicts.",
        "description": "Resolve pull request's merge conflicts.\nDatasource: DB, Git",
        "operationId": "resolvePullRequestMergeConflicts",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "key of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repoName",
            "in": "path",
            "description": "name of the repository",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "prId",
            "in": "path",
            "description": "pull request id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResolveConflictsInput"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/PullRequestResponse"
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "x-codegen-request-body-name": "input"
      }
    },
    "/projects/{projectKey}/repos/{repoName}/pull-requests/{prId}/update-merge-branch": {
      "post": {
        "tags": [
          "pull_request"
        ],
        "summary": "Update pull request merge branch.",
        "description": "Update pull request merge branch.\nDatasource: DB, GIT",
        "operationId": "updateMergeBranch",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "key of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repoName",
            "in": "path",
            "description": "name of the repository",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "prId",
            "in": "path",
            "description": "pull request id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/EmptyResponse"
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/projects/{projectKey}/repos/{repoName}/pull-requests/{prId}/viewed-files": {
      "get": {
        "tags": [
          "pull_request"
        ],
        "summary": "Get list of viewed files in the pull request.",
        "description": "Get list of viewed files in the pull request.\nDatasource: DB,GIT",
        "operationId": "getPullRequestViewedFiles",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "key of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repoName",
            "in": "path",
            "description": "name of the repository",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "prId",
            "in": "path",
            "description": "pull request id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ViewedFilesResponse"
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      },
      "put": {
        "tags": [
          "pull_request"
        ],
        "summary": "Mark file as viewed by the user in the pull request.",
        "description": "Mark file as viewed by the user in the pull request.\nDatasource: DB,GIT",
        "operationId": "addPullRequestViewedFile",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "key of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repoName",
            "in": "path",
            "description": "name of the repository",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "prId",
            "in": "path",
            "description": "pull request id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PullRequestViewedFileInput"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/AddPullRequestViewedFileResponse"
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "x-codegen-request-body-name": "input"
      },
      "delete": {
        "tags": [
          "pull_request"
        ],
        "summary": "Remove viewed status from file in the pull request.",
        "description": "Remove viewed status from file in the pull request.\nDatasource: DB",
        "operationId": "removePullRequestViewedFile",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "key of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repoName",
            "in": "path",
            "description": "name of the repository",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "prId",
            "in": "path",
            "description": "pull request id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PullRequestViewedFileInput"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/EmptyResponse"
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "x-codegen-request-body-name": "input"
      }
    },
    "/projects/{projectKey}/repos/{repoName}/raw/file/{treePath}": {
      "get": {
        "tags": [
          "content"
        ],
        "summary": "Get a project repository raw file content.",
        "description": "Get a project repository raw file content.\nThe current version supports both raw/file/* and file/raw/*.\nDatasource: Git",
        "operationId": "getProjectRepoRawFile",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "key of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repoName",
            "in": "path",
            "description": "name of the repository",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "treePath",
            "in": "path",
            "description": "path to the repository file object",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "rev",
            "in": "query",
            "description": "git rev (commit/branch/tag,commit-ish or any other git revision).",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns raw file content.",
            "content": {}
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "401": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "404": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/projects/{projectKey}/repos/{repoName}/search": {
      "post": {
        "tags": [
          "repository"
        ],
        "summary": "Search text in source code.",
        "description": "Search text in source code.",
        "operationId": "searchTextInSourceCode",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "key of the source project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repoName",
            "in": "path",
            "description": "name of the source repository",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchInput"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/RepoSearchResponse"
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "x-codegen-request-body-name": "input"
      }
    },
    "/projects/{projectKey}/repos/{repoName}/settings/autolink": {
      "get": {
        "tags": [
          "repository_settings"
        ],
        "summary": "Get an existing project repository autolink settings.",
        "description": "Get an existing project repository autolink settings.\nDatasource: DB",
        "operationId": "getProjectRepoAutolinkSettings",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "key of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repoName",
            "in": "path",
            "description": "name of the repository",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/AutolinkSettingsResponse"
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      },
      "put": {
        "tags": [
          "repository_settings"
        ],
        "summary": "Set autolink settings for an existing project repository.",
        "description": "Set autolink settings for an existing project repository.\nDatasource: DB",
        "operationId": "setProjectRepoAutolinkSettings",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "key of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repoName",
            "in": "path",
            "description": "name of the repository",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrUpdateAutolinkSettingsInput"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/AutolinkSettingsResponse"
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "x-codegen-request-body-name": "input"
      },
      "delete": {
        "tags": [
          "repository_settings"
        ],
        "summary": "Deletes autolink settings for an existing project repository.",
        "description": "Deletes autolink settings for an existing project repository.\nDatasource: DB",
        "operationId": "deleteProjectRepoAutolinkSettings",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "key of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repoName",
            "in": "path",
            "description": "name of the repository",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No Content",
            "content": {}
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      },
      "patch": {
        "tags": [
          "repository_settings"
        ],
        "summary": "Update autolink settings for an existing project repository.",
        "description": "Update autolink settings for an existing project repository.\nDatasource: DB",
        "operationId": "updateProjectRepoAutolinkSettings",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "key of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repoName",
            "in": "path",
            "description": "name of the repository",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAutolinkSettingsInput"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/AutolinkSettingsResponse"
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "x-codegen-request-body-name": "input"
      }
    },
    "/projects/{projectKey}/repos/{repoName}/settings/mirror": {
      "get": {
        "tags": [
          "repository_settings"
        ],
        "summary": "Get an existing project repository mirroring settings and state.",
        "description": "Get an existing project repository mirroring settings and state.\nDatasource: DB\n\nWarning! Response field 'data' can be empty as indication of not found (CODE-4087).",
        "operationId": "getProjectRepoMirror",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "key of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repoName",
            "in": "path",
            "description": "name of the repository",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/MirrorResponse"
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "404": {
            "description": "DEPRECATED! See the description.",
            "content": {}
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      },
      "post": {
        "tags": [
          "repository_settings"
        ],
        "summary": "Enable a project repository mirroring.",
        "description": "Enable a project repository mirroring or update the mirror parameters.\nDatasource: DB, Job",
        "operationId": "enableProjectRepoMirror",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "key of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repoName",
            "in": "path",
            "description": "name of the repository",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EnableMirroringInput"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/MirrorResponse"
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "x-codegen-request-body-name": "input"
      },
      "delete": {
        "tags": [
          "repository_settings"
        ],
        "summary": "Disable a project repository mirroring.",
        "description": "Disable a project repository mirroring.\nDatasource: DB, Job",
        "operationId": "disableProjectRepoMirror",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "key of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repoName",
            "in": "path",
            "description": "name of the repository",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No Content",
            "content": {}
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/projects/{projectKey}/repos/{repoName}/settings/policy": {
      "get": {
        "tags": [
          "repository_settings"
        ],
        "summary": "Get list an existing project repository pull request merge settings.",
        "description": "Get list an existing project repository pull request merge settings.\nDatasource: DB",
        "operationId": "listProjectRepoPolicy",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "key of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repoName",
            "in": "path",
            "description": "name of the repository",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/RepoPolicyListResponse"
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      },
      "post": {
        "tags": [
          "repository_settings"
        ],
        "summary": "Set pull request merge settings for an existing project repository.",
        "description": "Set pull request merge settings for an existing project repository.\nDatasource: DB",
        "operationId": "addProjectRepoPolicy",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "key of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repoName",
            "in": "path",
            "description": "name of the repository",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRepoPolicyInput"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/RepoPolicyResponse"
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "x-codegen-request-body-name": "input"
      }
    },
    "/projects/{projectKey}/repos/{repoName}/settings/protected_branches": {
      "get": {
        "tags": [
          "repository_settings"
        ],
        "summary": "Get protected branches settings for an existing project repository.",
        "description": "Get protected branches settings for an existing project repository.\nDatasource: DB",
        "operationId": "getProjectRepoProtectedBranchesSettings",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "key of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repoName",
            "in": "path",
            "description": "name of the repository",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ProtectedBranchesSettingsResponse"
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      },
      "put": {
        "tags": [
          "repository_settings"
        ],
        "summary": "Set protected branches settings for an existing project repository.",
        "description": "Set protected branches settings for an existing project repository.\nDatasource: DB",
        "operationId": "setProjectRepoProtectedBranchesSettings",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "key of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repoName",
            "in": "path",
            "description": "name of the repository",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProtectedBranchesSettingsInput"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ProtectedBranchesSettingsResponse"
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "x-codegen-request-body-name": "input"
      }
    },
    "/projects/{projectKey}/repos/{repoName}/settings/reviewer_groups": {
      "get": {
        "tags": [
          "repository_settings"
        ],
        "summary": "List repository reviewer groups settings.",
        "description": "List repository reviewer groups settings.\nDatasource: DB",
        "operationId": "listProjectRepoReviewerGroups",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "key of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repoName",
            "in": "path",
            "description": "name of the repository",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListReviewerGroupsResponse"
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "deprecated": true
      },
      "put": {
        "tags": [
          "repository_settings"
        ],
        "summary": "Set repository reviewer group.",
        "description": "Set repository reviewer group.\nDatasource: DB",
        "operationId": "setProjectRepoReviewerGroup",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "key of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repoName",
            "in": "path",
            "description": "name of the repository",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReviewerGroupInput"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ReviewerGroupResponse"
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "deprecated": true,
        "x-codegen-request-body-name": "input"
      }
    },
    "/projects/{projectKey}/repos/{repoName}/settings/reviewer_groups/{reviewerGroup}": {
      "delete": {
        "tags": [
          "repository_settings"
        ],
        "summary": "Delete repository reviewer group.",
        "description": "Delete repository reviewer group.\nDatasource: DB",
        "operationId": "deleteProjectRepoReviewerGroup",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "key of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repoName",
            "in": "path",
            "description": "name of the repository",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "reviewerGroup",
            "in": "path",
            "description": "reviewer group id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ReviewerGroupResponse"
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "deprecated": true
      }
    },
    "/projects/{projectKey}/repos/{repoName}/settings/search": {
      "get": {
        "tags": [
          "repository_settings"
        ],
        "summary": "Get repo search settings for an existing project repository.",
        "description": "Get repo search settings for an existing project repository.\nDatasource: DB\nWarning! Response field 'data' can be empty as indication of disabled 'Codex' search service.",
        "operationId": "getRepoSearchSettings",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "key of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repoName",
            "in": "path",
            "description": "name of the repository",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/SearchSettingsResponse"
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      },
      "put": {
        "tags": [
          "repository_settings"
        ],
        "summary": "Set repo search settings for an existing project repository.",
        "description": "Set repo search settings for an existing project repository.\nDatasource: DB",
        "operationId": "setRepoSearchSettings",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "key of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repoName",
            "in": "path",
            "description": "name of the repository",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchSettingsInput"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/SearchSettingsResponse"
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "x-codegen-request-body-name": "input"
      }
    },
    "/projects/{projectKey}/repos/{repoName}/settings/structure/branches": {
      "get": {
        "tags": [
          "repository_settings"
        ],
        "summary": "Get list of structure branch setting.",
        "description": "Get list of structure branch setting.\nDatasource: DB",
        "operationId": "listRepoStructureBranch",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "key of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repoName",
            "in": "path",
            "description": "name of the repository",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/RepositorySettingFiltersResponse"
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      },
      "post": {
        "tags": [
          "repository_settings"
        ],
        "summary": "Create repo structure branch settings.",
        "description": "Create repo structure branch settings.\nDatasource: DB",
        "operationId": "createRepoStructureBranch",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "key of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repoName",
            "in": "path",
            "description": "name of the repository",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RepoStructureCreateInput"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/RepositorySettingsFilterResponse"
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "x-codegen-request-body-name": "input"
      }
    },
    "/projects/{projectKey}/repos/{repoName}/settings/structure/branches/{structureBranchId}": {
      "delete": {
        "tags": [
          "repository_settings"
        ],
        "summary": "Delete structure branch setting.",
        "description": "Delete structure branch setting.\nDatasource: DB",
        "operationId": "deleteRepoStructureBranch",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "key of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repoName",
            "in": "path",
            "description": "name of the repository",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "structureBranchId",
            "in": "path",
            "description": "id of the regular expression setting for the branch",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No Content",
            "content": {}
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      },
      "patch": {
        "tags": [
          "repository_settings"
        ],
        "summary": "Update structure branch setting.",
        "description": "Update structure branch setting.\nDatasource: DB",
        "operationId": "updateRepoStructureBranch",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "key of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repoName",
            "in": "path",
            "description": "name of the repository",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "structureBranchId",
            "in": "path",
            "description": "id of the regular expression setting for the branch",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RepoStructurePatchInput"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/RepositorySettingsFilterResponse"
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "x-codegen-request-body-name": "input"
      }
    },
    "/projects/{projectKey}/repos/{repoName}/settings/structure/paths": {
      "get": {
        "tags": [
          "repository_settings"
        ],
        "summary": "Get list of structure path setting.",
        "description": "Get list of structure path setting.\nDatasource: DB",
        "operationId": "listRepoStructurePath",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "key of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repoName",
            "in": "path",
            "description": "name of the repository",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/RepositorySettingFiltersResponse"
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      },
      "post": {
        "tags": [
          "repository_settings"
        ],
        "summary": "Create repo structure path settings.",
        "description": "Create repo structure path settings.\nDatasource: DB",
        "operationId": "createRepoStructurePath",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "key of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repoName",
            "in": "path",
            "description": "name of the repository",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RepoStructureCreateInput"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/RepositorySettingsFilterResponse"
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "x-codegen-request-body-name": "input"
      }
    },
    "/projects/{projectKey}/repos/{repoName}/tags": {
      "get": {
        "tags": [
          "repository"
        ],
        "summary": "List repository tags.",
        "description": "List repository tags.",
        "operationId": "listTags",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "key of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repoName",
            "in": "path",
            "description": "name of the repository",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tagName",
            "in": "query",
            "description": "tag name to filter by tag name pattern",
            "allowEmptyValue": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "cursor of the requested page (received from the previous request)",
            "allowEmptyValue": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "page size of results (ignored if cursor is set)",
            "allowEmptyValue": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListRepoTagsResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      },
      "post": {
        "tags": [
          "repository"
        ],
        "summary": "Create repository tag.",
        "description": "Create repository tag.",
        "operationId": "createTag",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "key of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repoName",
            "in": "path",
            "description": "name of the repository",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTagInput"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/TagResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "422": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "x-codegen-request-body-name": "input"
      }
    },
    "/projects/{projectKey}/repos/{repoName}/tags/{tagName}": {
      "delete": {
        "tags": [
          "repository"
        ],
        "summary": "Delete repository tag.",
        "description": "Delete repository tag.",
        "operationId": "deleteTag",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "key of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repoName",
            "in": "path",
            "description": "name of the repository",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tagName",
            "in": "path",
            "description": "tag name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "",
            "content": {}
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/projects/{projectKey}/repos/{repoName}/tree-metadata": {
      "post": {
        "tags": [
          "tree"
        ],
        "summary": "List a project repository tree metadata.",
        "description": "List a project repository tree metadata.\nDatasource: Git",
        "operationId": "getProjectRepoTreeMetadata",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "key of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repoName",
            "in": "path",
            "description": "name of the repository",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "rev",
            "in": "query",
            "description": "git rev (commit/branch/tag,commit-ish or any other git revision).",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListTreeMetadataInput"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/RepoTreeMetadataResponse"
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "401": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "x-codegen-request-body-name": "input"
      }
    },
    "/projects/{projectKey}/repos/{repoName}/tree/{treePath}": {
      "get": {
        "tags": [
          "tree"
        ],
        "summary": "List a project repository tree.",
        "description": "List a project repository tree.\nDatasource: Git",
        "operationId": "getProjectRepoTree",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "key of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repoName",
            "in": "path",
            "description": "name of the repository",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "treePath",
            "in": "path",
            "description": "path to the repository tree object",
            "required": true,
            "schema": {
              "type": "string",
              "default": "/"
            }
          },
          {
            "name": "rev",
            "in": "query",
            "description": "git rev (commit/branch/tag,commit-ish or any other git revision).",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/RepoTreeResponse"
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "401": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/projects/{projectKey}/repos/{repoName}/usage-quotas": {
      "get": {
        "tags": [
          "repository"
        ],
        "summary": "Get project repository usage quotas.",
        "description": "Get project repository usage quotas.\nDatasource: Git",
        "operationId": "getRepoUsageQuotas",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "key of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repoName",
            "in": "path",
            "description": "name of the repository",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/RepoUsageQuotasResponse"
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/projects/{projectKey}/repos/{repoName}/users": {
      "post": {
        "tags": [
          "repository"
        ],
        "summary": "Get users by logins..",
        "description": "Get users by logins.",
        "operationId": "GetUsersByLogins",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "key of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repoName",
            "in": "path",
            "description": "name of the repository",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserLoginsInput"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/SimpleUserListResponse"
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "x-codegen-request-body-name": "input"
      }
    },
    "/projects/{projectKey}/repos/{repoName}/webhooks": {
      "get": {
        "tags": [
          "webhook"
        ],
        "summary": "Get an existing repository webhooks list.",
        "description": "Get an existing repository webhooks list.\nDatasource: DB",
        "operationId": "getProjectRepoWebhooks",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "key of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repoName",
            "in": "path",
            "description": "name of the repository",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/WebhooksListResponse"
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      },
      "post": {
        "tags": [
          "webhook"
        ],
        "summary": "Create new webhook.",
        "description": "Create new webhook.\nDatasource: DB, Kafka",
        "operationId": "createProjectRepoWebhook",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "key of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repoName",
            "in": "path",
            "description": "name of the repository",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateWebhookInput"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/WebhookResponse"
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "x-codegen-request-body-name": "input"
      }
    },
    "/projects/{projectKey}/repos/{repoName}/webhooks/check": {
      "post": {
        "tags": [
          "webhook"
        ],
        "summary": "Make a test connection.",
        "description": "Make a test connection.\nTo date, it has worked with sfera.CI/CD.",
        "operationId": "CheckConnectionWebhook",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "key of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repoName",
            "in": "path",
            "description": "name of the repository",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CheckConnectionWebhookInput"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CheckConnectionWebhookResponse"
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "x-codegen-request-body-name": "input"
      }
    },
    "/projects/{projectKey}/repos/{repoName}/webhooks/{whId}": {
      "get": {
        "tags": [
          "webhook"
        ],
        "summary": "Get an existing repository webhook.",
        "description": "Get an existing repository webhook.\nDatasource: DB",
        "operationId": "getProjectRepoWebhook",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "key of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repoName",
            "in": "path",
            "description": "name of the repository",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "whId",
            "in": "path",
            "description": "webhook id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/WebhookResponse"
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      },
      "delete": {
        "tags": [
          "webhook"
        ],
        "summary": "Delete an existing webhook.",
        "description": "Delete an existing webhook.\nDatasource: DB, Kafka",
        "operationId": "deleteProjectRepoWebhook",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "key of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repoName",
            "in": "path",
            "description": "name of the repository",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "whId",
            "in": "path",
            "description": "webhook id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No Content",
            "content": {}
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      },
      "patch": {
        "tags": [
          "webhook"
        ],
        "summary": "Update an existing webhook.",
        "description": "Update an existing webhook fields.\nDatasource: DB, Kafka",
        "operationId": "updateProjectRepoWebhook",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "key of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repoName",
            "in": "path",
            "description": "name of the repository",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "whId",
            "in": "path",
            "description": "webhook id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateWebhookInput"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/WebhookResponse"
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "x-codegen-request-body-name": "input"
      }
    },
    "/projects/{projectKey}/service-accounts/": {
      "get": {
        "tags": [
          "service_account"
        ],
        "summary": "List project service accounts.",
        "description": "List of project service accounts.\nDatasource: DB",
        "operationId": "listServiceAccounts",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "key of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ServiceAccountsListResponse"
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      },
      "put": {
        "tags": [
          "service_account"
        ],
        "summary": "Create a new project service account.",
        "description": "Create a new project service account.\nDatasource: DB",
        "operationId": "createServiceAccount",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "key of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateServiceAccountInput"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ServiceAccountResponse"
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "x-codegen-request-body-name": "input"
      }
    },
    "/projects/{projectKey}/service-accounts/{saName}": {
      "get": {
        "tags": [
          "service_account"
        ],
        "summary": "Get an existing project service account.",
        "description": "Get an existing project service account.\nDatasource: DB",
        "operationId": "getServiceAccount",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "key of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "saName",
            "in": "path",
            "description": "service account name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ServiceAccountResponse"
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      },
      "delete": {
        "tags": [
          "service_account"
        ],
        "summary": "Delete an existing project service account.",
        "description": "Delete an existing project service account.\nDatasource: DB",
        "operationId": "deleteServiceAccount",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "key of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "saName",
            "in": "path",
            "description": "service account name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "replace",
            "in": "query",
            "description": "The name of the service account to be replaced with.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No Content",
            "content": {}
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      },
      "patch": {
        "tags": [
          "service_account"
        ],
        "summary": "Update an existing project account service.",
        "description": "Update an existing project service account fields. At least one input field must be provided.\nDatasource: DB",
        "operationId": "updateServiceAccount",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "key of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "saName",
            "in": "path",
            "description": "service account name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateServiceAccountInput"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ServiceAccountResponse"
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "x-codegen-request-body-name": "input"
      }
    },
    "/projects/{projectKey}/service-accounts/{saName}/entities": {
      "get": {
        "tags": [
          "service_account"
        ],
        "summary": "Entities info by service accounts.",
        "description": "Entities info of project service accounts.\nDatasource: DB",
        "operationId": "ListServiceAccountEntities",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "key of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "saName",
            "in": "path",
            "description": "service account name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListServiceAccountEntitiesResponse"
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/projects/{projectKey}/settings/usage-quotas": {
      "get": {
        "tags": [
          "project"
        ],
        "summary": "Get project usage quotas settings. Includes soft and hard for file and repository add-ons.",
        "description": "Get project setting usage quotas. Includes soft and hard for file and repository add-ons.\nDatasource: DB",
        "operationId": "getUsageQuotasSettingsProject",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "key of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ProjectUsageQuotasSettingsResponse"
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      },
      "put": {
        "tags": [
          "project"
        ],
        "summary": "Update project usage quotas settings. Includes basic, soft and hard for file and repository add-ons.",
        "description": "Update project setting usage quotas. Includes basic, soft and hard for file and repository add-ons. Min: 1MB, Max: 100GB.\nDatasource: DB",
        "operationId": "putUsageQuotasSettingsProject",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "key of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProjectUsageQuotasSettingsInput"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ProjectUsageQuotasSettingsResponse"
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "x-codegen-request-body-name": "input"
      }
    },
    "/service-information": {
      "get": {
        "tags": [
          "label"
        ],
        "summary": "Get service information.",
        "description": "Get service information from label names.\nDatasource: DB",
        "operationId": "getServiceInformation",
        "parameters": [
          {
            "name": "label_names",
            "in": "query",
            "description": "list of label names",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ServiceInformationResponse"
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/subscribe": {
      "put": {
        "tags": [
          "notification_subscription"
        ],
        "summary": "Create notification subscription.",
        "description": "Create notification subscription.\nOne must specify the subscription object and subscription type.\nDatasource: DB",
        "operationId": "addNotificationSubscription",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NotificationSubscriptionInput"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/NotificationSubscriptionResponse"
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "x-codegen-request-body-name": "input"
      }
    },
    "/subscription-info": {
      "get": {
        "tags": [
          "notification_subscription"
        ],
        "summary": "Get notification subscription info in regard of requester.",
        "description": "Get notification subscription info in regard of requester.\nDatasource: DB.",
        "operationId": "getNotificationSubscriptionInfo",
        "parameters": [
          {
            "name": "subscription_type",
            "in": "query",
            "description": "subscription type",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "subscription_object",
            "in": "query",
            "description": "subscription object",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/NotificationSubscriptionInfoResponse"
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/subscriptions": {
      "get": {
        "tags": [
          "notification_subscription"
        ],
        "summary": "Get notification subscriptions.",
        "description": "Get notification subscriptions.\n Datasource: DB",
        "operationId": "getNotificationSubscriptions",
        "parameters": [
          {
            "name": "subscription_type",
            "in": "query",
            "description": "subscription type",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "subscription_object",
            "in": "query",
            "description": "subscription object",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/NotificationSubscriptionsResponse"
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/unsubscribe": {
      "delete": {
        "tags": [
          "notification_subscription"
        ],
        "summary": "Unsubscribe from notifications.",
        "description": "Unsubscribe from notifications.\nDatasource: DB.",
        "operationId": "deleteNotificationSubscription",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NotificationSubscriptionInput"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "No Content",
            "content": {}
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "x-codegen-request-body-name": "input"
      }
    },
    "/users": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "List users",
        "description": "Paginated list of users.\nDatasource: DB",
        "operationId": "listUsers",
        "parameters": [
          {
            "name": "cursor",
            "in": "query",
            "description": "cursor of the requested page (received from the previous request)",
            "allowEmptyValue": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "page size of results (ignored if cursor is set)",
            "allowEmptyValue": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sorting type of results",
            "allowEmptyValue": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "sort order of results",
            "allowEmptyValue": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "filter users by name / full_name / email",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/UsersListResponse"
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/users/keys": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "List user public keys for SSH access.",
        "description": "List user public keys for SSH access.\nDatasource: DB",
        "operationId": "listPublicKeys",
        "responses": {
          "200": {
            "$ref": "#/components/responses/UserPublicKeysListResponse"
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      },
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Create a new user public key for SSH access.",
        "description": "Create a new user public key for SSH access.\nDatasource: DB",
        "operationId": "createPublicKey",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserPublicKeyInput"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/UserPublicKeyResponse"
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "x-codegen-request-body-name": "input"
      }
    },
    "/users/keys/{fingerprint}": {
      "delete": {
        "tags": [
          "user"
        ],
        "summary": "Delete an existing user public key for SSH access.",
        "description": "Delete an existing user public key for SSH access.\nDatasource: DB",
        "operationId": "deletePublicKey",
        "parameters": [
          {
            "name": "fingerprint",
            "in": "path",
            "description": "URL-escaped key fingerprint (ssh-keygen -lf)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No Content",
            "content": {}
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      },
      "patch": {
        "tags": [
          "user"
        ],
        "summary": "Update an existing user public key for SSH access.",
        "description": "Update an existing user public key for SSH access.\nDatasource: DB",
        "operationId": "updatePublicKey",
        "parameters": [
          {
            "name": "fingerprint",
            "in": "path",
            "description": "URL-escaped key fingerprint (ssh-keygen -lf)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserPublicKeyInput"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/UserPublicKeyResponse"
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "x-codegen-request-body-name": "input"
      }
    },
    "/users/self": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get the current user information.",
        "description": "Get the current user information.\nDatasource: DB",
        "operationId": "self",
        "responses": {
          "200": {
            "$ref": "#/components/responses/UserResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/users/tokens": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "List user access tokens.",
        "description": "List user access tokens.\nDatasource: DB",
        "operationId": "listTokens",
        "responses": {
          "200": {
            "$ref": "#/components/responses/UserTokensListResponse"
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      },
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Create a new user access token.",
        "description": "Create a new user access token.\nDatasource: DB",
        "operationId": "createToken",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserTokenInput"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/UserTokenResponse"
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "x-codegen-request-body-name": "input"
      }
    },
    "/users/tokens/{tokenHash}": {
      "delete": {
        "tags": [
          "user"
        ],
        "summary": "Delete an existing user access token.",
        "description": "Delete an existing user access token.\nDatasource: DB",
        "operationId": "deleteToken",
        "parameters": [
          {
            "name": "tokenHash",
            "in": "path",
            "description": "token hash",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No Content",
            "content": {}
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      },
      "patch": {
        "tags": [
          "user"
        ],
        "summary": "Update an existing user access token.",
        "description": "Update an existing user access token.\nDatasource: DB",
        "operationId": "updateToken",
        "parameters": [
          {
            "name": "tokenHash",
            "in": "path",
            "description": "token hash",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserTokenInput"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/UserTokenResponse"
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "x-codegen-request-body-name": "input"
      }
    },
    "/users/tokens/{token}/check": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Check user token existence.",
        "description": "Check user token existence.\nDatasource: DB",
        "operationId": "checkToken",
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "description": "user token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/UserTokenCheckResponse"
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/users/{username}": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get an existing user information.",
        "description": "Get an existing user information.\nDatasource: DB",
        "operationId": "getUser",
        "parameters": [
          {
            "name": "userName",
            "in": "path",
            "description": "username (login)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/UserResponse"
          },
          "403": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/version": {
      "get": {
        "tags": [
          "common"
        ],
        "summary": "Version app and build time",
        "description": "Get release number and build time",
        "operationId": "VersionCheck",
        "responses": {
          "200": {
            "description": "<last tag>-<advance commit>-g<hash commit>, <build date>",
            "content": {}
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ApplyRepositoryPatchInput": {
        "title": "ApplyRepositoryPatchInput",
        "required": [
          "content",
          "message",
          "target_branch"
        ],
        "type": "object",
        "properties": {
          "content": {
            "type": "string",
            "description": "Patch content (base64 encoded).",
            "x-go-name": "Content"
          },
          "last_commit_id": {
            "type": "string",
            "description": "Commit ID this patch is based on.\nMight be empty if the repo is not initialized (empty).",
            "x-go-name": "LastCommitID"
          },
          "message": {
            "type": "string",
            "description": "Commit message.",
            "x-go-name": "Message"
          },
          "target_branch": {
            "type": "string",
            "description": "Target branch name (will be created if it doesn't exist).",
            "x-go-name": "TargetBranch"
          }
        },
        "description": "Represents the repository apply patch options.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "Assignee": {
        "title": "Assignee",
        "type": "object",
        "properties": {
          "decision": {
            "type": "string",
            "description": "Decision.\npending AssigneeDecisionPending  No decision yet.\napprove AssigneeDecisionApprove  Pull request approved.\nreject AssigneeDecisionReject  Pull request rejected.",
            "enum": [
              "pending",
              "approve",
              "reject"
            ],
            "x-go-enum-desc": "pending AssigneeDecisionPending  No decision yet.\napprove AssigneeDecisionApprove  Pull request approved.\nreject AssigneeDecisionReject  Pull request rejected.",
            "x-go-name": "Decision"
          },
          "email": {
            "type": "string",
            "description": "Unique primary email.",
            "format": "email",
            "x-go-name": "Email"
          },
          "first_name": {
            "type": "string",
            "description": "First name.",
            "x-go-name": "FirstName"
          },
          "full_name": {
            "type": "string",
            "description": "Full name.",
            "x-go-name": "FullName"
          },
          "last_name": {
            "type": "string",
            "description": "Last name.",
            "x-go-name": "LastName"
          },
          "login": {
            "type": "string",
            "description": "Unique username (login).",
            "x-go-name": "UserName"
          },
          "middle_name": {
            "type": "string",
            "description": "Middle name.",
            "x-go-name": "MiddleName"
          },
          "principal_name": {
            "type": "string",
            "description": "User principal name.",
            "x-go-name": "PrincipalName"
          }
        },
        "description": "Represents pull request assignee information.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "AssigneeDecisionInput": {
        "title": "AssigneeDecisionInput",
        "type": "object",
        "properties": {
          "decision": {
            "type": "string",
            "enum": [
              "pending",
              "approve",
              "reject"
            ],
            "x-go-enum-desc": "pending AssigneeDecisionPending  No decision yet.\napprove AssigneeDecisionApprove  Pull request approved.\nreject AssigneeDecisionReject  Pull request rejected.",
            "x-go-name": "Decision"
          }
        },
        "description": "Represents a repository pull request assignee decision input model.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "AutoMergeInput": {
        "title": "AutoMergeInput",
        "type": "object",
        "properties": {
          "commit_message": {
            "type": "string",
            "description": "Pull request's commit message",
            "x-go-name": "CommitMessage"
          },
          "delete_source_branch": {
            "type": "boolean",
            "description": "Delete source branch option for merged pull request",
            "x-go-name": "DeleteSourceBranch"
          },
          "is_on": {
            "type": "boolean",
            "description": "On/Off toggler",
            "x-go-name": "IsOn"
          },
          "merge_style": {
            "type": "string",
            "description": "Pull request's merge style\nmerge PullRequestMergeStyleMerge  Non fast-forward merge source into target.\nrebase PullRequestMergeStyleRebase  Rebase a source onto a target and do fast-forward merge.\nfast-forward-only PullRequestMergeStyleFastForward  Fast-forward only merge.\nsquash PullRequestMergeStyleSquash  Squash commits into single commit and do non fast-forward merge.\nrebase-merge PullRequestMergeStyleRebaseMerge  Rebase a source into target and do non fast-forward merge.\nmanually-merged PullRequestMergeStyleManuallyMerged  Pull request has been merged manually, just mark it as merged directly.",
            "enum": [
              "merge",
              "rebase",
              "fast-forward-only",
              "squash",
              "rebase-merge",
              "manually-merged"
            ],
            "x-go-enum-desc": "merge PullRequestMergeStyleMerge  Non fast-forward merge source into target.\nrebase PullRequestMergeStyleRebase  Rebase a source onto a target and do fast-forward merge.\nfast-forward-only PullRequestMergeStyleFastForward  Fast-forward only merge.\nsquash PullRequestMergeStyleSquash  Squash commits into single commit and do non fast-forward merge.\nrebase-merge PullRequestMergeStyleRebaseMerge  Rebase a source into target and do non fast-forward merge.\nmanually-merged PullRequestMergeStyleManuallyMerged  Pull request has been merged manually, just mark it as merged directly.",
            "x-go-name": "MergeStyle"
          }
        },
        "description": "# Represents pull request's auto merge configuration input",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "AutoMergeStatus": {
        "title": "AutoMergeStatus",
        "type": "string",
        "description": "Represents pull request auto merge status.\npending\nerror\ncompleted",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "AutoMergeUpdateInput": {
        "title": "AutoMergeUpdateInput",
        "type": "object",
        "properties": {
          "commit_message": {
            "type": "string",
            "description": "Pull request's commit message",
            "x-go-name": "CommitMessage"
          },
          "delete_source_branch": {
            "type": "boolean",
            "description": "Delete source branch option for merged pull request",
            "x-go-name": "DeleteSourceBranch"
          },
          "is_on": {
            "type": "boolean",
            "description": "On/Off toggler",
            "x-go-name": "IsOn"
          },
          "merge_style": {
            "type": "string",
            "description": "Pull request's merge style\nmerge PullRequestMergeStyleMerge  Non fast-forward merge source into target.\nrebase PullRequestMergeStyleRebase  Rebase a source onto a target and do fast-forward merge.\nfast-forward-only PullRequestMergeStyleFastForward  Fast-forward only merge.\nsquash PullRequestMergeStyleSquash  Squash commits into single commit and do non fast-forward merge.\nrebase-merge PullRequestMergeStyleRebaseMerge  Rebase a source into target and do non fast-forward merge.\nmanually-merged PullRequestMergeStyleManuallyMerged  Pull request has been merged manually, just mark it as merged directly.",
            "enum": [
              "merge",
              "rebase",
              "fast-forward-only",
              "squash",
              "rebase-merge",
              "manually-merged"
            ],
            "x-go-enum-desc": "merge PullRequestMergeStyleMerge  Non fast-forward merge source into target.\nrebase PullRequestMergeStyleRebase  Rebase a source onto a target and do fast-forward merge.\nfast-forward-only PullRequestMergeStyleFastForward  Fast-forward only merge.\nsquash PullRequestMergeStyleSquash  Squash commits into single commit and do non fast-forward merge.\nrebase-merge PullRequestMergeStyleRebaseMerge  Rebase a source into target and do non fast-forward merge.\nmanually-merged PullRequestMergeStyleManuallyMerged  Pull request has been merged manually, just mark it as merged directly.",
            "x-go-name": "MergeStyle"
          }
        },
        "description": "# Represents pull request's auto merge update input",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "AutolinkSettings": {
        "title": "AutolinkSettings",
        "type": "object",
        "properties": {
          "is_active": {
            "type": "boolean",
            "description": "If set then issues auto-linking are enabled.",
            "x-go-name": "IsActive"
          },
          "issue_prefix": {
            "type": "string",
            "description": "This prefix appended by alphanumeric string(A-Z, 0-9,-) will generate a link anytime it is found in an issue, pull request or commit.",
            "example": "'DEV-'.",
            "x-go-name": "IssuePrefix"
          },
          "target_url_template": {
            "type": "string",
            "description": "Defines target URL template.\nThe URL must contain <num> for the reference number.",
            "example": "'https://jira.yourproject.com/browse/DEV-<num>'",
            "x-go-name": "TargetUrlTemplate"
          },
          "updated_at": {
            "type": "string",
            "description": "Settings updated timestamp.",
            "format": "date-time",
            "x-go-name": "UpdatedAt"
          }
        },
        "description": "Represents a repository autolink settings.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "BranchWithMetadataInput": {
        "title": "BranchWithMetadataInput",
        "required": [
          "branches"
        ],
        "type": "object",
        "properties": {
          "branches": {
            "type": "array",
            "description": "List of branches to get metadata",
            "example": [
              "master",
              "develop",
              "feature/awesome"
            ],
            "items": {
              "type": "string"
            },
            "x-go-name": "Branches"
          }
        },
        "description": "Represents a input for getting branch metadata.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "CIBuild": {
        "title": "CIBuild is a common response object.",
        "type": "object",
        "properties": {
          "build_number": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "BuildNumber"
          },
          "build_url": {
            "type": "string",
            "x-go-name": "BuildURL"
          },
          "commit_id": {
            "$ref": "#/components/schemas/Sha1"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "CreatedAt"
          },
          "slug": {
            "$ref": "#/components/schemas/RepoSlug"
          },
          "source_branch": {
            "type": "string",
            "x-go-name": "SourceBranch"
          },
          "status": {
            "$ref": "#/components/schemas/CIBuildStatus"
          }
        },
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "CIBuildConfig": {
        "title": "CIBuildConfig",
        "type": "object",
        "properties": {
          "urls": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "Urls"
          }
        },
        "description": "CIBuild settings from app config.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "CIBuildStatus": {
        "title": "CIBuildStatus",
        "type": "string",
        "description": "Represents pull request auto merge status.\nBUILDING\nIN_QUEUE\nIN_PROGRESS\nINPUT_WAIT\nSUCCESS\nABORTED\nFAILURE\nUNSTABLE",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "CheckConnectionWebhook": {
        "title": "CheckConnectionWebhook",
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "x-go-name": "Message"
          },
          "error_source": {
            "$ref": "#/components/schemas/CheckConnectionWebhookErrorSource"
          },
          "status": {
            "$ref": "#/components/schemas/CheckConnectionWebhookStatus"
          }
        },
        "description": "Represents test connection report.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "CheckConnectionWebhookErrorSource": {
        "title": "CheckConnectionWebhookErrorSource",
        "type": "string",
        "description": "Сontains the source of the response from where the error message came.\nRepresents webhook source error.\nsfera_service_account: The service account could not receive the token.\nsfera_ci_authentication: The CI/CD was not authenticated.\nsfera_ci_permissions: There are no rights in CI/CD.\nsfera_ci_project_not_found: The project was not found in CI/CD.\nsfera_ci_generic_error: There is a secondary error in CI/CD.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "CheckConnectionWebhookInput": {
        "$ref": "#/components/schemas/WebhookReceiver"
      },
      "CheckConnectionWebhookStatus": {
        "title": "CheckConnectionWebhookStatus",
        "type": "string",
        "description": "Сontains the status of the response from the test connection to sfera.CI/CD.\nRepresents webhook status error.\nsucceed: Successful connection to sfera.CI/CD.\nerror: Error checking the test connection to sfera.CI/CD.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "CloneLinks": {
        "title": "CloneLinks",
        "type": "object",
        "properties": {
          "https": {
            "type": "string",
            "description": "HTTPS is a link for cloning repo using HTTPS",
            "x-go-name": "HTTPS"
          },
          "ssh": {
            "type": "string",
            "description": "SSH is a link for cloning repo using SSH",
            "x-go-name": "SSH"
          }
        },
        "description": "Represents repository clone links info.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "CommitPerson": {
        "title": "CommitPerson",
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "User email.",
            "format": "email",
            "x-go-name": "Email"
          },
          "name": {
            "type": "string",
            "description": "User name.",
            "x-go-name": "Name"
          },
          "when": {
            "type": "string",
            "description": "Create or commit time.",
            "format": "date-time",
            "x-go-name": "When"
          }
        },
        "description": "Represents a Git author/committer.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "Config": {
        "title": "Config",
        "type": "object",
        "properties": {
          "ci_build": {
            "$ref": "#/components/schemas/CIBuildConfig"
          },
          "repo": {
            "$ref": "#/components/schemas/RepoConfig"
          },
          "security": {
            "$ref": "#/components/schemas/SecurityConfig"
          }
        },
        "description": "Limits from app config.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "CreateBranchInput": {
        "title": "CreateBranchInput",
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "base": {
            "maxLength": 250,
            "type": "string",
            "description": "Branch to be used as base for the new branch (default repo branch is used if not specified)",
            "example": "master",
            "x-go-name": "Base"
          },
          "name": {
            "maxLength": 250,
            "type": "string",
            "description": "New branch name",
            "example": "awesomeBranch",
            "x-go-name": "Name"
          }
        },
        "description": "Represents a repository branch create options.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "CreateForkInput": {
        "title": "CreateForkInput",
        "required": [
          "destination_project_key",
          "destination_repo_name"
        ],
        "type": "object",
        "properties": {
          "destination_project_key": {
            "maxLength": 40,
            "type": "string",
            "description": "Fork project key",
            "example": "awesomeProject",
            "x-go-name": "DestinationProjectKey"
          },
          "destination_repo_description": {
            "maxLength": 255,
            "type": "string",
            "description": "Short description",
            "example": "Fork from BE repo",
            "x-go-name": "DestinationRepoDescription"
          },
          "destination_repo_name": {
            "maxLength": 128,
            "type": "string",
            "description": "Fork repository name",
            "x-go-name": "DestinationRepoName"
          }
        },
        "description": "Represents a repository fork creation options.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "CreateIssueInput": {
        "title": "CreateIssueInput",
        "required": [
          "branch",
          "name"
        ],
        "type": "object",
        "properties": {
          "branch": {
            "maxLength": 250,
            "type": "string",
            "description": "Branch name.",
            "example": "awesomeBranch",
            "x-go-name": "Branch"
          },
          "name": {
            "maxLength": 128,
            "type": "string",
            "description": "Issue name.",
            "example": "TASK-001",
            "x-go-name": "Name"
          },
          "url": {
            "maxLength": 512,
            "type": "string",
            "description": "Issue external URL.",
            "example": "http://tasks.com/TASK-001",
            "x-go-name": "Url"
          }
        },
        "description": "Represents the user issue create options.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "CreateOrUpdateAutolinkSettingsInput": {
        "title": "CreateOrUpdateAutolinkSettingsInput",
        "required": [
          "is_active",
          "issue_prefix",
          "target_url_template"
        ],
        "type": "object",
        "properties": {
          "is_active": {
            "type": "boolean",
            "description": "If set then issues auto-linking are enabled.",
            "x-go-name": "IsActive"
          },
          "issue_prefix": {
            "type": "string",
            "description": "This prefix appended by alphanumeric string(A-Z, 0-9,-) will generate a link anytime it is found in an issue, pull request or commit.",
            "example": "'DEV-'.",
            "x-go-name": "IssuePrefix"
          },
          "target_url_template": {
            "type": "string",
            "description": "Defines target URL template.\nThe URL must contain <num> for the reference number.",
            "example": "'https://jira.yourproject.com/browse/DEV-<num>'",
            "x-go-name": "TargetUrlTemplate"
          }
        },
        "description": "Represents a repository autolink settings create/update options.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "CreateProjectInput": {
        "title": "CreateProjectInput",
        "required": [
          "full_name",
          "name"
        ],
        "type": "object",
        "properties": {
          "description": {
            "maxLength": 255,
            "type": "string",
            "description": "Description.",
            "example": "Project does awesome stuff",
            "x-go-name": "Description"
          },
          "full_name": {
            "maxLength": 255,
            "type": "string",
            "description": "Name.",
            "example": "My awesome project",
            "x-go-name": "Name"
          },
          "is_public": {
            "type": "boolean",
            "description": "Is project public or private (default - false).",
            "x-go-name": "IsPublic"
          },
          "lfs_allow": {
            "type": "boolean",
            "description": "Is project has lfs.",
            "x-go-name": "LFSAllow"
          },
          "name": {
            "maxLength": 40,
            "type": "string",
            "description": "Unique project key.",
            "example": "awesomeProject",
            "x-go-name": "Key"
          },
          "parent_id": {
            "type": "integer",
            "description": "ParentID a parent's group or project identifier",
            "format": "int64",
            "example": 12,
            "x-go-name": "ParentID"
          }
        },
        "description": "Represents the project create options.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "CreatePullRequestInput": {
        "title": "CreatePullRequestInput",
        "type": "object",
        "properties": {
          "assignees": {
            "type": "array",
            "description": "List of pull request logins",
            "example": [
              "user1@mail.com",
              "user2"
            ],
            "items": {
              "type": "string"
            },
            "x-go-name": "Assignees"
          },
          "description": {
            "maxLength": 4000,
            "type": "string",
            "description": "Pull request description",
            "example": "Let me introduce so marvelous changes.",
            "x-go-name": "Description"
          },
          "idempotency_key": {
            "$ref": "#/components/schemas/PullRequestIdempotencyKey"
          },
          "source_branch": {
            "type": "string",
            "description": "Branch name of the pull request source (source is merged to the target)",
            "example": "my_branch",
            "x-go-name": "SourceBranch"
          },
          "source_slug": {
            "$ref": "#/components/schemas/RepoSlug"
          },
          "target_branch": {
            "type": "string",
            "description": "Branch name of the pull request target (source is merged to the target)",
            "example": "master",
            "x-go-name": "TargetBranch"
          },
          "title": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "Pull request title",
            "example": "My gorgeous pull request.",
            "x-go-name": "Title"
          }
        },
        "description": "Represents repository pull request create options.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "CreateRepositoryInput": {
        "title": "CreateRepositoryInput",
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "default_branch": {
            "maxLength": 250,
            "type": "string",
            "description": "Default branch name (a valid GitRefName).",
            "x-go-name": "DefaultBranch"
          },
          "description": {
            "maxLength": 255,
            "type": "string",
            "description": "Short description.",
            "example": "My awesome repo",
            "x-go-name": "Description"
          },
          "initialize_readme": {
            "type": "boolean",
            "description": "Initialize the readme file (default - false).",
            "x-go-name": "InitializeReadme"
          },
          "name": {
            "maxLength": 128,
            "type": "string",
            "description": "Unique repository name.",
            "x-go-name": "Name"
          }
        },
        "description": "Represents the repository create options.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "CreateServiceAccountInput": {
        "title": "CreateServiceAccountInput",
        "required": [
          "login",
          "name",
          "password"
        ],
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "Description.",
            "x-go-name": "Description"
          },
          "login": {
            "type": "string",
            "description": "Login.",
            "x-go-name": "Login"
          },
          "name": {
            "type": "string",
            "description": "Name.",
            "x-go-name": "Name"
          },
          "password": {
            "type": "string",
            "description": "Password.",
            "x-go-name": "Password"
          }
        },
        "description": "Represents the project service account create options.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "CreateTagInput": {
        "title": "CreateTagInput",
        "type": "object",
        "properties": {
          "commit": {
            "$ref": "#/components/schemas/Sha1"
          },
          "message": {
            "type": "string",
            "description": "Message of a tag (optional)",
            "x-go-name": "Message"
          },
          "name": {
            "type": "string",
            "description": "Name if a tag",
            "x-go-name": "Name"
          }
        },
        "description": "Represents create tag input model.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "CreateUserPublicKeyInput": {
        "title": "CreateUserPublicKeyInput",
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "data": {
            "type": "string",
            "description": "Public key data.",
            "x-go-name": "Data"
          },
          "name": {
            "maxLength": 100,
            "type": "string",
            "description": "Key name (description).",
            "x-go-name": "Name"
          },
          "ttl": {
            "type": "string",
            "description": "Public key TTL.",
            "format": "duration",
            "example": "10m, 1000s, 4h, 3h12m33s",
            "x-go-name": "TTL"
          }
        },
        "description": "Represents the user public key create options.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "CreateUserTokenInput": {
        "title": "CreateUserTokenInput",
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 100,
            "type": "string",
            "description": "Token name (description).",
            "x-go-name": "Name"
          },
          "ttl": {
            "type": "string",
            "description": "Token TTL.",
            "format": "duration",
            "example": "10m, 1000s, 4h, 3h12m33s",
            "x-go-name": "TTL"
          }
        },
        "description": "Represents the user access token create options.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "CreateWebhookInput": {
        "title": "CreateWebhookInput",
        "type": "object",
        "properties": {
          "branch_and_tag_filter": {
            "$ref": "#/components/schemas/WebhookBranchAndTagFilter"
          },
          "events": {
            "$ref": "#/components/schemas/WebhookEvents"
          },
          "is_active": {
            "type": "boolean",
            "description": "Is webhook active or disabled.",
            "example": true,
            "x-go-name": "IsActive"
          },
          "name": {
            "type": "string",
            "description": "Unique name.",
            "example": "Telegram Webhook #1",
            "x-go-name": "Name"
          },
          "pull_request_target_branch_filter": {
            "$ref": "#/components/schemas/WebhookPullRequestTargetBranchFilter"
          },
          "receiver": {
            "$ref": "#/components/schemas/WebhookReceiver"
          }
        },
        "description": "Represents webhook create options.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "DeleteAsyncProjectInfo": {
        "title": "DeleteAsyncProjectInfo",
        "type": "object",
        "properties": {
          "job_id": {
            "$ref": "#/components/schemas/JobId"
          }
        },
        "description": "Represents the project async deletion info.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "DeleteBranchesInfo": {
        "title": "DeleteBranchesInfo",
        "type": "object",
        "properties": {
          "names_of_deleted_branches_with_errors": {
            "type": "array",
            "description": "Deleted branches with errors.",
            "items": {
              "type": "string"
            },
            "x-go-name": "NamesOfDeletedBranchesWithErrors"
          },
          "names_of_successfully_deleted_branches": {
            "type": "array",
            "description": "Successfully deleted branches.",
            "items": {
              "type": "string"
            },
            "x-go-name": "NamesOfSuccessfullyDeletedBranches"
          }
        },
        "description": "Represents the branches deletion info.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "DeleteBranchesInput": {
        "title": "DeleteBranchesInput",
        "type": "object",
        "properties": {
          "delete_merged": {
            "type": "boolean",
            "description": "Delete merged branches flag",
            "x-go-name": "DeleteMerged"
          }
        },
        "description": "aggregates the options for deleting branches.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "DeleteProjectInfo": {
        "title": "DeleteProjectInfo",
        "type": "object",
        "properties": {
          "projects_count": {
            "type": "integer",
            "description": "ProjectsCount is a count of deleted projects",
            "format": "int64",
            "x-go-name": "ProjectsCount"
          }
        },
        "description": "Represents the project deletion info.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "DeleteRepoInfo": {
        "title": "DeleteRepoInfo",
        "type": "object",
        "properties": {
          "pull_requests_count": {
            "type": "integer",
            "description": "PullRequestsCount is a count of deleted repository pull requests.",
            "format": "int64",
            "x-go-name": "PullRequestsCount"
          },
          "repos_count": {
            "type": "integer",
            "description": "ReposCount is a count of deleted repositories.",
            "format": "int64",
            "x-go-name": "ReposCount"
          }
        },
        "description": "Represents repository deletion statistic.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "Diff": {
        "title": "Diff",
        "type": "object",
        "properties": {
          "content": {
            "type": "string",
            "description": "Base64 encoded diff content",
            "x-go-name": "Content"
          },
          "excluded_files": {
            "type": "array",
            "description": "List of files excluded from diff.",
            "items": {
              "type": "string"
            },
            "x-go-name": "ExcludedFiles"
          },
          "large_files": {
            "type": "array",
            "description": "List of large files names",
            "items": {
              "type": "string"
            },
            "x-go-name": "LargeFiles"
          },
          "source_head_id": {
            "$ref": "#/components/schemas/Sha1"
          }
        },
        "description": "Represents the two branches diff.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "Duration": {
        "$ref": "#/components/schemas/Duration"
      },
      "EnableMirroringInput": {
        "title": "EnableMirroringInput",
        "required": [
          "remote_url",
          "type"
        ],
        "type": "object",
        "properties": {
          "remote_password": {
            "type": "string",
            "description": "Remote repository auth credentials.",
            "x-go-name": "RemotePassword"
          },
          "remote_url": {
            "type": "string",
            "description": "Remote Git repository URL.",
            "example": "https://git.com/my-repo.git",
            "x-go-name": "RemoteUrl"
          },
          "remote_user": {
            "type": "string",
            "description": "Remote repository auth credentials.",
            "x-go-name": "RemoteUser"
          },
          "sync_interval": {
            "type": "string",
            "description": "Mirror sync interval (if not set, the server default is used).",
            "format": "duration",
            "example": "10m, 1000s, 4h, 3h12m33s",
            "x-go-name": "SyncInterval"
          },
          "type": {
            "$ref": "#/components/schemas/MirrorType"
          }
        },
        "description": "Represents the repository mirror enabling options.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "Error": {
        "title": "Error",
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Message is the error message visible to the user (more details can be gathered via logs and requestID).",
            "x-go-name": "Message"
          },
          "metadata": {
            "type": "object",
            "description": "In order to find out what are the variants of specific values in this key, please search for the models with the following names:\n\\*ErrorMetadata\nRepoTagErrorMetadata",
            "x-go-name": "Metadata"
          },
          "scope": {
            "type": "array",
            "description": "Scope defines the scope of an error (query parameter, business entity etc).",
            "items": {
              "$ref": "#/components/schemas/ErrorScopeElement"
            },
            "x-go-name": "Scope"
          },
          "type": {
            "$ref": "#/components/schemas/ErrorType"
          }
        },
        "description": "Defines the format of an error response.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "ErrorScopeElement": {
        "title": "ErrorScopeElement",
        "type": "object",
        "properties": {
          "element": {
            "type": "string",
            "x-go-name": "Element"
          }
        },
        "description": "Defines the scope of an error response.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "ErrorType": {
        "title": "ErrorType",
        "type": "string",
        "description": "Enumerates the different types of errors.\nenum:\ninternal\nauth\nbad_input\nnot_found\nalready_exists\nnot_allowed\nconflict\ntype: string",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "Event": {
        "title": "Event",
        "type": "object",
        "properties": {
          "context": {
            "$ref": "#/components/schemas/EventContext"
          },
          "group_created": {
            "$ref": "#/components/schemas/GroupCreated"
          },
          "group_deleted": {
            "$ref": "#/components/schemas/GroupDeleted"
          },
          "id": {
            "type": "string",
            "x-go-name": "Id"
          },
          "note": {
            "$ref": "#/components/schemas/NoteCreated"
          },
          "pr_source_branch_update": {
            "$ref": "#/components/schemas/PrSourceBranchUpdate"
          },
          "pr_status_change": {
            "$ref": "#/components/schemas/PrStatusChange"
          },
          "project_created": {
            "$ref": "#/components/schemas/ProjectCreated"
          },
          "project_deleted": {
            "$ref": "#/components/schemas/ProjectDeleted"
          },
          "repository_branch_created": {
            "$ref": "#/components/schemas/RepositoryBranchCreated"
          },
          "repository_branch_deleted": {
            "$ref": "#/components/schemas/RepositoryBranchDeleted"
          },
          "repository_branch_or_tag_created": {
            "$ref": "#/components/schemas/RepositoryBranchOrTagCreatedDeprecated"
          },
          "repository_branch_or_tag_deleted": {
            "$ref": "#/components/schemas/RepositoryBranchOrTagDeletedDeprecated"
          },
          "repository_created": {
            "$ref": "#/components/schemas/RepositoryCreated"
          },
          "repository_deleted": {
            "$ref": "#/components/schemas/RepositoryDeleted"
          },
          "repository_push": {
            "$ref": "#/components/schemas/RepositoryPush"
          },
          "repository_tag_created": {
            "$ref": "#/components/schemas/RepositoryTagCreated"
          },
          "repository_tag_deleted": {
            "$ref": "#/components/schemas/RepositoryTagDeleted"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Timestamp"
          },
          "type": {
            "$ref": "#/components/schemas/EventType"
          }
        },
        "description": "defines the container for all PPSC events.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto/events"
      },
      "EventContext": {
        "title": "EventContext",
        "type": "object",
        "properties": {
          "slug": {
            "$ref": "#/components/schemas/RepoSlug"
          }
        },
        "description": "defines an event context.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto/events"
      },
      "EventHeader": {
        "title": "EventHeader",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "x-go-name": "Id"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Timestamp"
          },
          "type": {
            "$ref": "#/components/schemas/EventType"
          }
        },
        "description": "defines an event common fields.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto/events"
      },
      "EventType": {
        "title": "EventType",
        "type": "string",
        "description": "defines an event type (the corresponding JSON field is filled based on enum).\npr_status_change: triggers on pull request status change\npr_source_branch_update: triggers on pull request's source branch update\nrepository_push: triggers on push\nrepository_branch_created: triggers on branch created\nrepository_branch_deleted: triggers on branch deleted\nrepository_tag_created: triggers on tag created\nrepository_tag_deleted: triggers on tag deleted\nnote_created: triggered on pull request's issue (note) creation\nproject_created: triggered on project creation\nproject_deleted: triggered on project deletion\ngroup_created: triggered on group creation\ngroup_deleted: triggered on group deletion\nrepository_created: triggered on repository creation\nrepository_deleted: triggered on repository deletion",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto/events"
      },
      "FavoriteProject": {
        "title": "FavoriteProject",
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "Key unique project key.",
            "x-go-name": "Key"
          }
        },
        "description": "Represents the user favorite project.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "FileMatch": {
        "title": "FileMatch",
        "type": "object",
        "properties": {
          "branches": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "Branches"
          },
          "file_name": {
            "type": "string",
            "x-go-name": "FileName"
          },
          "language": {
            "type": "string",
            "x-go-name": "Language"
          },
          "line_matches": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LineMatch"
            },
            "x-go-name": "LineMatches"
          },
          "repo_name": {
            "type": "string",
            "x-go-name": "RepoName"
          }
        },
        "description": "Represents file match model.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "GitRev": {
        "type": "string",
        "description": "GitRev is the git revision (ref, tag name, branch name, commit-ish etc)\nhttps://git-scm.com/docs/gitrevisions",
        "x-go-package": "ppsc/common/domain"
      },
      "GitUser": {
        "title": "GitUser",
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "Email of the user (as in the Git config)",
            "format": "email",
            "x-go-name": "Email"
          },
          "name": {
            "type": "string",
            "description": "Name of the user (as in the Git config)",
            "x-go-name": "Name"
          }
        },
        "description": "Represents a Git author/committer.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "GlobPattern": {
        "title": "GlobPattern represents glob pattern.",
        "type": "string",
        "x-go-package": "ppsc/common/domain"
      },
      "GroupCreated": {
        "type": "object",
        "properties": {
          "requester": {
            "$ref": "#/components/schemas/SimpleUser"
          }
        },
        "description": "GroupCreated\nis emitted on group creation",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto/events"
      },
      "GroupDeleted": {
        "type": "object",
        "properties": {
          "requester": {
            "$ref": "#/components/schemas/SimpleUser"
          }
        },
        "description": "GroupDeleted\nis emitted on group deletion",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto/events"
      },
      "GroupMember": {
        "title": "GroupMember",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Group ID",
            "x-go-name": "ID"
          },
          "is_external": {
            "type": "boolean",
            "description": "External flag (system or local user)",
            "x-go-name": "IsExternal"
          },
          "ldap_key": {
            "type": "string",
            "description": "Ldap Key",
            "x-go-name": "LdapKey"
          },
          "members": {
            "type": "array",
            "description": "List of group members (SimpleUser)",
            "items": {
              "$ref": "#/components/schemas/Assignee"
            },
            "x-go-name": "Members"
          },
          "name": {
            "type": "string",
            "description": "Group Name",
            "x-go-name": "Name"
          }
        },
        "description": "Represents a group member.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "IndexedBranch": {
        "title": "IndexedBranch",
        "type": "object",
        "properties": {
          "is_default": {
            "type": "boolean",
            "description": "IsDefault",
            "x-go-name": "IsDefault"
          },
          "name": {
            "type": "string",
            "description": "Name of a branch",
            "x-go-name": "Name"
          },
          "status": {
            "type": "string",
            "description": "Status is an indexing status",
            "x-go-name": "Status"
          }
        },
        "description": "Represents a repository indexed branch.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "Issue": {
        "title": "Issue",
        "type": "object",
        "properties": {
          "branch": {
            "type": "string",
            "description": "Repo branch name.",
            "x-go-name": "Branch"
          },
          "created_at": {
            "type": "string",
            "description": "Issue created timestamp.",
            "format": "date-time",
            "x-go-name": "CreatedAt"
          },
          "name": {
            "type": "string",
            "description": "Issue name.",
            "x-go-name": "Name"
          },
          "service_task_type": {
            "$ref": "#/components/schemas/ServiceTaskType"
          },
          "updated_at": {
            "type": "string",
            "description": "Issue updated timestamp.",
            "format": "date-time",
            "x-go-name": "UpdatedAt"
          },
          "url": {
            "type": "string",
            "description": "Issue external URL.",
            "x-go-name": "Url"
          }
        },
        "description": "Represents a user issue assigned to a repo's branch.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "Job": {
        "title": "Job",
        "type": "object",
        "properties": {
          "complete_at": {
            "type": "string",
            "description": "Job complete time (set if Status is complete).",
            "format": "date-time",
            "x-go-name": "CompleteAt"
          },
          "created_at": {
            "type": "string",
            "description": "Job creation time.",
            "format": "date-time",
            "x-go-name": "CreatedAt"
          },
          "id": {
            "$ref": "#/components/schemas/JobId"
          },
          "last_error": {
            "type": "string",
            "description": "Last job error if occurred.",
            "x-go-name": "LastError"
          },
          "max_stage": {
            "type": "integer",
            "description": "Total amount of execution stages.",
            "format": "uint64",
            "x-go-name": "MaxStage"
          },
          "stage": {
            "type": "string",
            "description": "Current execution stage name (key defined by Job enum).",
            "x-go-name": "Stage"
          },
          "stage_number": {
            "type": "integer",
            "description": "Current execution stage number (out of Stages).",
            "format": "uint64",
            "x-go-name": "StageNumber"
          },
          "status": {
            "$ref": "#/components/schemas/JobStatus"
          },
          "type": {
            "$ref": "#/components/schemas/JobType"
          },
          "updated_at": {
            "type": "string",
            "description": "Job state update time.",
            "format": "date-time",
            "x-go-name": "UpdatedAt"
          }
        },
        "description": "Represents background job state.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "JobId": {
        "title": "JobId",
        "type": "integer",
        "description": "represent a background job unique id.",
        "format": "int64",
        "x-go-package": "ppsc/common/domain"
      },
      "JobInput": {
        "title": "JobInput",
        "required": [
          "timeout",
          "type"
        ],
        "type": "object",
        "properties": {
          "delay": {
            "type": "string",
            "description": "Job start delay.",
            "format": "duration",
            "example": "10m, 1000s, 4h, 3h12m33s",
            "x-go-name": "Delay"
          },
          "initial_stage": {
            "type": "string",
            "description": "Initial job stage.\ntype: string",
            "x-go-name": "InitialStage"
          },
          "initial_stage_parameters": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            },
            "description": "Initial job stage parameters.\ntype: object",
            "x-go-name": "InitialStageParameters"
          },
          "key": {
            "$ref": "#/components/schemas/JobKey"
          },
          "max_attempts": {
            "type": "integer",
            "description": "Max job retries count.\ntype: integer",
            "format": "int8",
            "x-go-name": "MaxAttempts"
          },
          "parameters": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            },
            "description": "Job parameters.\ntype: object",
            "x-go-name": "Parameters"
          },
          "stages_count": {
            "type": "integer",
            "description": "Job stages count.\ntype: integer",
            "format": "int8",
            "x-go-name": "StagesCount"
          },
          "timeout": {
            "type": "string",
            "description": "Job execution timeout.",
            "format": "duration",
            "example": "10m, 1000s, 4h, 3h12m33s",
            "x-go-name": "Timeout"
          },
          "type": {
            "$ref": "#/components/schemas/JobType"
          }
        },
        "description": "Represents background job run parameters.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "JobKey": {
        "title": "JobKey",
        "type": "string",
        "description": "represents a worker job unique per type key.",
        "x-go-package": "ppsc/common/domain"
      },
      "JobStatus": {
        "title": "JobStatus",
        "type": "string",
        "description": "Represents job execution status.\nin_progress: job is running\nerror: job finished with an error\ncomplete: job successfully finished",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "JobType": {
        "title": "JobType",
        "type": "string",
        "description": "represents a worker job unique type.",
        "x-go-package": "ppsc/common/domain"
      },
      "Label": {
        "title": "Label",
        "required": [
          "is_protected",
          "name",
          "object_id",
          "object_type"
        ],
        "type": "object",
        "properties": {
          "is_protected": {
            "type": "boolean",
            "description": "Protected label",
            "x-go-name": "IsProtected"
          },
          "name": {
            "type": "string",
            "description": "Label name",
            "example": "vtb,innotech,nota",
            "x-go-name": "Name"
          },
          "object_id": {
            "type": "string",
            "description": "Object Id",
            "example": "/",
            "x-go-name": "ObjectID"
          },
          "object_type": {
            "$ref": "#/components/schemas/LabelType"
          }
        },
        "description": "Direct analog of hashtags, the nature of the entity is configured by the object_type field.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "LabelAddInput": {
        "title": "LabelAddInput",
        "required": [
          "is_protected",
          "object_id",
          "object_type"
        ],
        "type": "object",
        "properties": {
          "is_protected": {
            "type": "boolean",
            "description": "Protected label",
            "x-go-name": "IsProtected"
          },
          "object_id": {
            "type": "string",
            "description": "Object Id",
            "example": "/",
            "x-go-name": "ObjectID"
          },
          "object_type": {
            "$ref": "#/components/schemas/LabelType"
          }
        },
        "description": "Add a label.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "LabelDeleteInput": {
        "title": "LabelDeleteInput",
        "required": [
          "object_id",
          "object_type"
        ],
        "type": "object",
        "properties": {
          "object_id": {
            "type": "string",
            "description": "Object Id",
            "example": "/",
            "x-go-name": "ObjectID"
          },
          "object_type": {
            "$ref": "#/components/schemas/LabelType"
          }
        },
        "description": "Delete a label.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "LabelType": {
        "title": "LabelType",
        "type": "string",
        "description": "Types of label objects:\nproject",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "LineBlameInfo": {
        "title": "LineBlameInfo",
        "type": "object",
        "properties": {
          "author": {
            "$ref": "#/components/schemas/CommitPerson"
          },
          "committer": {
            "$ref": "#/components/schemas/CommitPerson"
          },
          "hash": {
            "$ref": "#/components/schemas/Sha1"
          },
          "line_number": {
            "type": "integer",
            "description": "Line number",
            "format": "uint64",
            "x-go-name": "LineNumber"
          },
          "message": {
            "type": "string",
            "description": "Full commit message.",
            "x-go-name": "Message"
          },
          "summary": {
            "type": "string",
            "description": "First line of the commit log message.",
            "x-go-name": "Summary"
          }
        },
        "description": "Represents a repository file line blame info.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "LineFragment": {
        "title": "LineFragment",
        "type": "object",
        "properties": {
          "line_offset": {
            "type": "integer",
            "format": "uint32",
            "x-go-name": "LineOffset"
          },
          "match_length": {
            "type": "integer",
            "format": "uint32",
            "x-go-name": "MatchLength"
          },
          "offset": {
            "type": "integer",
            "format": "uint32",
            "x-go-name": "Offset"
          }
        },
        "description": "Represents line fragment model, which contains match offset and length data in bytes.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "LineMatch": {
        "title": "LineMatch",
        "type": "object",
        "properties": {
          "after": {
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
            "type": "string",
            "format": "byte",
            "x-go-name": "After"
          },
          "before": {
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
            "type": "string",
            "format": "byte",
            "x-go-name": "Before"
          },
          "line": {
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
            "type": "string",
            "format": "byte",
            "x-go-name": "Line"
          },
          "line_end": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "LineEnd"
          },
          "line_fragments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LineFragment"
            },
            "x-go-name": "LineFragments"
          },
          "line_number": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "LineNumber"
          },
          "line_start": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "LineStart"
          }
        },
        "description": "Represents line match model.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "LinkedIssue": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of an issue",
            "x-go-name": "Name"
          },
          "service_task_type": {
            "$ref": "#/components/schemas/ServiceTaskType"
          },
          "url": {
            "type": "string",
            "description": "URL of an issue",
            "x-go-name": "URL"
          }
        },
        "description": "LinkedIssue is a linked issue to a pull request",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "LinkedIssueInput": {
        "required": [
          "name",
          "url"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 128,
            "type": "string",
            "description": "Name of an issue",
            "example": "TASK-001",
            "x-go-name": "Name"
          },
          "url": {
            "maxLength": 512,
            "type": "string",
            "description": "URL of an issue",
            "example": "http://tasks.com/TASK-001",
            "x-go-name": "URL"
          }
        },
        "description": "LinkedIssueInput single linked issue input",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "LinkedIssuesInput": {
        "title": "LinkedIssuesInput",
        "type": "array",
        "description": "Represents a pull request's linked issues input.",
        "items": {
          "$ref": "#/components/schemas/LinkedIssueInput"
        },
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "ListFilesByPatternInput": {
        "title": "ListFilesByPatternInput",
        "type": "array",
        "description": "represents list of domain.GlobPattern",
        "items": {
          "$ref": "#/components/schemas/GlobPattern"
        },
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "ListFilesContentInput": {
        "title": "ListFilesContentInput",
        "type": "array",
        "description": "represents list of file paths",
        "items": {
          "$ref": "#/components/schemas/TreePath"
        },
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "ListPolicyCIBuildInput": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/PolicyCIBuildInput"
        },
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "ListPullRequestActivityOptions": {
        "title": "ListPullRequestActivityOptions",
        "type": "object",
        "properties": {
          "EventGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PullRequestEventGroups"
            }
          },
          "PageCursor": {
            "type": "string"
          },
          "PageLimit": {
            "type": "integer",
            "format": "int64"
          }
        },
        "description": "Represents pull request's activities additional filtering and pagination options.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "ListTreeMetadataInput": {
        "title": "ListTreeMetadataInput",
        "type": "array",
        "description": "represents list of file paths",
        "items": {
          "$ref": "#/components/schemas/TreePath"
        },
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "MergeConflict": {
        "title": "MergeConflict",
        "type": "object",
        "properties": {
          "content": {
            "type": "string",
            "x-go-name": "Content"
          },
          "filename": {
            "type": "string",
            "x-go-name": "FileName"
          }
        },
        "description": "Represents repository pull request merge conflicts information of a single file.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "MergePullRequestInput": {
        "title": "MergePullRequestInput",
        "type": "object",
        "properties": {
          "merge_options": {
            "$ref": "#/components/schemas/MergePullRequestOptions"
          },
          "style": {
            "type": "string",
            "description": "Merge style.\nmerge PullRequestMergeStyleMerge  Non fast-forward merge source into target.\nrebase PullRequestMergeStyleRebase  Rebase a source onto a target and do fast-forward merge.\nfast-forward-only PullRequestMergeStyleFastForward  Fast-forward only merge.\nsquash PullRequestMergeStyleSquash  Squash commits into single commit and do non fast-forward merge.\nrebase-merge PullRequestMergeStyleRebaseMerge  Rebase a source into target and do non fast-forward merge.\nmanually-merged PullRequestMergeStyleManuallyMerged  Pull request has been merged manually, just mark it as merged directly.",
            "enum": [
              "merge",
              "rebase",
              "fast-forward-only",
              "squash",
              "rebase-merge",
              "manually-merged"
            ],
            "x-go-enum-desc": "merge PullRequestMergeStyleMerge  Non fast-forward merge source into target.\nrebase PullRequestMergeStyleRebase  Rebase a source onto a target and do fast-forward merge.\nfast-forward-only PullRequestMergeStyleFastForward  Fast-forward only merge.\nsquash PullRequestMergeStyleSquash  Squash commits into single commit and do non fast-forward merge.\nrebase-merge PullRequestMergeStyleRebaseMerge  Rebase a source into target and do non fast-forward merge.\nmanually-merged PullRequestMergeStyleManuallyMerged  Pull request has been merged manually, just mark it as merged directly.",
            "x-go-name": "Style"
          }
        },
        "description": "Represents repository pull request merge options.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "MergePullRequestOptions": {
        "title": "MergePullRequestOptions",
        "type": "object",
        "properties": {
          "delete_source_branch": {
            "type": "boolean",
            "x-go-name": "DeleteSourceBranch"
          },
          "merge_commit_message": {
            "type": "string",
            "description": "This field required for all merge styles except fast-forward.",
            "x-go-name": "MergeCommitMessage"
          }
        },
        "description": "Represents repository pull request merge options.\nShould be passed only if merge style one of the following: merge, squash, rebase-merge",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "MigrationJobInfo": {
        "title": "MigrationJobInfo",
        "type": "object",
        "properties": {
          "job_id": {
            "$ref": "#/components/schemas/JobId"
          }
        },
        "description": "Represents migration job information.",
        "x-go-package": "ppsc/ppsc-backend/internal/routers/api/v2/swagger"
      },
      "MigrationOptions": {
        "title": "MigrationOptions",
        "required": [
          "clone_addr",
          "comments",
          "lfs",
          "mirror",
          "pull_requests",
          "repository",
          "service",
          "skip_restricted_attachments"
        ],
        "type": "object",
        "properties": {
          "auth_password": {
            "type": "string",
            "description": "Authentication password.",
            "x-go-name": "AuthPassword"
          },
          "auth_token": {
            "type": "string",
            "description": "Authentication oauth2 token if supported by service.",
            "x-go-name": "AuthToken"
          },
          "auth_username": {
            "type": "string",
            "description": "Authentication login.",
            "x-go-name": "AuthUsername"
          },
          "clone_addr": {
            "type": "string",
            "description": "Repository clone address.",
            "x-go-name": "CloneAddr"
          },
          "comments": {
            "type": "boolean",
            "description": "Migrate pull comments.",
            "x-go-name": "Comments"
          },
          "description": {
            "type": "string",
            "description": "Migrated repository description.",
            "x-go-name": "Description"
          },
          "lfs": {
            "type": "boolean",
            "description": "Migrate LFS files (not supported yet).",
            "x-go-name": "LFS"
          },
          "lfs_endpoint": {
            "type": "string",
            "description": "LFS endpoint to use it for repository.",
            "x-go-name": "LFSEndpoint"
          },
          "mirror": {
            "type": "boolean",
            "description": "Migrate repository as mirror.",
            "x-go-name": "Mirror"
          },
          "mirror_interval": {
            "type": "string",
            "description": "Mirror update interval.",
            "format": "duration",
            "example": "10m, 1000s, 4h, 3h12m33s",
            "x-go-name": "MirrorInterval"
          },
          "pull_requests": {
            "type": "boolean",
            "description": "Migrate pull requests.",
            "x-go-name": "PullRequests"
          },
          "repository": {
            "type": "boolean",
            "description": "Migrate repository.",
            "x-go-name": "Repository"
          },
          "service": {
            "type": "string",
            "description": "Migration service.\ngit PlainGitService  Migrate plain git repository\ngithub GithubService  Migrate github repository\ngitea GiteaService  Migrate gitea repository\ngitlab GitlabService  Migrate gitlab repository\ngogs GogsService  Migrate gogs repository\nonedev OneDevService  Migrate onedev repository\ngitbucket GitBucketService  Migrate gitbucket repository\ncodebase CodebaseService  Migrate codebase repository\nbitbucket BitbucketService  Migrate bitbucket repository",
            "enum": [
              "git",
              "github",
              "gitea",
              "gitlab",
              "gogs",
              "onedev",
              "gitbucket",
              "codebase",
              "bitbucket"
            ],
            "x-go-enum-desc": "git PlainGitService  Migrate plain git repository\ngithub GithubService  Migrate github repository\ngitea GiteaService  Migrate gitea repository\ngitlab GitlabService  Migrate gitlab repository\ngogs GogsService  Migrate gogs repository\nonedev OneDevService  Migrate onedev repository\ngitbucket GitBucketService  Migrate gitbucket repository\ncodebase CodebaseService  Migrate codebase repository\nbitbucket BitbucketService  Migrate bitbucket repository",
            "x-go-name": "Service"
          },
          "skip_restricted_attachments": {
            "type": "boolean",
            "description": "Skip attachments doesn't meet server requirements.",
            "x-go-name": "SkipRestrictedAttachments"
          }
        },
        "description": "Defines the way a repository gets migrated.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "MirrorSettings": {
        "title": "MirrorSettings",
        "type": "object",
        "properties": {
          "created_at": {
            "type": "string",
            "description": "Mirror created timestamp.",
            "format": "date-time",
            "x-go-name": "CreatedAt"
          },
          "last_error": {
            "type": "string",
            "description": "The last mirror sync error.",
            "x-go-name": "LastError"
          },
          "last_status": {
            "$ref": "#/components/schemas/MirrorSyncStatus"
          },
          "remote_url": {
            "type": "string",
            "description": "Remote URL used for mirroring.",
            "x-go-name": "RemoteUrl"
          },
          "sync_interval": {
            "type": "string",
            "description": "Mirror sync interval.",
            "format": "duration",
            "example": "10m, 1000s, 4h, 3h12m33s",
            "x-go-name": "SyncInterval"
          },
          "synced_at": {
            "type": "string",
            "description": "The last successful sync timestamp.",
            "format": "date-time",
            "x-go-name": "SyncedAt"
          },
          "type": {
            "$ref": "#/components/schemas/MirrorType"
          },
          "updated_at": {
            "type": "string",
            "description": "Mirror updated timestamp.",
            "format": "date-time",
            "x-go-name": "UpdatedAt"
          }
        },
        "description": "Represents a repository mirror settings and current state.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "MirrorSyncStatus": {
        "title": "MirrorSyncStatus",
        "type": "string",
        "description": "Represents the last repository mirror sync status.\npending: is the initial sync status (applies for non-mirror repos as well)\nsynced: the last sync was successful\nerror: the last sync did fail (mirror_last_error keeps the error occurred)",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "MirrorType": {
        "title": "MirrorType",
        "type": "string",
        "description": "Represents repository mirror type.\npush: push mirror\npull: pull (fetch) mirror",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "MultiMigrationOptions": {
        "title": "MultiMigrationOptions",
        "required": [
          "comments",
          "pull_requests",
          "repository",
          "service"
        ],
        "type": "object",
        "properties": {
          "auth_password": {
            "type": "string",
            "description": "Authentication password.",
            "x-go-name": "AuthPassword"
          },
          "auth_token": {
            "type": "string",
            "description": "Authentication oauth2 token if supported by service.",
            "x-go-name": "AuthToken"
          },
          "auth_username": {
            "type": "string",
            "description": "Authentication login.",
            "x-go-name": "AuthUsername"
          },
          "clone_addr": {
            "type": "array",
            "description": "Repository clone address.",
            "items": {
              "type": "string"
            },
            "x-go-name": "CloneAddr"
          },
          "comments": {
            "type": "boolean",
            "description": "Migrate pull request comments.",
            "x-go-name": "Comments"
          },
          "pull_requests": {
            "type": "boolean",
            "description": "Migrate pull requests.",
            "x-go-name": "PullRequests"
          },
          "repository": {
            "type": "boolean",
            "description": "Migrate repository.",
            "x-go-name": "Repository"
          },
          "server_addr": {
            "type": "string",
            "description": "Repository host address.",
            "x-go-name": "ServerAddr"
          },
          "service": {
            "type": "string",
            "description": "Migration service.\ngit PlainGitService  Migrate plain git repository\ngithub GithubService  Migrate github repository\ngitea GiteaService  Migrate gitea repository\ngitlab GitlabService  Migrate gitlab repository\ngogs GogsService  Migrate gogs repository\nonedev OneDevService  Migrate onedev repository\ngitbucket GitBucketService  Migrate gitbucket repository\ncodebase CodebaseService  Migrate codebase repository\nbitbucket BitbucketService  Migrate bitbucket repository",
            "enum": [
              "git",
              "github",
              "gitea",
              "gitlab",
              "gogs",
              "onedev",
              "gitbucket",
              "codebase",
              "bitbucket"
            ],
            "x-go-enum-desc": "git PlainGitService  Migrate plain git repository\ngithub GithubService  Migrate github repository\ngitea GiteaService  Migrate gitea repository\ngitlab GitlabService  Migrate gitlab repository\ngogs GogsService  Migrate gogs repository\nonedev OneDevService  Migrate onedev repository\ngitbucket GitBucketService  Migrate gitbucket repository\ncodebase CodebaseService  Migrate codebase repository\nbitbucket BitbucketService  Migrate bitbucket repository",
            "x-go-name": "Service"
          }
        },
        "description": "Defines the way a repository gets migrated.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "NoteCreated": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "x-go-name": "Id"
          },
          "pr": {
            "type": "string",
            "x-go-name": "Pr"
          },
          "principalName": {
            "type": "string",
            "x-go-name": "PrincipalName"
          },
          "project": {
            "type": "string",
            "x-go-name": "Project"
          },
          "repository": {
            "type": "string",
            "x-go-name": "Repository"
          },
          "revision": {
            "type": "string",
            "x-go-name": "Revision"
          },
          "severity": {
            "type": "string",
            "x-go-name": "Severity"
          },
          "status": {
            "type": "string",
            "x-go-name": "Status"
          },
          "text": {
            "type": "string",
            "x-go-name": "Text"
          }
        },
        "description": "NoteCreated\nis emitted on issue creation (quality api)",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto/events"
      },
      "NotificationSubscription": {
        "title": "NotificationSubscription",
        "type": "object",
        "properties": {
          "object_id": {
            "type": "string",
            "description": "Object Id",
            "example": "/projects/{projectKey}/repos/{repoName}/pulls/{prId} OR users/{userPrincipalName}",
            "x-go-name": "ObjectID"
          },
          "object_type": {
            "$ref": "#/components/schemas/NotificationType"
          },
          "subscriber": {
            "type": "string",
            "description": "Subscriber's principal name",
            "example": "user@hotfix.com",
            "x-go-name": "Subscriber"
          }
        },
        "description": "Subscription notification info.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "NotificationSubscriptionInfo": {
        "title": "NotificationSubscriptionInfo",
        "type": "object",
        "properties": {
          "is_requester_subscribed": {
            "type": "boolean",
            "description": "IsRequesterSubscribed",
            "example": true,
            "x-go-name": "IsRequesterSubscribed"
          },
          "object_id": {
            "type": "string",
            "description": "Object Id",
            "example": "/projects/{projectKey}/repos/{repoName}/pulls/{prId} OR users/{userPrincipalName}",
            "x-go-name": "ObjectID"
          },
          "object_type": {
            "$ref": "#/components/schemas/NotificationType"
          }
        },
        "description": "Notification subscription info regarding requester.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "NotificationSubscriptionInput": {
        "title": "NotificationSubscriptionInput",
        "required": [
          "object_id",
          "object_type"
        ],
        "type": "object",
        "properties": {
          "object_id": {
            "type": "string",
            "description": "Object Id",
            "example": "/projects/{projectKey}/repos/{repoName}/pulls/{prId} OR users/{userPrincipalName}",
            "x-go-name": "ObjectID"
          },
          "object_type": {
            "$ref": "#/components/schemas/NotificationType"
          }
        },
        "description": "Adding a subscription.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "NotificationType": {
        "title": "NotificationType",
        "type": "string",
        "description": "Types of subscription objects:\npullRequest",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "PolicyCIBuild": {
        "title": "PolicyCIBuild",
        "type": "object",
        "properties": {
          "after_build_start": {
            "type": "boolean",
            "description": "Check whether we need build expiration over time",
            "x-go-name": "AfterBuildStart"
          },
          "branch_update": {
            "type": "boolean",
            "description": "AfterBuildBranchUpdate indicates if branch should be updated before build",
            "x-go-name": "AfterBuildBranchUpdate"
          },
          "build_type": {
            "type": "string",
            "description": "BuildType whether the build is mandatory for merge\nrequired PolicyCIBuildTypeRequired\noptional PolicyCIBuildTypeOptional",
            "enum": [
              "required",
              "optional"
            ],
            "x-go-enum-desc": "required PolicyCIBuildTypeRequired\noptional PolicyCIBuildTypeOptional",
            "x-go-name": "BuildType"
          },
          "created_at": {
            "type": "string",
            "description": "CreatedAt when this build policy was created",
            "format": "date-time",
            "x-go-name": "CreatedAt"
          },
          "expiration_at": {
            "maximum": 750,
            "minimum": 1,
            "type": "integer",
            "description": "Time after which the build should start, value in hours",
            "format": "int64",
            "x-go-name": "ExpirationAt"
          },
          "id": {
            "type": "integer",
            "description": "id unique identifier of the build policy",
            "format": "int64",
            "x-go-name": "Id"
          },
          "instance": {
            "type": "string",
            "description": "instance URL of the CI/CD instance where builds are executed.",
            "x-go-name": "Instance"
          },
          "name": {
            "type": "string",
            "description": "Name for the build configuration.",
            "x-go-name": "Name"
          },
          "policy_id": {
            "type": "integer",
            "description": "policy_id identifier of the parent policy.",
            "format": "int64",
            "x-go-name": "PolicyId"
          },
          "project": {
            "type": "string",
            "description": "project ci/cd name configuration file",
            "x-go-name": "Project"
          },
          "project_area": {
            "type": "string",
            "description": "ProjectArea folder path where project is located",
            "x-go-name": "ProjectArea"
          },
          "project_id": {
            "type": "string",
            "description": "project_id ci/cd project uuid",
            "x-go-name": "ProjectId"
          },
          "repo_id": {
            "type": "integer",
            "description": "repo_id identifier of the repository this policy belongs to",
            "format": "int64",
            "x-go-name": "RepoId"
          },
          "updated_at": {
            "type": "string",
            "description": "UpdatedAt Last time this build policy was modified",
            "format": "date-time",
            "x-go-name": "UpdatedAt"
          }
        },
        "description": "Represents build policy settings for repository pull requests.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "PolicyCIBuildInput": {
        "title": "PolicyCIBuildInput",
        "type": "object",
        "properties": {
          "after_build_branch_update": {
            "type": "boolean",
            "description": "Indicates if branch should be updated before build",
            "x-go-name": "AfterBuildBranchUpdate"
          },
          "after_build_start": {
            "type": "boolean",
            "description": "Check whether we need build expiration over time",
            "x-go-name": "AfterBuildStart"
          },
          "build_type": {
            "type": "string",
            "description": "Whether the build is mandatory for merge\nrequired PolicyCIBuildTypeRequired\noptional PolicyCIBuildTypeOptional",
            "enum": [
              "required",
              "optional"
            ],
            "x-go-enum-desc": "required PolicyCIBuildTypeRequired\noptional PolicyCIBuildTypeOptional",
            "x-go-name": "BuildType"
          },
          "expiration_at": {
            "maximum": 750,
            "minimum": 1,
            "type": "integer",
            "description": "Time after which the build should start, value in hours",
            "format": "int64",
            "x-go-name": "ExpirationAt"
          },
          "id": {
            "type": "integer",
            "description": "Id setting build",
            "format": "int64",
            "example": 7,
            "x-go-name": "Id"
          },
          "instance": {
            "type": "string",
            "description": "address ci/cd instance",
            "example": "https://sfera-t1.com/instance",
            "x-go-name": "Instance"
          },
          "name": {
            "type": "string",
            "description": "Name pull request ci/cd build name",
            "example": "new build",
            "x-go-name": "Name"
          },
          "project": {
            "type": "string",
            "description": "Project ci/cd name configuration file",
            "example": "ppsc-backend/docs/config.yaml",
            "x-go-name": "Project"
          },
          "project_area": {
            "type": "string",
            "description": "Area in ci/cd system folder path",
            "example": "PPSC/ppsc-backend",
            "x-go-name": "ProjectArea"
          },
          "project_id": {
            "type": "string",
            "description": "ci/cd project uuid",
            "example": "ac3ff5fe-aab6-42dd-b845-36a5fc84655c",
            "x-go-name": "ProjectId"
          }
        },
        "description": "Represents build policy settings for repository pull requests.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "PolicyCIBuildUpdateInput": {
        "title": "PolicyCIBuildUpdateInput",
        "type": "object",
        "properties": {
          "after_build_branch_update": {
            "type": "boolean",
            "description": "Indicates if branch should be updated before build",
            "x-go-name": "AfterBuildBranchUpdate"
          },
          "after_build_start": {
            "type": "boolean",
            "description": "Check whether we need build expiration over time",
            "x-go-name": "AfterBuildStart"
          },
          "build_type": {
            "type": "string",
            "description": "Whether the build is mandatory for merge\ndefalut: required\nrequired PolicyCIBuildTypeRequired\noptional PolicyCIBuildTypeOptional",
            "example": "required",
            "enum": [
              "required",
              "optional"
            ],
            "x-go-enum-desc": "required PolicyCIBuildTypeRequired\noptional PolicyCIBuildTypeOptional",
            "x-go-name": "BuildType"
          },
          "expiration_at": {
            "maximum": 750,
            "minimum": 1,
            "type": "integer",
            "description": "Time after which the build should start, value in hours",
            "format": "int64",
            "x-go-name": "ExpirationAt"
          },
          "id": {
            "type": "integer",
            "description": "Id setting build",
            "format": "int64",
            "example": 7,
            "x-go-name": "Id"
          },
          "instance": {
            "type": "string",
            "description": "address ci/cd instance",
            "example": "https://sfera-t1.com/instance",
            "x-go-name": "Instance"
          },
          "name": {
            "type": "string",
            "description": "Name pull request ci/cd build name.",
            "example": "new build",
            "x-go-name": "Name"
          },
          "project": {
            "type": "string",
            "description": "Project ci/cd name configuration file",
            "example": "ppsc-backend/docs/config.yaml",
            "x-go-name": "Project"
          },
          "project_area": {
            "type": "string",
            "description": "Area in ci/cd system folder path",
            "example": "PPSC/ppsc-backend",
            "x-go-name": "ProjectArea"
          },
          "project_id": {
            "type": "string",
            "description": "ci/cd project uuid",
            "example": "ac3ff5fe-aab6-42dd-b845-36a5fc84655c",
            "x-go-name": "ProjectId"
          }
        },
        "description": "Represents a repository pull request settings update options.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "PolicyModes": {
        "title": "PolicyModes",
        "type": "object",
        "properties": {
          "allow_authors_to_approve_their_pull_requests": {
            "$ref": "#/components/schemas/RepoPolicyMode"
          },
          "code_quality_scan_mode": {
            "$ref": "#/components/schemas/RepoPolicyMode"
          },
          "create_pr_hook_message_mode": {
            "$ref": "#/components/schemas/RepoPolicyMode"
          },
          "delete_source_branch_after_merge_by_default_mode": {
            "$ref": "#/components/schemas/RepoPolicyMode"
          },
          "merge_branch_source_up_to_date_mode": {
            "$ref": "#/components/schemas/RepoPolicyMode"
          },
          "merge_types_fast_forward_mode": {
            "$ref": "#/components/schemas/RepoPolicyMode"
          },
          "merge_types_merge_commit_mode": {
            "$ref": "#/components/schemas/RepoPolicyMode"
          },
          "merge_types_squash_mode": {
            "$ref": "#/components/schemas/RepoPolicyMode"
          },
          "merging_for_unassigned_changed_files_mode": {
            "$ref": "#/components/schemas/RepoPolicyMode"
          },
          "merging_without_linked_issues_mode": {
            "$ref": "#/components/schemas/RepoPolicyMode"
          }
        },
        "description": "Represents policy modes structure.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "PolicyReviewerGroup": {
        "title": "PolicyReviewerGroup",
        "type": "object",
        "properties": {
          "group": {
            "$ref": "#/components/schemas/GroupMember"
          },
          "id": {
            "type": "integer",
            "description": "ID reviewer group id",
            "format": "int64",
            "x-go-name": "ID"
          },
          "is_removable": {
            "type": "boolean",
            "description": "Whether this group can be removed",
            "x-go-name": "IsRemovable"
          },
          "is_required": {
            "type": "boolean",
            "description": "Required flag",
            "x-go-name": "IsRequired"
          },
          "member": {
            "$ref": "#/components/schemas/Assignee"
          },
          "number_of_approvals": {
            "type": "integer",
            "description": "Number or required approvals",
            "format": "int64",
            "x-go-name": "NumberOfApprovals"
          },
          "specify_reviewers": {
            "type": "boolean",
            "description": "Specify reviewers flag",
            "x-go-name": "SpecifyReviewers"
          }
        },
        "description": "Represents policy reviewer group.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "PolicyReviewerGroupInput": {
        "title": "PolicyReviewerGroupInput",
        "type": "object",
        "properties": {
          "group": {
            "$ref": "#/components/schemas/GroupMember"
          },
          "id": {
            "type": "integer",
            "description": "ID reviewer group id",
            "format": "int64",
            "x-go-name": "ID"
          },
          "is_required": {
            "type": "boolean",
            "description": "Required flag",
            "x-go-name": "IsRequired"
          },
          "member": {
            "$ref": "#/components/schemas/Assignee"
          },
          "number_of_approvals": {
            "type": "integer",
            "description": "Number or required approvals",
            "format": "int64",
            "x-go-name": "NumberOfApprovals"
          },
          "specify_reviewers": {
            "type": "boolean",
            "description": "Specify reviewers flag",
            "x-go-name": "SpecifyReviewers"
          }
        },
        "description": "Represents policy reviewer group input.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "PrSettings": {
        "title": "PrSettings",
        "type": "object",
        "properties": {
          "allow_auto_merge": {
            "type": "boolean",
            "description": "Indicates whether auto merge is allowed for the PR.",
            "x-go-name": "AllowAutoMerge"
          },
          "allow_merge_types_fast_forward": {
            "type": "boolean",
            "description": "Indicates whether fast-forward is allowed as a merge type.",
            "x-go-name": "AllowMergeTypesFastForward"
          },
          "allow_merge_types_merge_commit": {
            "type": "boolean",
            "description": "Indicates whether merge commit is allowed as a merge type.",
            "x-go-name": "AllowMergeTypesMergeCommit"
          },
          "allow_merge_types_squash": {
            "type": "boolean",
            "description": "Indicated where squash is allowed as a merge type.",
            "x-go-name": "AllowMergeTypesSquash"
          },
          "approvals_min": {
            "type": "integer",
            "description": "Minimum number of assignee approvals needed to merge a PR.",
            "format": "uint64",
            "x-go-name": "ApprovalsMin"
          },
          "block_merging_for_unassigned_changed_files": {
            "type": "boolean",
            "description": "Indicates whether pull request merging should be blocked according to unassigned changed files.",
            "x-go-name": "BlockMergingForUnassignedChangedFiles"
          },
          "block_merging_without_linked_issues": {
            "type": "boolean",
            "description": "Indicates whether pull request merging should be blocked according to no linked issues.",
            "x-go-name": "BlockMergingWithoutLinkedIssues"
          },
          "code_quality_scan": {
            "type": "boolean",
            "description": "Defines the necessity of a successful code quality scan to merge a PR.\nIf False, code quality scan doesn't block the merge.",
            "x-go-name": "CodeQualityScan"
          },
          "create_pr_hook_message": {
            "type": "boolean",
            "description": "If set, the Git CLI displays a web link to create a new PR when a new branch is pushed.",
            "x-go-name": "CreatePrHookMessage"
          },
          "default_assignees": {
            "type": "array",
            "description": "List of default assignee principal names to set for each new PR created.",
            "items": {
              "$ref": "#/components/schemas/SimpleUser"
            },
            "x-go-name": "DefaultAssignees"
          },
          "delete_source_branch_after_merge_by_default": {
            "type": "boolean",
            "description": "Indicates whether the source branch should be deleted after merge by default.",
            "x-go-name": "DeleteSourceBranchAfterMergeByDefault"
          },
          "merge_branch_source_up_to_date": {
            "type": "boolean",
            "description": "Indicates whether pull request merging should be blocked according to merge branch source is not up to date.\nIf False, merge branch source that is not up to date doesn't block the merge.",
            "x-go-name": "MergeBranchSourceUpToDate"
          },
          "rejects_max": {
            "type": "integer",
            "description": "Maximum number of assignee rejects that is acceptable to merge a PR.",
            "format": "uint64",
            "x-go-name": "RejectsMax"
          },
          "updated_at": {
            "type": "string",
            "description": "Settings updated timestamp.",
            "format": "date-time",
            "x-go-name": "UpdatedAt"
          }
        },
        "description": "Represents a repository pull request settings.\n\n# DEPRECATED",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "PrSourceBranchUpdate": {
        "title": "PrSourceBranchUpdate",
        "type": "object",
        "properties": {
          "commit": {
            "$ref": "#/components/schemas/RepoCommit"
          },
          "pr": {
            "$ref": "#/components/schemas/PullRequest"
          },
          "source_issue": {
            "$ref": "#/components/schemas/Issue"
          },
          "target_commit": {
            "$ref": "#/components/schemas/RepoCommit"
          },
          "target_issue": {
            "$ref": "#/components/schemas/Issue"
          }
        },
        "description": "is emitted on branch related to a PR as the source push.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto/events"
      },
      "PrStatusChange": {
        "title": "PrStatusChange",
        "type": "object",
        "properties": {
          "commit": {
            "$ref": "#/components/schemas/RepoCommit"
          },
          "is_first_creation": {
            "type": "boolean",
            "x-go-name": "IsFirstCreation"
          },
          "pr": {
            "$ref": "#/components/schemas/PullRequest"
          },
          "source_commit": {
            "$ref": "#/components/schemas/RepoCommit"
          },
          "source_issue": {
            "$ref": "#/components/schemas/Issue"
          },
          "target_commit": {
            "$ref": "#/components/schemas/RepoCommit"
          },
          "target_issue": {
            "$ref": "#/components/schemas/Issue"
          }
        },
        "description": "is emitted on PR status change (or merge status change).",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto/events"
      },
      "Project": {
        "title": "Project",
        "type": "object",
        "properties": {
          "created_at": {
            "type": "string",
            "description": "Repo created timestamp.",
            "format": "date-time",
            "x-go-name": "CreatedAt"
          },
          "description": {
            "type": "string",
            "description": "Description set by the user.",
            "x-go-name": "Description"
          },
          "full_name": {
            "type": "string",
            "description": "Name.",
            "example": "My awesome project",
            "x-go-name": "Name"
          },
          "groups": {
            "type": "array",
            "description": "SubProjects list of project groups or group subgroups",
            "items": {
              "$ref": "#/components/schemas/Project"
            },
            "x-go-name": "SubProjects"
          },
          "id": {
            "type": "integer",
            "description": "ID project's identifier",
            "format": "int64",
            "x-go-name": "ID"
          },
          "is_favorite": {
            "type": "boolean",
            "description": "IsFavorite favorite project flag",
            "example": true,
            "x-go-name": "IsFavorite"
          },
          "is_public": {
            "type": "boolean",
            "description": "IsPublic project public visibility flag.",
            "example": true,
            "x-go-name": "IsPublic"
          },
          "lfs_allow": {
            "type": "boolean",
            "description": "LFSAllow project support lfs.",
            "example": true,
            "x-go-name": "LFSAllow"
          },
          "name": {
            "type": "string",
            "description": "Unique project key.",
            "example": "awesomeProject",
            "x-go-name": "Key"
          },
          "parent_id": {
            "type": "integer",
            "description": "ParentID is a group characteristic, which belongs it to a specified group or project identifier",
            "format": "int64",
            "x-go-name": "ParentID"
          },
          "permissions": {
            "$ref": "#/components/schemas/ProjectPermissions"
          },
          "updated_at": {
            "type": "string",
            "description": "Repo updated timestamp.",
            "format": "date-time",
            "x-go-name": "UpdatedAt"
          }
        },
        "description": "Represents the project.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "ProjectCreated": {
        "type": "object",
        "properties": {
          "requester": {
            "$ref": "#/components/schemas/SimpleUser"
          }
        },
        "description": "ProjectCreated\nis emitted on project creation",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto/events"
      },
      "ProjectDeleted": {
        "type": "object",
        "properties": {
          "requester": {
            "$ref": "#/components/schemas/SimpleUser"
          }
        },
        "description": "ProjectDeleted\nis emitted on project deletion",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto/events"
      },
      "ProjectPermissions": {
        "title": "ProjectPermissions",
        "type": "object",
        "properties": {
          "can_create_repository": {
            "type": "boolean",
            "description": "CanCreateRepository defines access to create repositories.",
            "x-go-name": "CanCreateRepository"
          },
          "can_edit_advanced": {
            "type": "boolean",
            "description": "CanEditAdvanced defines access to delete project.",
            "x-go-name": "CanEditAdvanced"
          },
          "can_edit_advanced_quality_gate": {
            "type": "boolean",
            "description": "CanEditAdvancedQualityGate defines access to delete quality gates and to edit plugins.",
            "x-go-name": "CanEditAdvancedQualityGate"
          },
          "can_edit_advanced_quality_plugin": {
            "type": "boolean",
            "description": "CanEditAdvancedQualityPlugin defines access to activate, deactivate or delete plugin.",
            "x-go-name": "CanEditAdvancedQualityPlugin"
          },
          "can_edit_advanced_settings": {
            "type": "boolean",
            "description": "CanEditAdvancedSettings defines access to edit project visibility setting.",
            "x-go-name": "CanEditAdvancedSettings"
          },
          "can_edit_quality_gate": {
            "type": "boolean",
            "description": "CanEditQualityGate defines access to edit quality gates.",
            "x-go-name": "CanEditQualityGate"
          },
          "can_edit_quality_plugin": {
            "type": "boolean",
            "description": "CanEditQualityPlugin defines access to edit plugin general settings, activate/deactivate plugin rules, etc.",
            "x-go-name": "CanEditQualityPlugin"
          },
          "can_edit_roles": {
            "type": "boolean",
            "description": "CanEditRoles defines access to assign roles, actions.",
            "x-go-name": "CanEditRoles"
          },
          "can_edit_settings": {
            "type": "boolean",
            "description": "CanEditSettings defines access to edit settings.",
            "x-go-name": "CanEditSettings"
          },
          "can_edit_teams": {
            "type": "boolean",
            "description": "CanEditTeams defines access to edit teams.",
            "x-go-name": "CanEditTeams"
          },
          "can_import_repository": {
            "type": "boolean",
            "description": "CanImportRepository defines access to import repositories.",
            "x-go-name": "CanImportRepository"
          },
          "can_view_quality_gate": {
            "type": "boolean",
            "description": "CanViewQualityGate defines access to view quality gates.",
            "x-go-name": "CanViewQualityGate"
          },
          "can_view_quality_plugin": {
            "type": "boolean",
            "description": "CanViewQualityPlugin defines access to view plugins and plugin's rules.",
            "x-go-name": "CanViewQualityPlugin"
          },
          "can_view_roles": {
            "type": "boolean",
            "description": "CanViewRoles defines access to view roles, actions.",
            "x-go-name": "CanViewRoles"
          },
          "can_view_settings": {
            "type": "boolean",
            "description": "CanViewSettings defines access to view settings.",
            "x-go-name": "CanViewSettings"
          },
          "can_view_teams": {
            "type": "boolean",
            "description": "CanViewTeams defines access to view teams.",
            "x-go-name": "CanViewTeams"
          }
        },
        "description": "Represents user permissions in project.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "ProjectUsageQuotasSettings": {
        "title": "ProjectUsageQuotasSettings",
        "type": "object",
        "properties": {
          "enable_file_storage_policy_limit": {
            "type": "boolean",
            "description": "Enable soft and hard file usage quotas limit setting.",
            "x-go-name": "EnableFileStoragePolicyLimit"
          },
          "enable_repo_storage_policy_limit": {
            "type": "boolean",
            "description": "Enable soft and hard repository usage quotas limit setting.",
            "x-go-name": "EnableRepoStoragePolicyLimit"
          },
          "file_storage_policy_hard_limit": {
            "type": "integer",
            "description": "Hard limit file usage quotas setting.",
            "format": "uint64",
            "x-go-name": "FileStoragePolicyHardLimit"
          },
          "file_storage_policy_soft_limit": {
            "type": "integer",
            "description": "Soft limit file usage quotas setting.",
            "format": "uint64",
            "x-go-name": "FileStoragePolicySoftLimit"
          },
          "repo_storage_policy_hard_limit": {
            "type": "integer",
            "description": "Hard limit repository usage quotas setting.",
            "format": "uint64",
            "x-go-name": "RepoStoragePolicyHardLimit"
          },
          "repo_storage_policy_soft_limit": {
            "type": "integer",
            "description": "Soft limit repository usage quotas setting.",
            "format": "uint64",
            "x-go-name": "RepoStoragePolicySoftLimit"
          },
          "updated_at": {
            "type": "string",
            "description": "Settings updated timestamp.",
            "format": "date-time",
            "x-go-name": "UpdatedAt"
          }
        },
        "description": "Project usage quotas settings.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "ProtectedBranch": {
        "title": "ProtectedBranch",
        "type": "object",
        "properties": {
          "created_at": {
            "type": "string",
            "description": "Creation time.",
            "format": "date-time",
            "example": "2023-05-03T00:00:00+03:00",
            "x-go-name": "CreatedAt"
          },
          "is_active": {
            "type": "boolean",
            "description": "Protection active/inactive flag.",
            "example": true,
            "x-go-name": "IsActive"
          },
          "is_default": {
            "type": "boolean",
            "description": "Default branch flag.",
            "example": false,
            "x-go-name": "IsDefault"
          },
          "mask": {
            "$ref": "#/components/schemas/GlobPattern"
          },
          "updated_at": {
            "type": "string",
            "description": "Last update time.",
            "format": "date-time",
            "example": "2023-05-03T00:00:00+03:00",
            "x-go-name": "UpdatedAt"
          }
        },
        "description": "Represents repository protected branch.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "ProtectedBranchInput": {
        "title": "ProtectedBranchInput",
        "required": [
          "is_active",
          "mask"
        ],
        "type": "object",
        "properties": {
          "is_active": {
            "type": "boolean",
            "description": "Protection active/inactive flag.",
            "example": true,
            "x-go-name": "IsActive"
          },
          "mask": {
            "$ref": "#/components/schemas/GlobPattern"
          }
        },
        "description": "Represents repository protected branch input.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "ProtectedBranchesSettings": {
        "title": "ProtectedBranchesSettings",
        "type": "array",
        "description": "Represents repository protected branches settings.",
        "items": {
          "$ref": "#/components/schemas/ProtectedBranch"
        },
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "PullRequest": {
        "title": "PullRequest",
        "type": "object",
        "properties": {
          "assignees": {
            "type": "array",
            "description": "Pull request reviewers.",
            "items": {
              "$ref": "#/components/schemas/Assignee"
            },
            "x-go-name": "Assignees"
          },
          "author": {
            "$ref": "#/components/schemas/SimpleUser"
          },
          "closed": {
            "type": "boolean",
            "description": "Is pull request was closed.",
            "x-go-name": "Closed"
          },
          "closed_at": {
            "type": "string",
            "description": "Pull request close time if closed",
            "format": "date-time",
            "x-go-name": "ClosedAt"
          },
          "conflicts": {
            "type": "array",
            "description": "List of pull request files - keep it for backward compatability",
            "items": {
              "type": "string"
            },
            "x-go-name": "Conflicts"
          },
          "created_at": {
            "type": "string",
            "description": "Pull request creation time",
            "format": "date-time",
            "x-go-name": "CreatedAt"
          },
          "description": {
            "type": "string",
            "description": "Pull request description",
            "example": "Let me introduce so marvelous changes.",
            "x-go-name": "Description"
          },
          "group_assignees": {
            "type": "array",
            "description": "Reviewer groups",
            "items": {
              "$ref": "#/components/schemas/ReviewerGroupAssignees"
            },
            "x-go-name": "GroupAssignees"
          },
          "id": {
            "$ref": "#/components/schemas/PullRequestId"
          },
          "linked_issues": {
            "type": "array",
            "description": "Linked issues",
            "items": {
              "$ref": "#/components/schemas/LinkedIssue"
            },
            "x-go-name": "LinkedIssues"
          },
          "merge_base": {
            "$ref": "#/components/schemas/Sha1"
          },
          "merge_branch_head": {
            "$ref": "#/components/schemas/Sha1"
          },
          "merge_branch_source_head": {
            "$ref": "#/components/schemas/Sha1"
          },
          "merge_branch_target_head": {
            "$ref": "#/components/schemas/Sha1"
          },
          "merge_status": {
            "type": "string",
            "description": "Pull request merge status\nconflict PullRequestMergeStatusConflict  Pull request has conflicted changes.\nempty PullRequestMergeStatusEmpty  Pull request's resulting patch is empty.\nready PullRequestMergeStatusReady  Pull request is ready for merge.\nchecking PullRequestMergeStatusChecking  Pull request status checking is in progress.\nerror PullRequestMergeStatusError  Pull request is in an erroneous state.\nmerging PullRequestMergeStatusMerging  Pull request merge is in progress.\nmerged PullRequestMergeStatusMerged  Pull request has been merged via the API.\nmanually_merged PullRequestMergeStatusManuallyMerged  Pull request has been merged manually through the git CLI.",
            "enum": [
              "conflict",
              "empty",
              "ready",
              "checking",
              "error",
              "merging",
              "merged",
              "manually_merged"
            ],
            "x-go-enum-desc": "conflict PullRequestMergeStatusConflict  Pull request has conflicted changes.\nempty PullRequestMergeStatusEmpty  Pull request's resulting patch is empty.\nready PullRequestMergeStatusReady  Pull request is ready for merge.\nchecking PullRequestMergeStatusChecking  Pull request status checking is in progress.\nerror PullRequestMergeStatusError  Pull request is in an erroneous state.\nmerging PullRequestMergeStatusMerging  Pull request merge is in progress.\nmerged PullRequestMergeStatusMerged  Pull request has been merged via the API.\nmanually_merged PullRequestMergeStatusManuallyMerged  Pull request has been merged manually through the git CLI.",
            "x-go-name": "MergeStatus"
          },
          "merged_at": {
            "type": "string",
            "description": "Pull request merge time if merged",
            "format": "date-time",
            "x-go-name": "MergedAt"
          },
          "permissions": {
            "$ref": "#/components/schemas/PullRequestPermissions"
          },
          "policy_modes": {
            "$ref": "#/components/schemas/PolicyModes"
          },
          "policy_reviewer_groups": {
            "type": "array",
            "description": "Policy reviewer groups",
            "items": {
              "$ref": "#/components/schemas/PolicyReviewerGroup"
            },
            "x-go-name": "PolicyReviewerGroups"
          },
          "source_branch": {
            "type": "string",
            "description": "Branch name of the pull request source (source is merged to the target).",
            "x-go-name": "SourceBranch"
          },
          "source_branch_delete_status": {
            "$ref": "#/components/schemas/SourceBranchDeleteStatus"
          },
          "source_head": {
            "$ref": "#/components/schemas/Sha1"
          },
          "source_slug": {
            "$ref": "#/components/schemas/RepoSlug"
          },
          "status": {
            "$ref": "#/components/schemas/PullRequestStatus"
          },
          "target_branch": {
            "type": "string",
            "description": "Branch name of the pull request target (source is merged to the target).",
            "x-go-name": "TargetBranch"
          },
          "target_head": {
            "$ref": "#/components/schemas/Sha1"
          },
          "title": {
            "type": "string",
            "description": "Pull request title",
            "example": "My gorgeous pull request.",
            "x-go-name": "Title"
          },
          "untracked_files": {
            "type": "array",
            "description": "Untracked files",
            "items": {
              "type": "string"
            },
            "x-go-name": "UntrackedFiles"
          },
          "updated_at": {
            "type": "string",
            "description": "Pull request last update time",
            "format": "date-time",
            "x-go-name": "UpdatedAt"
          }
        },
        "description": "Represents repository pull request information.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "PullRequestActivity": {
        "title": "PullRequestActivity represents an activity record of the pull request with.",
        "type": "object",
        "properties": {
          "assignees": {
            "type": "array",
            "description": "List of users targeted by the event in the assignment context (e.g. 'reviewers assigned'). Displayed for the 'reviewers' event group.",
            "items": {
              "$ref": "#/components/schemas/SimpleUser"
            },
            "x-go-name": "Assignees"
          },
          "ci_build": {
            "$ref": "#/components/schemas/PullRequestActivityCiBuild"
          },
          "commits_added": {
            "type": "array",
            "description": "List of commit hashes added during the event. Displayed for the 'commits' event group.",
            "items": {
              "$ref": "#/components/schemas/PullRequestActivityCommit"
            },
            "x-go-name": "CommitsAdded"
          },
          "commits_added_count": {
            "type": "integer",
            "description": "Added commits count. Displayed for the 'commits' event group.",
            "format": "int32",
            "x-go-name": "CommitsAddedCount"
          },
          "commits_deleted": {
            "type": "array",
            "description": "List of commit hashes deleted during the event. Displayed for the 'commits' event group.",
            "items": {
              "$ref": "#/components/schemas/PullRequestActivityCommit"
            },
            "x-go-name": "CommitsDeleted"
          },
          "commits_deleted_count": {
            "type": "integer",
            "description": "Deleted commits count. Displayed for the 'commits' event group.",
            "format": "int32",
            "x-go-name": "CommitsDeletedCount"
          },
          "event_type": {
            "$ref": "#/components/schemas/PullRequestActivityEventType"
          },
          "issue_id": {
            "type": "string",
            "description": "Source code issue identifier. Displayed for the 'issues' event group.",
            "x-go-name": "IssueId"
          },
          "logged_at": {
            "type": "string",
            "description": "Activity time.",
            "format": "date-time",
            "x-go-name": "LoggedAt"
          },
          "push_number": {
            "type": "integer",
            "description": "Push number in pull request.",
            "format": "int32",
            "x-go-name": "PushNumber"
          },
          "user_acted": {
            "$ref": "#/components/schemas/SimpleUser"
          }
        },
        "description": "Every event type has its own set of the corresponding data to be presented.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "PullRequestActivityCiBuild": {
        "title": "PullRequestActivityCiBuild contains CI build data to display for build related events.",
        "type": "object",
        "properties": {
          "build_project_name": {
            "type": "string",
            "description": "CI project display name.",
            "x-go-name": "BuildProjectName"
          },
          "build_url": {
            "type": "string",
            "description": "CI build URL.",
            "x-go-name": "BuildUrl"
          },
          "display_name": {
            "type": "string",
            "description": "CI build display name.",
            "x-go-name": "DisplayName"
          },
          "status": {
            "$ref": "#/components/schemas/CIBuildStatus"
          }
        },
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "PullRequestActivityCommit": {
        "title": "PullRequestActivityCommit contains commit data to display for commit related events.",
        "type": "object",
        "properties": {
          "author_name": {
            "type": "string",
            "description": "Commit author name.",
            "x-go-name": "AuthorName"
          },
          "commited_at": {
            "type": "string",
            "description": "Time when the commit was done locally.",
            "format": "date-time",
            "x-go-name": "CommitedAt"
          },
          "hash": {
            "type": "string",
            "description": "Commit hash.",
            "x-go-name": "Hash"
          },
          "message": {
            "type": "string",
            "description": "Commit message text. Truncated if the size exceeds hard coded limit.",
            "x-go-name": "Message"
          }
        },
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "PullRequestActivityEventType": {
        "title": "PullRequestActivityEventType represents specific activity events.",
        "type": "string",
        "description": "See the 'entity.PullRequestActivityEventType' for details.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "PullRequestAuthors": {
        "title": "PullRequestAuthors",
        "type": "object",
        "properties": {
          "users": {
            "type": "array",
            "description": "Users have self user will always be in first place, if available.",
            "items": {
              "$ref": "#/components/schemas/SimpleUser"
            },
            "x-go-name": "Users"
          }
        },
        "description": "Represents repository pull request authors information.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "PullRequestAutoMerge": {
        "title": "PullRequestAutoMerge",
        "type": "object",
        "properties": {
          "author": {
            "$ref": "#/components/schemas/SimpleUser"
          },
          "commit_message": {
            "type": "string",
            "description": "Merge commit message",
            "x-go-name": "CommitMessage"
          },
          "completed_at": {
            "type": "string",
            "description": "CompletedAt represents the timestamp when the pull request auto merge was completed.",
            "format": "date-time",
            "x-go-name": "CompletedAt"
          },
          "created_at": {
            "type": "string",
            "description": "CreatedAt represents the timestamp when the pull request auto merge was created.",
            "format": "date-time",
            "x-go-name": "CreatedAt"
          },
          "delete_source_branch": {
            "type": "boolean",
            "description": "Delete source branch option for merged pull request",
            "x-go-name": "DeleteSourceBranch"
          },
          "error_message": {
            "type": "string",
            "description": "Auto merge error message",
            "x-go-name": "ErrorMessage"
          },
          "is_on": {
            "type": "boolean",
            "description": "On/Off flag",
            "x-go-name": "IsOn"
          },
          "merge_commit": {
            "$ref": "#/components/schemas/Sha1"
          },
          "merge_style": {
            "type": "string",
            "description": "Pull request merge style\nmerge PullRequestMergeStyleMerge  Non fast-forward merge source into target.\nrebase PullRequestMergeStyleRebase  Rebase a source onto a target and do fast-forward merge.\nfast-forward-only PullRequestMergeStyleFastForward  Fast-forward only merge.\nsquash PullRequestMergeStyleSquash  Squash commits into single commit and do non fast-forward merge.\nrebase-merge PullRequestMergeStyleRebaseMerge  Rebase a source into target and do non fast-forward merge.\nmanually-merged PullRequestMergeStyleManuallyMerged  Pull request has been merged manually, just mark it as merged directly.",
            "enum": [
              "merge",
              "rebase",
              "fast-forward-only",
              "squash",
              "rebase-merge",
              "manually-merged"
            ],
            "x-go-enum-desc": "merge PullRequestMergeStyleMerge  Non fast-forward merge source into target.\nrebase PullRequestMergeStyleRebase  Rebase a source onto a target and do fast-forward merge.\nfast-forward-only PullRequestMergeStyleFastForward  Fast-forward only merge.\nsquash PullRequestMergeStyleSquash  Squash commits into single commit and do non fast-forward merge.\nrebase-merge PullRequestMergeStyleRebaseMerge  Rebase a source into target and do non fast-forward merge.\nmanually-merged PullRequestMergeStyleManuallyMerged  Pull request has been merged manually, just mark it as merged directly.",
            "x-go-name": "MergeStyle"
          },
          "pr_id": {
            "$ref": "#/components/schemas/PullRequestId"
          },
          "status": {
            "$ref": "#/components/schemas/AutoMergeStatus"
          },
          "updated_at": {
            "type": "string",
            "description": "UpdatedAt represents the timestamp when the pull request auto merge was last updated.",
            "format": "date-time",
            "x-go-name": "UpdatedAt"
          }
        },
        "description": "Represents auto merge pull request information.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "PullRequestCounters": {
        "title": "PullRequestCounters",
        "type": "object",
        "properties": {
          "all": {
            "type": "integer",
            "description": "Count of all pull requests.",
            "format": "uint64",
            "example": 5,
            "x-go-name": "All"
          },
          "merged": {
            "type": "integer",
            "description": "Count of merged pull requests.",
            "format": "uint64",
            "example": 1,
            "x-go-name": "Merged"
          },
          "open": {
            "type": "integer",
            "description": "Count of opened pull requests.",
            "format": "uint64",
            "example": 2,
            "x-go-name": "Open"
          },
          "rejected": {
            "type": "integer",
            "description": "Count of reject pull requests.",
            "format": "uint64",
            "example": 2,
            "x-go-name": "Rejected"
          }
        },
        "description": "Represents repository pull request counts information.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "PullRequestEventGroups": {
        "title": "PullRequestActivityEventGroup",
        "type": "string",
        "description": "Represents repository pull request activities event group filter.\nstatuses: filter by pull request status transitions\nreviewers: filter by reviewer events\nissues: filter by issues raised\ncommits: filter by added or deleted commits\nbuilds: filter by CI build status changes",
        "x-go-name": "PullRequestActivityEventGroup",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "PullRequestId": {
        "type": "integer",
        "format": "int64",
        "x-go-package": "ppsc/common/domain"
      },
      "PullRequestIdempotencyKey": {
        "type": "string",
        "x-go-package": "ppsc/common/domain"
      },
      "PullRequestMergeConflict": {
        "title": "PullRequestMergeConflict",
        "type": "object",
        "properties": {
          "did_exceed_limit": {
            "type": "boolean",
            "x-go-name": "DidExceedLimit"
          },
          "is_resolvable": {
            "type": "boolean",
            "x-go-name": "IsResolvable"
          },
          "merge_conflicts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MergeConflict"
            },
            "x-go-name": "MergeConflicts"
          }
        },
        "description": "Represents repository pull request merge conflicts information.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "PullRequestMergeResult": {
        "title": "PullRequestMergeResult",
        "type": "object",
        "properties": {
          "merge_commit": {
            "$ref": "#/components/schemas/Sha1"
          },
          "pull_request": {
            "$ref": "#/components/schemas/PullRequest"
          }
        },
        "description": "Represents repository pull request merge result.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "PullRequestPermissions": {
        "title": "PullRequestPermissions",
        "type": "object",
        "properties": {
          "can_add_assignee": {
            "type": "boolean",
            "description": "CanAddAssignee defines access to add assign PR",
            "x-go-name": "CanAddAssignee"
          },
          "can_close": {
            "type": "boolean",
            "description": "CanClose defines access to close PR.",
            "x-go-name": "CanClose"
          },
          "can_force_merge": {
            "type": "boolean",
            "description": "CanForceMerge defines access to force merge pull request",
            "x-go-name": "CanForceMerge"
          },
          "can_merge": {
            "type": "boolean",
            "description": "CanMerge defines access to merge PR.",
            "x-go-name": "CanMerge"
          },
          "can_remove_assignee": {
            "type": "boolean",
            "description": "CanRemoveAssignee defines access to remove assign PR",
            "x-go-name": "CanRemoveAssignee"
          },
          "can_reopen": {
            "type": "boolean",
            "description": "CanReopen defines access to reopen PR.",
            "x-go-name": "CanReopen"
          },
          "can_set_decision": {
            "type": "boolean",
            "description": "CanSetDecision defines that decision can be applied to the pull request.",
            "x-go-name": "CanSetDecision"
          }
        },
        "description": "Represents pull request permissions for user.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "PullRequestReviewerGroup": {
        "title": "PullRequestReviewerGroup",
        "type": "object",
        "properties": {
          "auto_approve_by_author": {
            "type": "boolean",
            "description": "Auto approve by author",
            "x-go-name": "AutoApproveByAuthor"
          },
          "default_reviewers": {
            "type": "array",
            "description": "List of reviewers",
            "items": {
              "$ref": "#/components/schemas/SimpleUser"
            },
            "x-go-name": "DefaultReviewers"
          },
          "file_masks": {
            "type": "array",
            "description": "File masks",
            "items": {
              "type": "string"
            },
            "x-go-name": "FileMasks"
          },
          "id": {
            "$ref": "#/components/schemas/PullRequestReviewerGroupID"
          },
          "min_approvals": {
            "type": "integer",
            "description": "Minimap amount of approves",
            "format": "int64",
            "x-go-name": "MinApprovals"
          },
          "name": {
            "type": "string",
            "description": "Group name",
            "x-go-name": "Name"
          },
          "repo_slug": {
            "$ref": "#/components/schemas/RepoSlug"
          },
          "target_branch_ignore_mask": {
            "type": "string",
            "description": "Exclusive branch mask (implies multiple masks separated by comma)",
            "x-go-name": "TargetBranchIgnoreMask"
          },
          "target_branch_mask": {
            "type": "string",
            "description": "Target branch mask (implies multiple masks separated by comma)",
            "x-go-name": "TargetBranchMask"
          }
        },
        "description": "Represents pull request reviewer group.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "PullRequestReviewerGroupID": {
        "type": "integer",
        "format": "int64",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "PullRequestStatus": {
        "title": "PullRequestStatus",
        "type": "string",
        "description": "Represents repository pull request status filter.\nopen: newly created pull request\nrejected: pull request changes have been discarded\nmerged: pull request has merged",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "PullRequestStatusFilter": {
        "title": "PullRequestStatusFilter",
        "type": "string",
        "description": "Represents repository pull request status filter.\nopen: filter opened pull requests (all except merged and rejected)\nclose: filter closed pull requests (merged and rejected)\nmerged: filter merged pull requests\nrejected: filter rejected pull requests\nall: filter all pull requests",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "PullRequestViewedFile": {
        "title": "PullRequestViewedFile",
        "type": "object",
        "properties": {
          "changed_since_last_view": {
            "type": "boolean",
            "description": "Changed since last view",
            "x-go-name": "ChangedSinceLastView"
          },
          "created_at": {
            "type": "string",
            "description": "Created at",
            "format": "date-time",
            "x-go-name": "CreatedAt"
          },
          "file_path": {
            "type": "string",
            "description": "Path to the file.",
            "x-go-name": "FilePath"
          },
          "hash": {
            "$ref": "#/components/schemas/Sha1"
          }
        },
        "description": "Represents pull request viewed file.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "PullRequestViewedFileInput": {
        "title": "PullRequestViewedFileInput",
        "type": "object",
        "properties": {
          "file_path": {
            "type": "string",
            "description": "Path to the file.\ntype: string",
            "x-go-name": "FilePath"
          }
        },
        "description": "Represents pull request viewed file input.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "RepoBranch": {
        "title": "RepoBranch",
        "type": "object",
        "properties": {
          "is_protected": {
            "type": "boolean",
            "description": "Protection flag.",
            "x-go-name": "IsProtected"
          },
          "last_commit": {
            "$ref": "#/components/schemas/RepoCommit"
          },
          "name": {
            "type": "string",
            "description": "Branch name",
            "x-go-name": "Name"
          }
        },
        "description": "Represents a repository branch with the head commit.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "RepoBranchWithIssue": {
        "title": "RepoBranchWithIssue",
        "type": "object",
        "properties": {
          "is_protected": {
            "type": "boolean",
            "description": "Protection flag.",
            "x-go-name": "IsProtected"
          },
          "issue": {
            "$ref": "#/components/schemas/Issue"
          },
          "last_commit": {
            "$ref": "#/components/schemas/RepoCommit"
          },
          "name": {
            "type": "string",
            "description": "Branch name",
            "x-go-name": "Name"
          }
        },
        "description": "Represents a repository branch with the head commit and issue assigned.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "RepoBranchWithMetadata": {
        "title": "RepoBranch",
        "type": "object",
        "properties": {
          "ahead": {
            "type": "integer",
            "description": "Ahead represents the number of commits ahead, when comparing the output ref to the BehindAheadBaseRev.",
            "format": "int32",
            "x-go-name": "Ahead"
          },
          "behind": {
            "type": "integer",
            "description": "Behind represents the number of commits behind, when comparing the output ref to the BehindAheadBaseRev.",
            "format": "int32",
            "x-go-name": "Behind"
          },
          "behind_ahead_base_rev": {
            "$ref": "#/components/schemas/GitRev"
          },
          "has_common_ancestor_with_base": {
            "type": "boolean",
            "description": "Represents if branch has common ancestor with BehindAheadBaseRev.",
            "x-go-name": "HasCommonAncestorWithBase"
          },
          "issue": {
            "$ref": "#/components/schemas/Issue"
          }
        },
        "description": "Represents a repository branch with the head commit.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "RepoCommit": {
        "title": "RepoCommit",
        "type": "object",
        "properties": {
          "Tags": {
            "type": "array",
            "description": "Deprecated (a copy of TagNames for backward compatability)",
            "items": {
              "$ref": "#/components/schemas/RepoTag"
            },
            "x-go-name": "OldTags"
          },
          "author": {
            "$ref": "#/components/schemas/GitUser"
          },
          "branch_names": {
            "type": "array",
            "description": "BranchNames associated with the commit",
            "items": {
              "type": "string"
            },
            "x-go-name": "BranchNames"
          },
          "committer": {
            "$ref": "#/components/schemas/GitUser"
          },
          "created_at": {
            "type": "string",
            "description": "Commit creation date (author date)",
            "format": "date-time",
            "x-go-name": "Created"
          },
          "hash": {
            "$ref": "#/components/schemas/Sha1"
          },
          "issues": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Linked issues",
            "example": {
              "code-123": "https://example.com/code-123"
            },
            "x-go-name": "Issues"
          },
          "message": {
            "type": "string",
            "description": "Commit message",
            "x-go-name": "Message"
          },
          "parents": {
            "type": "array",
            "description": "Parents of the commit",
            "items": {
              "$ref": "#/components/schemas/Sha1"
            },
            "x-go-name": "Parents"
          },
          "tag_names": {
            "type": "array",
            "description": "TagNames attached to commit",
            "items": {
              "type": "string"
            },
            "x-go-name": "TagNames"
          }
        },
        "description": "Represents a repository commit.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "RepoConfig": {
        "title": "RepoConfig",
        "type": "object",
        "properties": {
          "disable_download_archives": {
            "type": "boolean",
            "x-go-name": "DisableDownloadArchives"
          },
          "disable_merge_branch": {
            "type": "boolean",
            "x-go-name": "DisableMergeBranch"
          },
          "lfs_allow": {
            "type": "boolean",
            "x-go-name": "LFSAllow"
          }
        },
        "description": "Repo settings from app config.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "RepoContent": {
        "title": "RepoContent",
        "type": "object",
        "properties": {
          "git_url": {
            "type": "string",
            "description": "Element git url (excluding host)",
            "x-go-name": "GitURL"
          },
          "is_binary": {
            "type": "boolean",
            "description": "IsBinary identifies whether file is binary or not from the perspective of git",
            "x-go-name": "IsBinary"
          },
          "is_lfs": {
            "type": "boolean",
            "description": "IsLFS identifies whether file is lfs pointer",
            "x-go-name": "IsLFS"
          },
          "last_commit": {
            "$ref": "#/components/schemas/RepoCommit"
          },
          "name": {
            "type": "string",
            "description": "Element name",
            "x-go-name": "Name"
          },
          "path": {
            "$ref": "#/components/schemas/TreePath"
          },
          "sha": {
            "type": "string",
            "description": "Element SHA",
            "x-go-name": "SHA"
          },
          "size": {
            "type": "integer",
            "description": "Element size",
            "format": "int64",
            "x-go-name": "Size"
          },
          "submodule_info": {
            "$ref": "#/components/schemas/SubmoduleRepoContent"
          },
          "type": {
            "$ref": "#/components/schemas/RepoContentType"
          }
        },
        "description": "Represents a repository content element.\nDeprecated: Use RepoTreeNode instead",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "RepoContentType": {
        "title": "RepoContentType",
        "type": "string",
        "description": "Represents repository tree element type.\nDeprecated: Use RepoTreeNodeType instead",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "RepoCoreFields": {
        "type": "object",
        "properties": {
          "clone_links": {
            "$ref": "#/components/schemas/CloneLinks"
          },
          "created_at": {
            "type": "string",
            "description": "Repo created timestamp.",
            "format": "date-time",
            "x-go-name": "Created"
          },
          "default_branch": {
            "type": "string",
            "description": "Original repository URL set by the owner.\nDefault branch name.",
            "x-go-name": "DefaultBranch"
          },
          "description": {
            "type": "string",
            "description": "Description set by the owner.",
            "x-go-name": "Description"
          },
          "fork_slug": {
            "$ref": "#/components/schemas/RepoSlug"
          },
          "is_fork": {
            "type": "boolean",
            "description": "IsFork flag identifying repo as fork",
            "x-go-name": "IsFork"
          },
          "name": {
            "type": "string",
            "description": "Unique name.",
            "x-go-name": "Name"
          },
          "owner_name": {
            "type": "string",
            "description": "Project key.",
            "x-go-name": "ProjectKey"
          },
          "permissions": {
            "$ref": "#/components/schemas/RepositoryPermissions"
          },
          "topics": {
            "type": "array",
            "description": "Repo topics (tags) set by owner.",
            "items": {
              "type": "string"
            },
            "x-go-name": "Topics"
          },
          "updated_at": {
            "type": "string",
            "description": "Repo updated timestamp.",
            "format": "date-time",
            "x-go-name": "Updated"
          }
        },
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "RepoFile": {
        "title": "RepoFile",
        "type": "object",
        "properties": {
          "content": {
            "type": "string",
            "description": "Base64 encoded file content",
            "x-go-name": "Content"
          },
          "is_binary": {
            "type": "boolean",
            "description": "IsBinary identifies whether file is binary or not from the perspective of git",
            "x-go-name": "IsBinary"
          },
          "is_lfs": {
            "type": "boolean",
            "description": "IsLFS identifies whether file is lfs pointer",
            "x-go-name": "IsLFS"
          },
          "name": {
            "type": "string",
            "description": "File name",
            "x-go-name": "Name"
          }
        },
        "description": "Represents a repository file content.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "RepoFork": {
        "title": "RepoFork",
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "Repository description.",
            "x-go-name": "Description"
          },
          "name": {
            "type": "string",
            "description": "Repository name.",
            "x-go-name": "Name"
          },
          "project_description": {
            "type": "string",
            "description": "Project description.",
            "x-go-name": "ProjectDescription"
          },
          "project_key": {
            "type": "string",
            "description": "Project key.",
            "x-go-name": "ProjectKey"
          },
          "project_name": {
            "type": "string",
            "description": "Project name.",
            "x-go-name": "ProjectName"
          },
          "updated_at": {
            "type": "string",
            "description": "Repo fork updated timestamp.",
            "format": "date-time",
            "x-go-name": "UpdatedAt"
          }
        },
        "description": "Represents the repository fork.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "RepoForkAsyncInfo": {
        "title": "RepoForkAsyncInfo",
        "type": "object",
        "properties": {
          "job_id": {
            "$ref": "#/components/schemas/JobId"
          }
        },
        "description": "Represents the repository async fork info.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "RepoPolicy": {
        "title": "RepoPolicy",
        "type": "object",
        "properties": {
          "allow_authors_to_approve_their_pull_requests": {
            "$ref": "#/components/schemas/RepoPolicyMode"
          },
          "allow_auto_merge": {
            "type": "boolean",
            "description": "Allow auto merge.",
            "x-go-name": "AllowAutoMerge"
          },
          "approvals_min": {
            "type": "integer",
            "description": "Min approves to merge.",
            "format": "uint64",
            "x-go-name": "ApprovalsMin"
          },
          "code_quality_scan_mode": {
            "$ref": "#/components/schemas/RepoPolicyMode"
          },
          "create_pr_hook_message_mode": {
            "$ref": "#/components/schemas/RepoPolicyMode"
          },
          "default_assignees": {
            "type": "array",
            "description": "Default DefaultAssignees",
            "items": {
              "$ref": "#/components/schemas/SimpleUser"
            },
            "x-go-name": "DefaultAssignees"
          },
          "delete_source_branch_after_merge_by_default_mode": {
            "$ref": "#/components/schemas/RepoPolicyMode"
          },
          "description": {
            "type": "string",
            "description": "Description pull request setting description.",
            "x-go-name": "Description"
          },
          "id": {
            "type": "integer",
            "description": "Unique pull request setting ID.",
            "format": "int64",
            "x-go-name": "ID"
          },
          "is_active": {
            "type": "boolean",
            "description": "IsActive tag which indicates whether the setting is enabled",
            "x-go-name": "IsActive"
          },
          "is_default": {
            "type": "boolean",
            "description": "IsDefault pull request setting.",
            "x-go-name": "IsDefault"
          },
          "merge_branch_source_up_to_date_mode": {
            "$ref": "#/components/schemas/RepoPolicyMode"
          },
          "merge_types_fast_forward_mode": {
            "$ref": "#/components/schemas/RepoPolicyMode"
          },
          "merge_types_merge_commit_mode": {
            "$ref": "#/components/schemas/RepoPolicyMode"
          },
          "merge_types_squash_mode": {
            "$ref": "#/components/schemas/RepoPolicyMode"
          },
          "merging_for_unassigned_changed_files_mode": {
            "$ref": "#/components/schemas/RepoPolicyMode"
          },
          "merging_without_linked_issues_mode": {
            "$ref": "#/components/schemas/RepoPolicyMode"
          },
          "name": {
            "type": "string",
            "description": "Name pull request setting name.",
            "x-go-name": "Name"
          },
          "rejects_max": {
            "type": "integer",
            "description": "Max rejects to merge.",
            "format": "uint64",
            "x-go-name": "RejectsMax"
          },
          "repo_structure_branches_exclude": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RepoStructure"
            },
            "x-go-name": "RepoStructuresBranchExclude"
          },
          "repo_structure_branches_include": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RepoStructure"
            },
            "x-go-name": "RepoStructuresBranchInclude"
          },
          "repo_structure_paths_exclude": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RepoStructure"
            },
            "x-go-name": "RepoStructuresPathExclude"
          },
          "repo_structure_paths_include": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RepoStructure"
            },
            "x-go-name": "RepoStructuresPathInclude"
          },
          "reviewer_groups": {
            "type": "array",
            "description": "ReviewerGroups represents policy reviewer groups",
            "items": {
              "$ref": "#/components/schemas/PolicyReviewerGroup"
            },
            "x-go-name": "ReviewerGroups"
          },
          "setting_builds": {
            "type": "array",
            "description": "SettingBuilds represents policy assembly settings",
            "items": {
              "$ref": "#/components/schemas/PolicyCIBuild"
            },
            "x-go-name": "SettingBuilds"
          },
          "updated_at": {
            "type": "string",
            "description": "Updated at timestamp.",
            "format": "date-time",
            "x-go-name": "UpdatedAt"
          }
        },
        "description": "Represents a repository pull request settings.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "RepoPolicyInput": {
        "title": "RepoPolicyInput",
        "type": "object",
        "properties": {
          "allow_authors_to_approve_their_pull_requests": {
            "$ref": "#/components/schemas/RepoPolicyMode"
          },
          "allow_auto_merge": {
            "type": "boolean",
            "description": "Allow auto merge.",
            "x-go-name": "AllowAutoMerge"
          },
          "approvals_min": {
            "type": "integer",
            "description": "Min approves to merge.",
            "format": "uint64",
            "x-go-name": "ApprovalsMin"
          },
          "block_merging_without_reviewers_assigned_to_changed_files": {
            "$ref": "#/components/schemas/RepoPolicyMode"
          },
          "code_quality_scan_mode": {
            "$ref": "#/components/schemas/RepoPolicyMode"
          },
          "create_pr_hook_message_mode": {
            "$ref": "#/components/schemas/RepoPolicyMode"
          },
          "default_assignees": {
            "type": "array",
            "description": "List of default assignee principal names to set for each new PR created.",
            "example": [
              "user1@mail.com",
              "user2"
            ],
            "items": {
              "type": "string"
            },
            "x-go-name": "DefaultAssignees"
          },
          "delete_source_branch_after_merge_by_default_mode": {
            "$ref": "#/components/schemas/RepoPolicyMode"
          },
          "description": {
            "type": "string",
            "description": "Description pull request setting description.",
            "x-go-name": "Description"
          },
          "is_active": {
            "type": "boolean",
            "description": "IsActive tag which indicates whether the setting is enabled",
            "x-go-name": "IsActive"
          },
          "merge_branch_source_up_to_date_mode": {
            "$ref": "#/components/schemas/RepoPolicyMode"
          },
          "merge_types_fast_forward_mode": {
            "$ref": "#/components/schemas/RepoPolicyMode"
          },
          "merge_types_merge_commit_mode": {
            "$ref": "#/components/schemas/RepoPolicyMode"
          },
          "merge_types_squash_mode": {
            "$ref": "#/components/schemas/RepoPolicyMode"
          },
          "merging_for_unassigned_changed_files_mode": {
            "$ref": "#/components/schemas/RepoPolicyMode"
          },
          "merging_without_linked_issues_mode": {
            "$ref": "#/components/schemas/RepoPolicyMode"
          },
          "name": {
            "type": "string",
            "description": "Name pull request setting name.",
            "x-go-name": "Name"
          },
          "rejects_max": {
            "type": "integer",
            "description": "Max rejects to merge.",
            "format": "uint64",
            "x-go-name": "RejectsMax"
          },
          "repo_structure_branches_exclude": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RepoStructureId"
            },
            "x-go-name": "RepoStructureBranchesExclude"
          },
          "repo_structure_branches_include": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RepoStructureId"
            },
            "x-go-name": "RepoStructureBranchesInclude"
          },
          "repo_structure_paths_exclude": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RepoStructureId"
            },
            "x-go-name": "RepoStructurePathsExclude"
          },
          "repo_structure_paths_include": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RepoStructureId"
            },
            "x-go-name": "RepoStructurePathsInclude"
          },
          "reviewer_groups": {
            "type": "array",
            "description": "ReviewerGroups represents policy reviewer groups",
            "items": {
              "$ref": "#/components/schemas/PolicyReviewerGroupInput"
            },
            "x-go-name": "ReviewerGroups"
          },
          "setting_builds": {
            "$ref": "#/components/schemas/ListPolicyCIBuildInput"
          },
          "updated_at": {
            "type": "string",
            "description": "Updated at timestamp.",
            "format": "date-time",
            "x-go-name": "UpdatedAt"
          }
        },
        "description": "Represents a create repository pull request settings.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "RepoPolicyMode": {
        "type": "string",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "RepoSlug": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "x-go-name": "Name"
          },
          "owner": {
            "type": "string",
            "x-go-name": "Owner"
          }
        },
        "x-go-package": "ppsc/common/domain"
      },
      "RepoStructure": {
        "title": "RepoStructure",
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "Description of the repo structure.",
            "example": "'its branch filter description'.",
            "x-go-name": "Description"
          },
          "id": {
            "$ref": "#/components/schemas/RepoStructureId"
          },
          "is_default": {
            "type": "boolean",
            "description": "IsDefault determines that this field is default within this repository.",
            "x-go-name": "IsDefault"
          },
          "mask": {
            "type": "string",
            "description": "Regular expression of branch filter.",
            "example": "'{master, feature}'",
            "x-go-name": "Mask"
          },
          "name": {
            "type": "string",
            "description": "Name filter.",
            "example": "'its branch filter name'",
            "x-go-name": "Name"
          }
        },
        "description": "Creates a new repo structure.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "RepoStructureCreateInput": {
        "title": "RepoStructureCreateInput",
        "required": [
          "mask",
          "name"
        ],
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "Description of the repo structure.",
            "example": "'its branch filter description'.",
            "x-go-name": "Description"
          },
          "mask": {
            "type": "string",
            "description": "Regular expression of branch filter.",
            "example": "'{master, feature}'",
            "x-go-name": "Mask"
          },
          "name": {
            "type": "string",
            "description": "Name repo structure.",
            "example": "'its branch filter name'",
            "x-go-name": "Name"
          }
        },
        "description": "Creates a new repo structure.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "RepoStructureId": {
        "type": "integer",
        "format": "int64",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "RepoStructurePatchInput": {
        "title": "RepoStructurePatchInput",
        "required": [
          "mask",
          "name"
        ],
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "Description of the repo structure.",
            "example": "'its branch filter description'.",
            "x-go-name": "Description"
          },
          "mask": {
            "type": "string",
            "description": "Mask of branch filter.",
            "example": "'{master, feature}'",
            "x-go-name": "MaskGlob"
          },
          "name": {
            "type": "string",
            "description": "Repo structure name.",
            "example": "'its branch filter name'",
            "x-go-name": "Name"
          }
        },
        "description": "Edit repo structure.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "RepoSubmodule": {
        "title": "RepoSubmodule",
        "type": "object",
        "properties": {
          "commit": {
            "$ref": "#/components/schemas/Sha1"
          },
          "is_local": {
            "type": "boolean",
            "description": "IsLocal detects if URL is in the same environment",
            "x-go-name": "IsLocal"
          },
          "target_url": {
            "type": "string",
            "description": "TargetURL HTTP link to submodule repository",
            "x-go-name": "TargetUrl"
          },
          "url": {
            "type": "string",
            "description": "URL to submodule repository",
            "x-go-name": "URL"
          }
        },
        "description": "Represents submodule related information.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "RepoTag": {
        "title": "RepoTag",
        "type": "object",
        "properties": {
          "commit": {
            "$ref": "#/components/schemas/Sha1"
          },
          "message": {
            "type": "string",
            "description": "Message of a tag",
            "x-go-name": "Message"
          },
          "name": {
            "type": "string",
            "description": "Name of a tag",
            "x-go-name": "Name"
          }
        },
        "description": "Represents a repository tag.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "RepoTagErrorMetadata": {
        "title": "RepoTagErrorMetadata",
        "type": "object",
        "properties": {
          "conflicted_tag_name": {
            "type": "string",
            "x-go-name": "ConflictedTagName"
          }
        },
        "description": "Represents a repository tag error metadata.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "RepoTreeNode": {
        "title": "RepoTreeNode",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Tree node ID",
            "x-go-name": "ID"
          },
          "is_binary": {
            "type": "boolean",
            "description": "IsBinary identifies whether file is binary or not from the perspective of git",
            "x-go-name": "IsBinary"
          },
          "is_executable": {
            "type": "boolean",
            "description": "IsExecutable identifies whether file is executable",
            "x-go-name": "IsExecutable"
          },
          "is_lfs": {
            "type": "boolean",
            "description": "IsLFS identifies whether file is lfs pointer",
            "x-go-name": "IsLFS"
          },
          "name": {
            "type": "string",
            "description": "Tree node name",
            "x-go-name": "Name"
          },
          "path": {
            "$ref": "#/components/schemas/TreePath"
          },
          "size": {
            "type": "integer",
            "description": "Tree node size",
            "format": "int64",
            "x-go-name": "Size"
          },
          "submodule": {
            "$ref": "#/components/schemas/RepoSubmodule"
          },
          "type": {
            "$ref": "#/components/schemas/RepoTreeNodeType"
          }
        },
        "description": "Represents a repository tree node.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "RepoTreeNodeMetadata": {
        "title": "RepoTreeNodeMetadata",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Tree node ID",
            "x-go-name": "ID"
          },
          "last_commit": {
            "$ref": "#/components/schemas/RepoCommit"
          },
          "name": {
            "type": "string",
            "description": "Tree node name",
            "x-go-name": "Name"
          },
          "path": {
            "$ref": "#/components/schemas/TreePath"
          }
        },
        "description": "Represents a repository tree node metadata.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "RepoTreeNodeType": {
        "title": "RepoTreeNodeType",
        "type": "string",
        "description": "Represents repository tree node type.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "RepoUsageQuotas": {
        "title": "RepoUsageQuotas",
        "type": "object",
        "properties": {
          "repo_exceed_hard_limit": {
            "type": "boolean",
            "description": "Defines if repo exceeds hard limit",
            "x-go-name": "RepoExceedHardLimit"
          },
          "repo_exceed_soft_limit": {
            "type": "boolean",
            "description": "Defines if repo exceeds soft limit",
            "x-go-name": "RepoExceedSoftLimit"
          },
          "repo_size": {
            "type": "integer",
            "description": "Repository size in bytes",
            "format": "uint64",
            "x-go-name": "RepoSize"
          },
          "repo_size_human": {
            "type": "string",
            "description": "Repository size in human readable format",
            "x-go-name": "RepoSizeHuman"
          },
          "repo_storage_policy_hard_limit": {
            "type": "integer",
            "description": "Hard limit repository usage quotas setting.",
            "format": "uint64",
            "x-go-name": "RepoStoragePolicyHardLimit"
          },
          "repo_storage_policy_hard_limit_human": {
            "type": "string",
            "description": "Hard limit repository usage quotas setting in human readable format.",
            "x-go-name": "RepoStoragePolicyHardLimitHuman"
          },
          "repo_storage_policy_soft_limit": {
            "type": "integer",
            "description": "Soft limit repository usage quotas setting.",
            "format": "uint64",
            "x-go-name": "RepoStoragePolicySoftLimit"
          },
          "repo_storage_policy_soft_limit_human": {
            "type": "string",
            "description": "Soft limit repository usage quotas setting in human readable format.",
            "x-go-name": "RepoStoragePolicySoftLimitHuman"
          },
          "usage_quotas_message_eng": {
            "type": "string",
            "description": "UsageQuotasMessageEng a message that will be sent to further inform the user in English",
            "x-go-name": "UsageQuotasMessageEng"
          },
          "usage_quotas_message_rus": {
            "type": "string",
            "description": "UsageQuotasMessageRus a message that will be sent to further inform the user in Russian",
            "x-go-name": "UsageQuotasMessageRus"
          }
        },
        "description": "Repo usage quotas.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "ReposGroupsInfo": {
        "title": "ReposGroupsInfo",
        "type": "object",
        "properties": {
          "groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Project"
            },
            "x-go-name": "Groups"
          },
          "repos": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RepositoryListItem"
            },
            "x-go-name": "Repos"
          }
        },
        "description": "Represents repos and groups aggregate info.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "Repository": {
        "title": "Repository",
        "type": "object",
        "properties": {
          "clone_links": {
            "$ref": "#/components/schemas/CloneLinks"
          },
          "created_at": {
            "type": "string",
            "description": "Repo created timestamp.",
            "format": "date-time",
            "x-go-name": "Created"
          },
          "default_branch": {
            "type": "string",
            "description": "Original repository URL set by the owner.\nDefault branch name.",
            "x-go-name": "DefaultBranch"
          },
          "description": {
            "type": "string",
            "description": "Description set by the owner.",
            "x-go-name": "Description"
          },
          "enable_paths_restrictions": {
            "type": "boolean",
            "x-go-name": "EnablePathRestrictions"
          },
          "fork_slug": {
            "$ref": "#/components/schemas/RepoSlug"
          },
          "is_fork": {
            "type": "boolean",
            "description": "IsFork flag identifying repo as fork",
            "x-go-name": "IsFork"
          },
          "name": {
            "type": "string",
            "description": "Unique name.",
            "x-go-name": "Name"
          },
          "owner_name": {
            "type": "string",
            "description": "Project key.",
            "x-go-name": "ProjectKey"
          },
          "permissions": {
            "$ref": "#/components/schemas/RepositoryPermissions"
          },
          "repo_structure_paths_exclude": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RepoStructure"
            },
            "x-go-name": "StructurePathExclude"
          },
          "repo_structure_paths_include": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RepoStructure"
            },
            "x-go-name": "StructurePathInclude"
          },
          "topics": {
            "type": "array",
            "description": "Repo topics (tags) set by owner.",
            "items": {
              "type": "string"
            },
            "x-go-name": "Topics"
          },
          "updated_at": {
            "type": "string",
            "description": "Repo updated timestamp.",
            "format": "date-time",
            "x-go-name": "Updated"
          }
        },
        "description": "Represents a repository.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "RepositoryBranchCreated": {
        "title": "RepositoryBranchCreated",
        "type": "object",
        "properties": {
          "branch": {
            "type": "string",
            "x-go-name": "Branch"
          },
          "commit": {
            "$ref": "#/components/schemas/RepoCommit"
          },
          "requester": {
            "$ref": "#/components/schemas/SimpleUser"
          },
          "source_issue": {
            "$ref": "#/components/schemas/Issue"
          }
        },
        "description": "is emitted on branch created.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto/events"
      },
      "RepositoryBranchDeleted": {
        "title": "RepositoryBranchDeleted",
        "type": "object",
        "properties": {
          "branch": {
            "type": "string",
            "x-go-name": "Branch"
          },
          "requester": {
            "$ref": "#/components/schemas/SimpleUser"
          },
          "source_issue": {
            "$ref": "#/components/schemas/Issue"
          }
        },
        "description": "is emitted on branch deleted.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto/events"
      },
      "RepositoryBranchOrTagCreatedDeprecated": {
        "type": "object",
        "properties": {
          "branch": {
            "type": "string",
            "x-go-name": "Branch"
          },
          "commit": {
            "$ref": "#/components/schemas/RepoCommit"
          },
          "message": {
            "type": "string",
            "x-go-name": "Message"
          },
          "requester": {
            "$ref": "#/components/schemas/SimpleUser"
          },
          "tag": {
            "type": "string",
            "x-go-name": "Tag"
          }
        },
        "description": "RepositoryBranchOrTagCreatedDeprecated\nDeprecated events, remove in release 2024.11 or later\nis emitted on branch/tag created.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto/events"
      },
      "RepositoryBranchOrTagDeletedDeprecated": {
        "type": "object",
        "properties": {
          "branch": {
            "type": "string",
            "x-go-name": "Branch"
          },
          "message": {
            "type": "string",
            "x-go-name": "Message"
          },
          "requester": {
            "$ref": "#/components/schemas/SimpleUser"
          },
          "tag": {
            "type": "string",
            "x-go-name": "Tag"
          }
        },
        "description": "RepositoryBranchOrTagDeletedDeprecated\nDeprecated events, remove in release 2024.11 or later\nis emitted on branch/tag deleted.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto/events"
      },
      "RepositoryCreated": {
        "type": "object",
        "properties": {
          "requester": {
            "$ref": "#/components/schemas/SimpleUser"
          }
        },
        "description": "RepositoryCreated\nis emitted on repository creation",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto/events"
      },
      "RepositoryDeleted": {
        "type": "object",
        "properties": {
          "requester": {
            "$ref": "#/components/schemas/SimpleUser"
          }
        },
        "description": "RepositoryDeleted\nis emitted on repository deletion",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto/events"
      },
      "RepositoryListItem": {
        "title": "RepositoryListItem",
        "type": "object",
        "properties": {
          "clone_links": {
            "$ref": "#/components/schemas/CloneLinks"
          },
          "created_at": {
            "type": "string",
            "description": "Repo created timestamp.",
            "format": "date-time",
            "x-go-name": "Created"
          },
          "default_branch": {
            "type": "string",
            "description": "Original repository URL set by the owner.\nDefault branch name.",
            "x-go-name": "DefaultBranch"
          },
          "description": {
            "type": "string",
            "description": "Description set by the owner.",
            "x-go-name": "Description"
          },
          "fork_slug": {
            "$ref": "#/components/schemas/RepoSlug"
          },
          "is_fork": {
            "type": "boolean",
            "description": "IsFork flag identifying repo as fork",
            "x-go-name": "IsFork"
          },
          "name": {
            "type": "string",
            "description": "Unique name.",
            "x-go-name": "Name"
          },
          "owner_name": {
            "type": "string",
            "description": "Project key.",
            "x-go-name": "ProjectKey"
          },
          "permissions": {
            "$ref": "#/components/schemas/RepositoryPermissions"
          },
          "topics": {
            "type": "array",
            "description": "Repo topics (tags) set by owner.",
            "items": {
              "type": "string"
            },
            "x-go-name": "Topics"
          },
          "updated_at": {
            "type": "string",
            "description": "Repo updated timestamp.",
            "format": "date-time",
            "x-go-name": "Updated"
          }
        },
        "description": "Represents a repository list item.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "RepositoryPermissions": {
        "title": "RepositoryPermissions",
        "type": "object",
        "properties": {
          "can_create_branch": {
            "type": "boolean",
            "description": "CanCreateBranch defines access to create branches.",
            "x-go-name": "CanCreateBranch"
          },
          "can_create_pr": {
            "type": "boolean",
            "description": "CanCreatePr defines access to create pull request",
            "x-go-name": "CanCreatePR"
          },
          "can_delete_branch": {
            "type": "boolean",
            "description": "CanDeleteBranch defines access to delete branches.",
            "x-go-name": "CanDeleteBranch"
          },
          "can_edit_advanced_settings": {
            "type": "boolean",
            "description": "CanEditAdvancedSettings defines access to edit repository webhooks settings.",
            "x-go-name": "CanEditAdvancedSettings"
          },
          "can_edit_content": {
            "type": "boolean",
            "description": "CanEditContent defines access to edit files, push commits, create or delete branches etc.",
            "x-go-name": "CanEditContent"
          },
          "can_edit_issues": {
            "type": "boolean",
            "description": "CanEditIssues defines access to create, edit, delete etc. pull request issues and comments.",
            "x-go-name": "CanEditIssues"
          },
          "can_edit_pr_settings": {
            "type": "boolean",
            "description": "CanEditPrSettings defines access to edit repository pull request settings.",
            "x-go-name": "CanEditPrSettings"
          },
          "can_edit_settings": {
            "type": "boolean",
            "description": "CanEditSettings defines access to edit repository settings (general, protected branches, etc.)",
            "x-go-name": "CanEditSettings"
          },
          "can_view_content": {
            "type": "boolean",
            "description": "CanViewContent defines access to view commits, branches, diffs, files and to clone repository.",
            "x-go-name": "CanViewContent"
          },
          "can_view_issues": {
            "type": "boolean",
            "description": "CanViewIssues defines access to view pull request issues and comments.",
            "x-go-name": "CanViewIssues"
          },
          "can_view_pr": {
            "type": "boolean",
            "description": "CanViewPr defines access to view pull request",
            "x-go-name": "CanViewPr"
          },
          "can_view_settings": {
            "type": "boolean",
            "description": "CanViewSettings defines access to view repository settings (general, protected branches, webhooks etc.)",
            "x-go-name": "CanViewSettings"
          },
          "can_write_advanced": {
            "type": "boolean",
            "description": "CanWriteAdvanced defines access to delete repo.",
            "x-go-name": "CanWriteAdvanced"
          }
        },
        "description": "Represents repository permissions for user.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "RepositoryPush": {
        "title": "RepositoryPush",
        "type": "object",
        "properties": {
          "branch": {
            "type": "string",
            "x-go-name": "Branch"
          },
          "commit": {
            "$ref": "#/components/schemas/RepoCommit"
          },
          "requester": {
            "$ref": "#/components/schemas/SimpleUser"
          },
          "source_issue": {
            "$ref": "#/components/schemas/Issue"
          }
        },
        "description": "is emitted on new commit push.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto/events"
      },
      "RepositoryTagCreated": {
        "title": "RepositoryTagCreated",
        "type": "object",
        "properties": {
          "commit": {
            "$ref": "#/components/schemas/RepoCommit"
          },
          "message": {
            "type": "string",
            "x-go-name": "Message"
          },
          "requester": {
            "$ref": "#/components/schemas/SimpleUser"
          },
          "tag": {
            "type": "string",
            "x-go-name": "Tag"
          }
        },
        "description": "is emitted on tag created.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto/events"
      },
      "RepositoryTagDeleted": {
        "title": "RepositoryTagDeleted",
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "x-go-name": "Message"
          },
          "requester": {
            "$ref": "#/components/schemas/SimpleUser"
          },
          "tag": {
            "type": "string",
            "x-go-name": "Tag"
          }
        },
        "description": "is emitted on tag deleted.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto/events"
      },
      "ResolveConflictsInput": {
        "title": "ResolveConflictsInput",
        "type": "object",
        "properties": {
          "merge_commit_message": {
            "type": "string",
            "x-go-name": "MergeCommitMessage"
          },
          "resolved_files": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MergeConflict"
            },
            "x-go-name": "ResolvedFiles"
          }
        },
        "description": "Represents a pull request resolve conflicts input model.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "ResponsePageMeta": {
        "type": "object",
        "properties": {
          "next_cursor": {
            "type": "string",
            "description": "Next page cursor if available.",
            "x-go-name": "NextCursor"
          },
          "prev_cursor": {
            "type": "string",
            "description": "Previous page cursor if available.",
            "x-go-name": "PrevCursor"
          }
        },
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "ResponseWarning": {
        "title": "ResponseWarning",
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "x-go-name": "Data"
          },
          "type": {
            "$ref": "#/components/schemas/ResponseWarningType"
          }
        },
        "description": "Defines the response warning.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "ResponseWarningType": {
        "title": "ResponseWarningType",
        "type": "string",
        "description": "Defines the response warning type.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "ResponseWarnings": {
        "title": "ResponseWarnings",
        "type": "object",
        "properties": {
          "warnings": {
            "type": "array",
            "description": "List of warnings that occurred during the request.",
            "example": [
              {
                "data": {},
                "type": "repo_tree_exceeds_limit"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/ResponseWarning"
            },
            "x-go-name": "Warnings"
          }
        },
        "description": "Defines the response occurred warnings.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "ReviewerGroup": {
        "title": "ReviewerGroup",
        "type": "object",
        "properties": {
          "auto_approve_by_author": {
            "type": "boolean",
            "description": "Auto approve by author, not considered within new logic after 2025.5",
            "x-go-name": "AutoApproveByAuthor"
          },
          "default_reviewers": {
            "type": "array",
            "description": "List of reviewers",
            "items": {
              "$ref": "#/components/schemas/SimpleUser"
            },
            "x-go-name": "DefaultReviewers"
          },
          "file_masks": {
            "type": "array",
            "description": "File masks",
            "items": {
              "type": "string"
            },
            "x-go-name": "FileMasks"
          },
          "id": {
            "$ref": "#/components/schemas/ReviewerGroupID"
          },
          "min_approvals": {
            "type": "integer",
            "description": "Minimap amount of approves",
            "format": "int64",
            "x-go-name": "MinApprovals"
          },
          "name": {
            "type": "string",
            "description": "Group name",
            "x-go-name": "Name"
          },
          "repo_slug": {
            "$ref": "#/components/schemas/RepoSlug"
          },
          "specify_reviewers": {
            "type": "boolean",
            "description": "Specify reviewers flag",
            "x-go-name": "SpecifyReviewers"
          },
          "target_branch_ignore_mask": {
            "type": "string",
            "description": "Exclusive branch mask (implies multiple masks separated by comma)",
            "x-go-name": "TargetBranchIgnoreMask"
          },
          "target_branch_mask": {
            "type": "string",
            "description": "Target branch mask (implies multiple masks separated by comma)",
            "x-go-name": "TargetBranchMask"
          }
        },
        "description": "Represents reviewer group.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "ReviewerGroupAssignees": {
        "title": "ReviewerGroupAssignees",
        "type": "object",
        "properties": {
          "assignees": {
            "type": "array",
            "description": "Assignees list",
            "items": {
              "$ref": "#/components/schemas/Assignee"
            },
            "x-go-name": "Assignees"
          },
          "id": {
            "$ref": "#/components/schemas/PullRequestReviewerGroupID"
          },
          "min_approvals": {
            "type": "integer",
            "description": "Minimal amount of required approvals",
            "format": "int64",
            "x-go-name": "MinApprovals"
          },
          "name": {
            "type": "string",
            "description": "Reviewer group name",
            "x-go-name": "Name"
          }
        },
        "description": "# Represents pull request group reviewer assignees",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "ReviewerGroupID": {
        "type": "integer",
        "format": "int64",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "ReviewerGroupInput": {
        "title": "ReviewerGroupInput",
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "auto_approve_by_author": {
            "type": "boolean",
            "description": "Auto approve by author",
            "example": true,
            "x-go-name": "AutoApproveByAuthor"
          },
          "default_reviewers": {
            "type": "array",
            "description": "Default reviewers (list of principal names)",
            "example": "['user1@email.com', 'user2@email.com']",
            "items": {
              "type": "string"
            },
            "x-go-name": "DefaultReviewers"
          },
          "file_masks": {
            "type": "array",
            "description": "File masks",
            "example": "['filename', 'another*']",
            "items": {
              "type": "string"
            },
            "x-go-name": "FileMasks"
          },
          "id": {
            "$ref": "#/components/schemas/ReviewerGroupID"
          },
          "min_approvals": {
            "type": "integer",
            "description": "Minimum amount of approvals",
            "format": "int64",
            "example": 2,
            "x-go-name": "MinApprovals"
          },
          "name": {
            "maxLength": 512,
            "type": "string",
            "description": "Group name",
            "example": "awesomeGroup",
            "x-go-name": "Name"
          },
          "specify_reviewers": {
            "type": "boolean",
            "description": "Specify reviewers flag",
            "x-go-name": "SpecifyReviewers"
          },
          "target_branch_ignore_mask": {
            "maxLength": 512,
            "type": "string",
            "description": "Target branch ignore mask",
            "example": "ignoreBranch*,ignoreBranch2",
            "x-go-name": "TargetBranchIgnoreMask"
          },
          "target_branch_mask": {
            "maxLength": 512,
            "type": "string",
            "description": "Target branch mask",
            "example": "branchA*,branchB*",
            "x-go-name": "TargetBranchMask"
          }
        },
        "description": "Represents a reviewer group create/update options.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "SearchInput": {
        "title": "SearchInput",
        "type": "object",
        "properties": {
          "branch_names": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "BranchNames"
          },
          "context_lines": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "ContextLines"
          },
          "exclude_files": {
            "type": "string",
            "x-go-name": "ExcludeFiles"
          },
          "include_files": {
            "type": "string",
            "x-go-name": "IncludeFiles"
          },
          "match_case": {
            "type": "boolean",
            "x-go-name": "MatchCase"
          },
          "match_whole_word": {
            "type": "boolean",
            "x-go-name": "MatchWholeWord"
          },
          "max_match_count": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "MaxMatchCount"
          },
          "query": {
            "type": "string",
            "x-go-name": "Query"
          },
          "use_regex": {
            "type": "boolean",
            "x-go-name": "UseRegex"
          }
        },
        "description": "Represents the repository search input.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "SearchResult": {
        "title": "SearchResult",
        "type": "object",
        "properties": {
          "files": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FileMatch"
            },
            "x-go-name": "Files"
          },
          "has_more_matches": {
            "type": "boolean",
            "x-go-name": "HasMoreMatches"
          }
        },
        "description": "Represents repo search response.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "SearchSettings": {
        "title": "SearchSettings",
        "type": "object",
        "properties": {
          "branches": {
            "type": "array",
            "description": "Branches defined for indexing",
            "items": {
              "$ref": "#/components/schemas/IndexedBranch"
            },
            "x-go-name": "Branches"
          },
          "slug": {
            "$ref": "#/components/schemas/RepoSlug"
          }
        },
        "description": "Represents repository search settings.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "SearchSettingsInput": {
        "title": "SearchSettingsInput",
        "type": "object",
        "properties": {
          "branches": {
            "type": "array",
            "description": "Branches defined for indexing",
            "items": {
              "type": "string"
            },
            "x-go-name": "Branches"
          }
        },
        "description": "Represents repository search settings input.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "SecurityConfig": {
        "title": "SecurityConfig",
        "type": "object",
        "properties": {
          "ssh_key": {
            "$ref": "#/components/schemas/TTLSecurityConfig"
          },
          "user_token": {
            "$ref": "#/components/schemas/TTLSecurityConfig"
          }
        },
        "description": "Security limits from app config.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "ServiceAccount": {
        "title": "ServiceAccount",
        "type": "object",
        "properties": {
          "created_at": {
            "type": "string",
            "description": "Created timestamp.",
            "format": "date-time",
            "x-go-name": "CreatedAt"
          },
          "description": {
            "type": "string",
            "description": "Description.",
            "x-go-name": "Description"
          },
          "login": {
            "type": "string",
            "description": "Login.",
            "x-go-name": "Login"
          },
          "name": {
            "type": "string",
            "description": "Name.",
            "x-go-name": "Name"
          },
          "project_key": {
            "type": "string",
            "description": "Project key.",
            "x-go-name": "ProjectKey"
          },
          "updated_at": {
            "type": "string",
            "description": "Updated timestamp.",
            "format": "date-time",
            "x-go-name": "UpdatedAt"
          }
        },
        "description": "Represents the project service account.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "ServiceAccountEntities": {
        "title": "ServiceAccountEntities",
        "type": "object",
        "properties": {
          "webhooks": {
            "type": "array",
            "description": "Names and IDs of all webhooks in a given project with a given service account.",
            "items": {
              "$ref": "#/components/schemas/WebhookInfo"
            },
            "x-go-name": "Webhooks"
          }
        },
        "description": "Represents the project service account.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "ServiceInformation": {
        "title": "ServiceInformation",
        "type": "object",
        "properties": {
          "LabelName": {
            "type": "string",
            "description": "Label name"
          },
          "message_en": {
            "type": "string",
            "description": "Service information message in English up to 3000 characters.",
            "x-go-name": "MessageEn"
          },
          "message_ru": {
            "type": "string",
            "description": "Service information message in Russian up to 3000 characters.",
            "x-go-name": "MessageRu"
          }
        },
        "description": "Service information about the object, which is strictly tied to the label.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "ServiceTaskType": {
        "title": "ServiceTaskType",
        "type": "string",
        "description": "Task service type.\nenum:\nsfera.task\nnone\ntype: string",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "Sha1": {
        "type": "string",
        "description": "Sha1 represents hash of the git objects (such as commit, blob, tag etc.)",
        "x-go-package": "ppsc/common/domain"
      },
      "SimpleUser": {
        "title": "SimpleUser",
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "Unique primary email.",
            "format": "email",
            "x-go-name": "Email"
          },
          "first_name": {
            "type": "string",
            "description": "First name.",
            "x-go-name": "FirstName"
          },
          "full_name": {
            "type": "string",
            "description": "Full name.",
            "x-go-name": "FullName"
          },
          "last_name": {
            "type": "string",
            "description": "Last name.",
            "x-go-name": "LastName"
          },
          "login": {
            "type": "string",
            "description": "Unique username (login).",
            "x-go-name": "UserName"
          },
          "middle_name": {
            "type": "string",
            "description": "Middle name.",
            "x-go-name": "MiddleName"
          },
          "principal_name": {
            "type": "string",
            "description": "User principal name.",
            "x-go-name": "PrincipalName"
          }
        },
        "description": "Represents basic user information.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "SourceBranchDeleteStatus": {
        "title": "SourceBranchDeleteStatus",
        "type": "string",
        "description": "Represents repository pull request source branch deletion status\nnone: no deletion was triggered\nsuccess: successfully deleted\nnot_found: source branch was not found\nno_permission: user has no permissions for branch deletion\nforbid_default_branch: cannot delete default branch\nforbid_protected_branch: cannot delete protected branch\nforbid_open_pull_requests: cannot delete branch with open pull requests\ninternal_error: unknown internal error happened during branch deletion",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "SubmoduleRepoContent": {
        "title": "SubmoduleRepoContent",
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "description": "URL to the external submodule repository",
            "x-go-name": "URL"
          }
        },
        "description": "Represents a submodule element related information.\nDeprecated: Use RepoSubmodule instead",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "TTLSecurityConfig": {
        "title": "TTLSecurityConfig",
        "type": "object",
        "properties": {
          "allow_infinite_ttl": {
            "type": "boolean",
            "x-go-name": "AllowInfiniteTTL"
          },
          "max_ttl": {
            "type": "string",
            "description": "as duration string 3h12m33s",
            "x-go-name": "MaxTTL"
          }
        },
        "description": "SSH keys limits from app config.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "TreePath": {
        "type": "string",
        "description": "TreePath is a path to the repository content entry",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "UpdateAutolinkSettingsInput": {
        "title": "UpdateAutolinkSettingsInput",
        "type": "object",
        "properties": {
          "is_active": {
            "type": "boolean",
            "description": "If set then issues auto-linking are enabled.",
            "x-go-name": "IsActive"
          },
          "issue_prefix": {
            "type": "string",
            "description": "This prefix appended by alphanumeric string(A-Z, 0-9,-) will generate a link anytime it is found in an issue, pull request or commit.",
            "example": "'DEV-'.",
            "x-go-name": "IssuePrefix"
          },
          "target_url_template": {
            "type": "string",
            "description": "Defines target URL template.\nThe URL must contain <num> for the reference number.",
            "example": "'https://jira.yourproject.com/browse/DEV-<num>'",
            "x-go-name": "TargetUrlTemplate"
          }
        },
        "description": "Represents a repository autolink settings update options.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "UpdateIssueInput": {
        "title": "UpdateIssueInput",
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 128,
            "type": "string",
            "description": "Issue name.",
            "example": "TASK-001",
            "x-go-name": "Name"
          },
          "url": {
            "maxLength": 512,
            "type": "string",
            "description": "Issue external URL.",
            "example": "http://tasks.com/TASK-001",
            "x-go-name": "Url"
          }
        },
        "description": "Represents the user issue update options.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "UpdatePrSettingsInput": {
        "title": "UpdatePrSettingsInput",
        "type": "object",
        "properties": {
          "allow_auto_merge": {
            "type": "boolean",
            "description": "Indicates whether auto merge is allowed for the PR.",
            "x-go-name": "AllowAutoMerge"
          },
          "allow_merge_types_fast_forward": {
            "type": "boolean",
            "description": "Indicates whether fast-forward is allowed as a merge type.",
            "x-go-name": "AllowMergeTypesFastForward"
          },
          "allow_merge_types_merge_commit": {
            "type": "boolean",
            "description": "Indicates whether merge commit is allowed as a merge type.",
            "x-go-name": "AllowMergeTypesMergeCommit"
          },
          "allow_merge_types_squash": {
            "type": "boolean",
            "description": "Indicated whether squash is allowed as a merge type.",
            "x-go-name": "AllowMergeTypesSquash"
          },
          "approvals_min": {
            "type": "integer",
            "description": "Minimum number of assignee approvals needed to merge a PR.",
            "format": "uint64",
            "x-go-name": "ApprovalsMin"
          },
          "block_merging_for_unassigned_changed_files": {
            "type": "boolean",
            "description": "Indicates whether pull request merging should be blocked according to unassigned changed files.",
            "x-go-name": "BlockMergingForUnassignedChangedFiles"
          },
          "block_merging_without_linked_issues": {
            "type": "boolean",
            "description": "Indicates whether pull request merging should be blocked according to no linked issues.",
            "x-go-name": "BlockMergingWithoutLinkedIssues"
          },
          "code_quality_scan": {
            "type": "boolean",
            "description": "Defines the necessity of a successful code quality scan to merge a PR.\nIf False, code quality scan doesn't block the merge.",
            "x-go-name": "CodeQualityScan"
          },
          "create_pr_hook_message": {
            "type": "boolean",
            "description": "If set, the Git CLI displays a web link to create a new PR when a new branch is pushed.",
            "x-go-name": "CreatePrHookMessage"
          },
          "default_assignees": {
            "type": "array",
            "description": "List of default assignee principal names to set for each new PR created.",
            "example": [
              "user1@mail.com",
              "user2"
            ],
            "items": {
              "type": "string"
            },
            "x-go-name": "DefaultAssignees"
          },
          "delete_source_branch_after_merge_by_default": {
            "type": "boolean",
            "description": "Indicates whether the source branch should be deleted after merge by default.",
            "x-go-name": "DeleteSourceBranchAfterMergeByDefault"
          },
          "merge_branch_source_up_to_date": {
            "type": "boolean",
            "description": "Defines the necessity of a successful code quality scan to merge a PR.\nIf False, code quality scan doesn't block the merge.",
            "x-go-name": "MergeBranchSourceUpToDate"
          },
          "rejects_max": {
            "type": "integer",
            "description": "Maximum number of assignee rejects that is acceptable to merge a PR.",
            "format": "uint64",
            "x-go-name": "RejectsMax"
          }
        },
        "description": "Represents a repository pull request settings update options.\n\n# DEPRECATED",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "UpdateProjectInput": {
        "title": "UpdateProjectInput",
        "type": "object",
        "properties": {
          "description": {
            "maxLength": 255,
            "type": "string",
            "description": "Description.",
            "example": "Project does awesome stuff",
            "x-go-name": "Description"
          },
          "full_name": {
            "maxLength": 255,
            "type": "string",
            "description": "Name.",
            "example": "My awesome project",
            "x-go-name": "Name"
          },
          "is_public": {
            "type": "boolean",
            "description": "Is project public or private (default - false).",
            "x-go-name": "IsPublic"
          },
          "lfs_allow": {
            "type": "boolean",
            "description": "Is project has lfs (default - false).",
            "x-go-name": "LFSAllow"
          }
        },
        "description": "Represents the project update options.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "UpdateProjectUsageQuotasSettingsInput": {
        "title": "UpdateProjectUsageQuotasSettingsInput",
        "type": "object",
        "properties": {
          "enable_file_storage_policy_limit": {
            "type": "boolean",
            "description": "Enable soft file size usage quotas setting.",
            "x-go-name": "EnableFileStoragePolicyLimit"
          },
          "enable_repo_storage_policy_limit": {
            "type": "boolean",
            "description": "Enable soft repository usage quotas limit setting.",
            "x-go-name": "EnableRepoStoragePolicyLimit"
          },
          "file_storage_policy_hard_limit": {
            "type": "integer",
            "description": "Hard limit file usage quotas setting.",
            "format": "uint64",
            "x-go-name": "FileStoragePolicyHardLimit"
          },
          "file_storage_policy_soft_limit": {
            "type": "integer",
            "description": "Soft limit file usage quotas setting.",
            "format": "uint64",
            "x-go-name": "FileStoragePolicySoftLimit"
          },
          "repo_storage_policy_hard_limit": {
            "type": "integer",
            "description": "Hard limit repository usage quotas setting.",
            "format": "uint64",
            "x-go-name": "RepoStoragePolicyHardLimit"
          },
          "repo_storage_policy_soft_limit": {
            "type": "integer",
            "description": "Soft limit repository usage quotas setting.",
            "format": "uint64",
            "x-go-name": "RepoStoragePolicySoftLimit"
          }
        },
        "description": "Update project usage quotas settings.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "UpdateProtectedBranchesSettingsInput": {
        "title": "UpdateProtectedBranchesSettingsInput",
        "type": "array",
        "description": "Represents repository protected branches settings update input.",
        "items": {
          "$ref": "#/components/schemas/ProtectedBranchInput"
        },
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "UpdatePullRequestInput": {
        "title": "UpdatePullRequestInput",
        "type": "object",
        "properties": {
          "description": {
            "maxLength": 4000,
            "type": "string",
            "description": "Pull request description to set.",
            "example": "Fix input parsing",
            "x-go-name": "Description"
          },
          "title": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "Pull request title to set.",
            "example": "Bugfix",
            "x-go-name": "Title"
          }
        },
        "description": "Represents a repository pull request update options.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "UpdateRepoPolicyInput": {
        "title": "UpdateRepoPolicyInput",
        "type": "object",
        "properties": {
          "allow_authors_to_approve_their_pull_requests": {
            "$ref": "#/components/schemas/RepoPolicyMode"
          },
          "allow_auto_merge": {
            "type": "boolean",
            "description": "Indicates whether auto merge is allowed for the PR.",
            "x-go-name": "AllowAutoMerge"
          },
          "approvals_min": {
            "type": "integer",
            "description": "Minimum number of assignee approvals needed to merge a PR.",
            "format": "uint64",
            "x-go-name": "ApprovalsMin"
          },
          "block_merging_without_reviewers_assigned_to_changed_files": {
            "$ref": "#/components/schemas/RepoPolicyMode"
          },
          "code_quality_scan_mode": {
            "$ref": "#/components/schemas/RepoPolicyMode"
          },
          "create_pr_hook_message_mode": {
            "$ref": "#/components/schemas/RepoPolicyMode"
          },
          "default_assignees": {
            "type": "array",
            "description": "List of default assignee principal names to set for each new PR created.",
            "example": [
              "user1@mail.com",
              "user2"
            ],
            "items": {
              "type": "string"
            },
            "x-go-name": "DefaultAssignees"
          },
          "delete_source_branch_after_merge_by_default_mode": {
            "$ref": "#/components/schemas/RepoPolicyMode"
          },
          "description": {
            "type": "string",
            "description": "Description pull request setting description.",
            "x-go-name": "Description"
          },
          "is_active": {
            "type": "boolean",
            "description": "IsActive tag which indicates whether the setting is enabled",
            "x-go-name": "IsActive"
          },
          "merge_branch_source_up_to_date_mode": {
            "$ref": "#/components/schemas/RepoPolicyMode"
          },
          "merge_types_fast_forward_mode": {
            "$ref": "#/components/schemas/RepoPolicyMode"
          },
          "merge_types_merge_commit_mode": {
            "$ref": "#/components/schemas/RepoPolicyMode"
          },
          "merge_types_squash_mode": {
            "$ref": "#/components/schemas/RepoPolicyMode"
          },
          "merging_for_unassigned_changed_files_mode": {
            "$ref": "#/components/schemas/RepoPolicyMode"
          },
          "merging_without_linked_issues_mode": {
            "$ref": "#/components/schemas/RepoPolicyMode"
          },
          "name": {
            "type": "string",
            "description": "Name pull request setting name.",
            "x-go-name": "Name"
          },
          "rejects_max": {
            "type": "integer",
            "description": "Maximum number of assignee rejects that is acceptable to merge a PR.",
            "format": "uint64",
            "x-go-name": "RejectsMax"
          },
          "repo_structure_branches_exclude": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RepoStructureId"
            },
            "x-go-name": "RepoStructuresBranchExclude"
          },
          "repo_structure_branches_include": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RepoStructureId"
            },
            "x-go-name": "RepoStructuresBranchInclude"
          },
          "repo_structure_paths_exclude": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RepoStructureId"
            },
            "x-go-name": "RepoStructuresPathExclude"
          },
          "repo_structure_paths_include": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RepoStructureId"
            },
            "x-go-name": "RepoStructuresPathInclude"
          },
          "reviewer_groups": {
            "type": "array",
            "description": "ReviewerGroups represents policy reviewer groups",
            "items": {
              "$ref": "#/components/schemas/PolicyReviewerGroupInput"
            },
            "x-go-name": "ReviewerGroups"
          },
          "setting_builds": {
            "type": "array",
            "description": "SettingBuilds represents policy assembly settings",
            "items": {
              "$ref": "#/components/schemas/PolicyCIBuildUpdateInput"
            },
            "x-go-name": "SettingBuilds"
          }
        },
        "description": "Represents a repository pull request settings update options.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "UpdateRepositoryInput": {
        "title": "UpdateRepositoryInput",
        "type": "object",
        "properties": {
          "default_branch": {
            "maxLength": 250,
            "type": "string",
            "description": "Default branch name (a valid GitRefName).",
            "x-go-name": "DefaultBranch"
          },
          "description": {
            "maxLength": 255,
            "type": "string",
            "description": "Short description.",
            "example": "My awesome repo",
            "x-go-name": "Description"
          },
          "enable_paths_restrictions": {
            "type": "boolean",
            "x-go-name": "EnablePathRestrictions"
          },
          "repo_structure_paths_exclude": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RepoStructureId"
            },
            "x-go-name": "SettingsFilterPathsExclude"
          },
          "repo_structure_paths_include": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RepoStructureId"
            },
            "x-go-name": "SettingsFilterPathsInclude"
          },
          "topics": {
            "type": "array",
            "description": "Repo topics (tags).",
            "example": [
              "go",
              "auth"
            ],
            "items": {
              "type": "string"
            },
            "x-go-name": "Topics"
          }
        },
        "description": "Represents the repository update options.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "UpdateServiceAccountInput": {
        "title": "UpdateServiceAccountInput",
        "type": "object",
        "properties": {
          "description": {
            "maxLength": 512,
            "type": "string",
            "description": "Description.",
            "x-go-name": "Description"
          },
          "login": {
            "type": "string",
            "description": "Login.",
            "x-go-name": "Login"
          },
          "password": {
            "type": "string",
            "description": "Password.",
            "x-go-name": "Password"
          }
        },
        "description": "Represents the project service account update options.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "UpdateUserPublicKeyInput": {
        "title": "UpdateUserPublicKeyInput",
        "type": "object",
        "properties": {
          "data": {
            "type": "string",
            "description": "Public key data.",
            "x-go-name": "Data"
          },
          "name": {
            "maxLength": 100,
            "type": "string",
            "description": "Key name (description).",
            "x-go-name": "Name"
          },
          "ttl": {
            "type": "string",
            "description": "Public key TTL.",
            "format": "duration",
            "example": "10m, 1000s, 4h, 3h12m33s",
            "x-go-name": "TTL"
          }
        },
        "description": "Represents the user public key update options.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "UpdateUserTokenInput": {
        "title": "UpdateUserTokenInput",
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 100,
            "type": "string",
            "description": "Token name (description).",
            "x-go-name": "Name"
          },
          "ttl": {
            "type": "string",
            "description": "Token TTL.",
            "format": "duration",
            "example": "10m, 1000s, 4h, 3h12m33s",
            "x-go-name": "TTL"
          }
        },
        "description": "Represents the user access token update options.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "UpdateWebhookInput": {
        "title": "UpdateWebhookInput",
        "type": "object",
        "properties": {
          "branch_and_tag_filter": {
            "$ref": "#/components/schemas/WebhookBranchAndTagFilter"
          },
          "events": {
            "$ref": "#/components/schemas/WebhookEvents"
          },
          "is_active": {
            "type": "boolean",
            "description": "Is webhook active or disabled.",
            "example": true,
            "x-go-name": "IsActive"
          },
          "name": {
            "type": "string",
            "description": "Unique name.",
            "example": "Telegram Webhook #1",
            "x-go-name": "Name"
          },
          "pull_request_target_branch_filter": {
            "$ref": "#/components/schemas/WebhookPullRequestTargetBranchFilter"
          },
          "receiver": {
            "$ref": "#/components/schemas/WebhookReceiver"
          }
        },
        "description": "Represents webhook update options.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "User": {
        "title": "User",
        "type": "object",
        "properties": {
          "created_at": {
            "type": "string",
            "description": "User created timestamp.",
            "format": "date-time",
            "x-go-name": "CreatedAt"
          },
          "email": {
            "type": "string",
            "description": "Unique primary email.",
            "format": "email",
            "x-go-name": "Email"
          },
          "first_name": {
            "type": "string",
            "description": "First name.",
            "x-go-name": "FirstName"
          },
          "full_name": {
            "type": "string",
            "description": "Full name.",
            "x-go-name": "FullName"
          },
          "last_name": {
            "type": "string",
            "description": "Last name.",
            "x-go-name": "LastName"
          },
          "login": {
            "type": "string",
            "description": "Unique username (login).",
            "x-go-name": "UserName"
          },
          "middle_name": {
            "type": "string",
            "description": "Middle name.",
            "x-go-name": "MiddleName"
          },
          "permissions": {
            "$ref": "#/components/schemas/UserPermissions"
          },
          "principal_name": {
            "type": "string",
            "description": "User principal name.",
            "x-go-name": "PrincipalName"
          }
        },
        "description": "Represents the application user.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "UserLoginsInput": {
        "title": "UserLoginsInput",
        "type": "array",
        "description": "Represents user principal names input.",
        "items": {
          "type": "string"
        },
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "UserPermissions": {
        "title": "UserPermissions",
        "type": "object",
        "properties": {
          "can_create_project": {
            "type": "boolean",
            "description": "CanCreateProject defines access to create projects.",
            "x-go-name": "CanCreateProject"
          },
          "can_edit_advanced_quality_gate": {
            "type": "boolean",
            "description": "CanEditAdvancedQualityGate defines access to delete quality gates and to edit plugins.",
            "x-go-name": "CanEditAdvancedQualityGate"
          },
          "can_edit_advanced_quality_plugin": {
            "type": "boolean",
            "description": "CanEditAdvancedQualityPlugin defines access to activate, deactivate or delete plugin.",
            "x-go-name": "CanEditAdvancedQualityPlugin"
          },
          "can_edit_quality_gate": {
            "type": "boolean",
            "description": "CanEditQualityGate defines access to edit quality gates.",
            "x-go-name": "CanEditQualityGate"
          },
          "can_edit_quality_plugin": {
            "type": "boolean",
            "description": "CanEditQualityPlugin defines access to edit plugin general settings, activate/deactivate plugin rules, etc.",
            "x-go-name": "CanEditQualityPlugin"
          },
          "can_edit_roles": {
            "type": "boolean",
            "description": "CanEditRoles defines access to assign roles, actions.",
            "x-go-name": "CanEditRoles"
          },
          "can_view_knowledge_base": {
            "type": "boolean",
            "description": "CanViewKnowledgeBase defines access to view list of rules and rules itself.",
            "x-go-name": "CanViewKnowledgeBase"
          },
          "can_view_quality_gate": {
            "type": "boolean",
            "description": "CanViewQualityGate defines access to view quality gates.",
            "x-go-name": "CanViewQualityGate"
          },
          "can_view_quality_plugin": {
            "type": "boolean",
            "description": "CanViewQualityPlugin defines access to view plugins and plugin's rules.",
            "x-go-name": "CanViewQualityPlugin"
          },
          "can_view_roles": {
            "type": "boolean",
            "description": "CanViewRoles defines access to view roles, actions.",
            "x-go-name": "CanViewRoles"
          },
          "can_view_self_ssh_key": {
            "type": "boolean",
            "description": "CanViewSelfSshKey defines access to view list of ssh keys itself.",
            "x-go-name": "CanViewSelfSshKey"
          },
          "can_view_self_token": {
            "type": "boolean",
            "description": "CanViewSelfToken defines access to view list of tokens itself.",
            "x-go-name": "CanViewSelfToken"
          },
          "can_view_ssh_key": {
            "type": "boolean",
            "description": "CanViewSshKey defines access to view list of ssh keys.",
            "x-go-name": "CanViewSshKey"
          },
          "can_write_advanced_self_ssh_key": {
            "type": "boolean",
            "description": "CanWriteAdvancedSelfSshKey defines advanced access to edit list of ssh keys itself.",
            "x-go-name": "CanWriteAdvancedSelfSshKey"
          },
          "can_write_advanced_self_token": {
            "type": "boolean",
            "description": "CanWriteAdvancedSelfToken defines advanced access to edit list of tokens itself.",
            "x-go-name": "CanWriteAdvancedSelfToken"
          },
          "can_write_advanced_ssh_key": {
            "type": "boolean",
            "description": "CanWriteAdvancedSshKey defines access to edit list of ssh keys.",
            "x-go-name": "CanWriteAdvancedSshKey"
          },
          "can_write_self_ssh_key": {
            "type": "boolean",
            "description": "CanWriteSelfSshKey defines access to edit list of ssh keys itself.",
            "x-go-name": "CanWriteSelfSshKey"
          },
          "can_write_self_token": {
            "type": "boolean",
            "description": "CanWriteSelfToken defines access to edit list of tokens itself.",
            "x-go-name": "CanWriteSelfToken"
          }
        },
        "description": "Represents user permissions.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "UserPublicFingerprint": {
        "title": "UserPublicFingerprint",
        "type": "string",
        "description": "defines a user public key fingerprint (hash).",
        "x-go-package": "ppsc/common/domain"
      },
      "UserPublicKey": {
        "title": "UserPublicKey",
        "type": "object",
        "properties": {
          "content": {
            "type": "string",
            "description": "Key data.",
            "x-go-name": "Content"
          },
          "created_at": {
            "type": "string",
            "description": "Key created timestamp.",
            "format": "date-time",
            "x-go-name": "CreatedAt"
          },
          "expires_at": {
            "type": "string",
            "description": "Key expiration timestamp.",
            "format": "date-time",
            "example": "2023-05-03T00:00:00+03:00",
            "x-go-name": "ExpiresAt"
          },
          "fingerprint": {
            "$ref": "#/components/schemas/UserPublicFingerprint"
          },
          "is_expired": {
            "type": "boolean",
            "description": "Key expiration flag.",
            "example": true,
            "x-go-name": "IsExpired"
          },
          "name": {
            "type": "string",
            "description": "Name of the key.",
            "x-go-name": "Name"
          },
          "owner_name": {
            "type": "string",
            "description": "Key owner name (username).",
            "x-go-name": "OwnerName"
          }
        },
        "description": "Represents the user public key used for interaction with a repository over SSH.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "UserSuggestion": {
        "title": "UserSuggestion",
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "Unique primary email.",
            "format": "email",
            "x-go-name": "Email"
          },
          "first_name": {
            "type": "string",
            "description": "First name.",
            "x-go-name": "FirstName"
          },
          "full_name": {
            "type": "string",
            "description": "Full name.",
            "x-go-name": "FullName"
          },
          "last_name": {
            "type": "string",
            "description": "Last name.",
            "x-go-name": "LastName"
          },
          "login": {
            "type": "string",
            "description": "User login.",
            "x-go-name": "Login"
          },
          "middle_name": {
            "type": "string",
            "description": "Middle name.",
            "x-go-name": "MiddleName"
          },
          "principal_name": {
            "type": "string",
            "description": "User principal name.",
            "x-go-name": "PrincipalName"
          }
        },
        "description": "Represents the suggestion user.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "UserToken": {
        "title": "UserToken",
        "type": "object",
        "properties": {
          "created_at": {
            "type": "string",
            "description": "Token created timestamp.",
            "format": "date-time",
            "x-go-name": "CreatedAt"
          },
          "expires_at": {
            "type": "string",
            "description": "Token expiration timestamp.",
            "format": "date-time",
            "example": "2023-05-03T00:00:00+03:00",
            "x-go-name": "ExpiresAt"
          },
          "hash": {
            "$ref": "#/components/schemas/UserTokenHash"
          },
          "is_expired": {
            "type": "boolean",
            "description": "Token expiration flag.",
            "example": true,
            "x-go-name": "IsExpired"
          },
          "name": {
            "type": "string",
            "description": "Name of the token.",
            "x-go-name": "Name"
          },
          "suffix": {
            "type": "string",
            "description": "Last eight characters of the token.",
            "x-go-name": "Suffix"
          },
          "token": {
            "type": "string",
            "description": "Token value (returned only on creation).",
            "x-go-name": "Token"
          }
        },
        "description": "Represents the user access token.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "UserTokenHash": {
        "title": "UserTokenHash",
        "type": "string",
        "description": "defines a unique user access token hash (ID).",
        "x-go-package": "ppsc/common/domain"
      },
      "Webhook": {
        "title": "Webhook",
        "type": "object",
        "properties": {
          "branch_and_tag_filter": {
            "$ref": "#/components/schemas/WebhookBranchAndTagFilter"
          },
          "created_at": {
            "type": "string",
            "description": "Creation time.",
            "format": "date-time",
            "example": "2023-04-14T23:00:00Z",
            "x-go-name": "CreatedAt"
          },
          "events": {
            "type": "array",
            "description": "List of events.",
            "example": "[pull_request_status_change]",
            "items": {
              "$ref": "#/components/schemas/WebhookEvent"
            },
            "x-go-name": "Events"
          },
          "id": {
            "$ref": "#/components/schemas/WebhookId"
          },
          "is_active": {
            "type": "boolean",
            "description": "Is webhook active or disabled.",
            "example": true,
            "x-go-name": "IsActive"
          },
          "name": {
            "type": "string",
            "description": "Unique name.",
            "example": "Telegram Webhook #1",
            "x-go-name": "Name"
          },
          "pull_request_target_branch_filter": {
            "$ref": "#/components/schemas/WebhookPullRequestTargetBranchFilter"
          },
          "receiver": {
            "$ref": "#/components/schemas/WebhookReceiver"
          },
          "updated_at": {
            "type": "string",
            "description": "Last update time.",
            "format": "date-time",
            "example": "2023-04-15T23:00:00Z",
            "x-go-name": "UpdatedAt"
          }
        },
        "description": "Represents webhook information.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "WebhookBranchAndTagFilter": {
        "title": "WebhookBranchAndTagFilter",
        "type": "string",
        "description": "Represents webhook branch and tag filter (glob).",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "WebhookEvent": {
        "title": "WebhookEvent",
        "type": "string",
        "description": "Represents webhook event.\npull_request_created: created event, which is guaranteed to trigger once upon pull request creation.\npull_request_open: triggers on some events of pull_request_status_change (pr_status=open, pr_merge_status=ready)\npull_request_commit: triggers on pull request commit\npull_request_merged: triggers on pull request merged\npull_request_closed: triggers on pull request closed\nrepository_push: triggers on push\nrepository_branch_created: triggers on branch created\nrepository_branch_deleted: triggers on branch deleted\nrepository_tag_created: triggers on tag created\nrepository_tag_deleted: triggers on tag deleted",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "WebhookEvents": {
        "title": "WebhookEvents",
        "type": "array",
        "description": "Represents list of WebhookEvent",
        "items": {
          "$ref": "#/components/schemas/WebhookEvent"
        },
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "WebhookId": {
        "type": "integer",
        "format": "int64",
        "x-go-package": "ppsc/common/domain"
      },
      "WebhookInfo": {
        "title": "WebhookInfo",
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/WebhookId"
          },
          "name": {
            "type": "string",
            "x-go-name": "Name"
          }
        },
        "description": "A brief description of the webhooks created for display before deleting the service account.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "WebhookPullRequestTargetBranchFilter": {
        "title": "WebhookPullRequestTargetBranchFilter",
        "type": "string",
        "description": "Represents webhook branch filter (glob).",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "WebhookReceiver": {
        "title": "WebhookReceiver",
        "type": "object",
        "properties": {
          "http": {
            "$ref": "#/components/schemas/WebhookReceiverHttp"
          },
          "jenkins": {
            "$ref": "#/components/schemas/WebhookReceiverJenkins"
          },
          "sfera": {
            "$ref": "#/components/schemas/WebhookReceiverSferaOrch"
          },
          "telegram": {
            "$ref": "#/components/schemas/WebhookReceiverTelegram"
          }
        },
        "description": "Represents event receiver.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "WebhookReceiverHttp": {
        "title": "WebhookReceiverHttp",
        "type": "object",
        "properties": {
          "auth": {
            "$ref": "#/components/schemas/WebhookReceiverHttpAuth"
          },
          "content_type": {
            "type": "string",
            "description": "Request content type.",
            "example": "application/json",
            "x-go-name": "ContentType"
          },
          "method": {
            "type": "string",
            "description": "Request method.",
            "example": "POST",
            "x-go-name": "Method"
          },
          "url": {
            "type": "string",
            "description": "Request URL.",
            "example": "https://ppch.sfera.org/callback/",
            "x-go-name": "Url"
          }
        },
        "description": "Represents http webhook receiver.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "WebhookReceiverHttpAuth": {
        "title": "WebhookReceiverHttpAuth",
        "type": "object",
        "properties": {
          "sfera_channel": {
            "type": "object",
            "properties": {},
            "description": "Authentication via sfera.channel (without credentials).",
            "x-go-name": "SferaChannel"
          }
        },
        "description": "Represents http receiver authentication method.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "WebhookReceiverJenkins": {
        "title": "WebhookReceiverJenkins",
        "type": "object",
        "properties": {
          "api_token": {
            "type": "string",
            "description": "API token",
            "x-go-name": "APIToken"
          },
          "content_type": {
            "type": "string",
            "description": "Request content type",
            "x-go-name": "ContentType"
          },
          "crumb_service_account": {
            "type": "string",
            "description": "Crumb service account name",
            "x-go-name": "CrumbServiceAccount"
          },
          "crumb_url": {
            "type": "string",
            "description": "URL for fetching crumb",
            "x-go-name": "CrumbURL"
          },
          "jenkins_url": {
            "type": "string",
            "description": "Jenkins url",
            "x-go-name": "JenkinsURL"
          },
          "method": {
            "type": "string",
            "description": "Request method",
            "x-go-name": "Method"
          },
          "use_crumb": {
            "type": "boolean",
            "description": "Use crumb toggle",
            "x-go-name": "UseCrumb"
          }
        },
        "description": "Represents jenkins webhook receiver.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "WebhookReceiverSferaOrch": {
        "title": "WebhookReceiverSferaOrch",
        "type": "object",
        "properties": {
          "content_type": {
            "type": "string",
            "description": "Request content type.",
            "example": "application/x-www-form-urlencoded",
            "x-go-name": "ContentType"
          },
          "method": {
            "type": "string",
            "description": "Request method.",
            "example": "POST",
            "x-go-name": "Method"
          },
          "project_id_or_url": {
            "type": "string",
            "description": "Sfera CI/CD project ID or URL.",
            "example": "a7af7636-6d5a-4194-b737-44d7457d9671",
            "x-go-name": "ProjectIdOrUrl"
          },
          "service_account": {
            "type": "string",
            "description": "Service account name (unique within project).",
            "example": "service-account-1",
            "x-go-name": "ServiceAccount"
          }
        },
        "description": "Represents sfera orchestration webhook receiver.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "WebhookReceiverTelegram": {
        "title": "WebhookReceiverTelegram",
        "type": "object",
        "properties": {
          "chat_id": {
            "type": "string",
            "description": "Account/Group chat id.",
            "example": "-1001182736542, @nickname",
            "x-go-name": "ChatId"
          },
          "token": {
            "type": "string",
            "description": "Bot token.",
            "example": "4839574812:AAFD39kkdpWt3ywyRZergyOLMaJhac60qc",
            "x-go-name": "Token"
          }
        },
        "description": "Represents telegram webhook receiver.",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      },
      "dtoPullRequestPolicyReviewerGroup": {
        "type": "object",
        "properties": {
          "allow_approve_by_author_mode": {
            "$ref": "#/components/schemas/RepoPolicyMode"
          },
          "created_at": {
            "type": "string",
            "description": "Creation timestamp",
            "format": "date-time",
            "x-go-name": "CreatedAt"
          },
          "group_id": {
            "type": "string",
            "description": "ID of the reviewer group",
            "x-go-name": "GroupID"
          },
          "group_ldap_key": {
            "type": "string",
            "description": "LDAP key for the group",
            "x-go-name": "GroupLdapKey"
          },
          "group_members": {
            "type": "array",
            "description": "List of group member IDs",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "x-go-name": "GroupMembers"
          },
          "group_name": {
            "type": "string",
            "description": "Name of the reviewer group",
            "x-go-name": "GroupName"
          },
          "group_users": {
            "type": "array",
            "description": "List of group user details",
            "items": {
              "$ref": "#/components/schemas/Assignee"
            },
            "x-go-name": "GroupUsers"
          },
          "id": {
            "type": "integer",
            "description": "Unique identifier of the reviewer group",
            "format": "int64",
            "x-go-name": "ID"
          },
          "is_external": {
            "type": "boolean",
            "description": "Whether this is an external review group",
            "x-go-name": "IsExternal"
          },
          "is_removable": {
            "type": "boolean",
            "description": "Whether this group can be removed",
            "x-go-name": "IsRemovable"
          },
          "is_required": {
            "type": "boolean",
            "description": "Whether this group is required for approval",
            "x-go-name": "IsRequired"
          },
          "merging_for_unassigned_changed_files_mode": {
            "$ref": "#/components/schemas/RepoPolicyMode"
          },
          "number_of_approvals": {
            "type": "integer",
            "description": "Number of required approvals from this group",
            "format": "int64",
            "x-go-name": "NumberOfApprovals"
          },
          "pr_id": {
            "$ref": "#/components/schemas/PullRequestId"
          },
          "pr_policy_id": {
            "type": "integer",
            "description": "ID policy of the pull request",
            "format": "int64",
            "x-go-name": "PullRequestPolicyID"
          },
          "reviewer_id": {
            "type": "integer",
            "description": "ID of the user",
            "format": "int64",
            "x-go-name": "ReviewerID"
          },
          "reviewer_user": {
            "$ref": "#/components/schemas/Assignee"
          },
          "specify_reviewers": {
            "type": "boolean",
            "description": "Whether specific reviewers must be specified",
            "x-go-name": "SpecifyReviewers"
          },
          "updated_at": {
            "type": "string",
            "description": "Last update timestamp",
            "format": "date-time",
            "x-go-name": "UpdatedAt"
          }
        },
        "x-go-name": "PullRequestPolicyReviewerGroup",
        "x-go-package": "ppsc/ppsc-backend/internal/services/dto"
      }
    },
    "responses": {
      "AddPullRequestViewedFileResponse": {
        "description": "",
        "headers": {
          "Body": {
            "schema": {
              "type": "object"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/PullRequestViewedFile"
                },
                "errors": {
                  "type": "array",
                  "description": "List of errors that occurred during the request.",
                  "items": {
                    "$ref": "#/components/schemas/Error"
                  },
                  "x-go-name": "Errors"
                },
                "request_id": {
                  "type": "string",
                  "description": "Unique ID for this request.",
                  "x-go-name": "RequestID"
                },
                "status": {
                  "type": "string",
                  "description": "Response status (HTTP response code as string).\nUseful to distinguish between network 404 and API 404.",
                  "x-go-name": "Status"
                }
              }
            }
          }
        }
      },
      "AssigneeOperationResponse": {
        "description": "",
        "headers": {
          "Body": {
            "schema": {
              "type": "object"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "description": "Data is a list of the usernames added/removed to/from pull request.",
                  "items": {
                    "type": "string"
                  },
                  "x-go-name": "Data"
                },
                "errors": {
                  "type": "array",
                  "description": "List of errors that occurred during the request.",
                  "items": {
                    "$ref": "#/components/schemas/Error"
                  },
                  "x-go-name": "Errors"
                },
                "request_id": {
                  "type": "string",
                  "description": "Unique ID for this request.",
                  "x-go-name": "RequestID"
                },
                "status": {
                  "type": "string",
                  "description": "Response status (HTTP response code as string).\nUseful to distinguish between network 404 and API 404.",
                  "x-go-name": "Status"
                }
              }
            }
          }
        }
      },
      "AutolinkSettingsResponse": {
        "description": "",
        "headers": {
          "Body": {
            "schema": {
              "type": "object"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/AutolinkSettings"
                },
                "page": {
                  "$ref": "#/components/schemas/ResponsePageMeta"
                },
                "request_id": {
                  "type": "string",
                  "description": "Unique ID for this request.",
                  "x-go-name": "RequestID"
                },
                "status": {
                  "type": "string",
                  "description": "Response status (HTTP response code as string).\nUseful to distinguish between network 404 and API 404.",
                  "x-go-name": "Status"
                }
              }
            }
          }
        }
      },
      "CIBuildResponse": {
        "description": "",
        "headers": {
          "Body": {
            "schema": {
              "type": "object"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CIBuild"
                  },
                  "x-go-name": "Data"
                },
                "request_id": {
                  "type": "string",
                  "description": "Unique ID for this request.",
                  "x-go-name": "RequestID"
                },
                "status": {
                  "type": "string",
                  "description": "Response status (HTTP response code as string).\nUseful to distinguish between network 404 and API 404.",
                  "x-go-name": "Status"
                }
              }
            }
          }
        }
      },
      "CheckConnectionWebhookResponse": {
        "description": "",
        "headers": {
          "Body": {
            "schema": {
              "type": "object"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/CheckConnectionWebhook"
                },
                "request_id": {
                  "type": "string",
                  "description": "Unique ID for this request.",
                  "x-go-name": "RequestID"
                },
                "status": {
                  "type": "string",
                  "description": "Response status (HTTP response code as string).\nUseful to distinguish between network 404 and API 404.",
                  "x-go-name": "Status"
                }
              }
            }
          }
        }
      },
      "ConfigResponse": {
        "description": "",
        "headers": {
          "Body": {
            "schema": {
              "type": "object"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/Config"
                },
                "request_id": {
                  "type": "string",
                  "description": "Unique ID for this request.",
                  "x-go-name": "RequestID"
                },
                "status": {
                  "type": "string",
                  "description": "Response status (HTTP response code as string).\nUseful to distinguish between network 404 and API 404.",
                  "x-go-name": "Status"
                }
              }
            }
          }
        }
      },
      "DeleteBranchesResponse": {
        "description": "",
        "headers": {
          "Body": {
            "schema": {
              "type": "object"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/DeleteBranchesInfo"
                },
                "page": {
                  "$ref": "#/components/schemas/ResponsePageMeta"
                },
                "request_id": {
                  "type": "string",
                  "description": "Unique ID for this request.",
                  "x-go-name": "RequestID"
                },
                "status": {
                  "type": "string",
                  "description": "Response status (HTTP response code as string).\nUseful to distinguish between network 404 and API 404.",
                  "x-go-name": "Status"
                }
              }
            }
          }
        }
      },
      "DeleteProjectResponse": {
        "description": "",
        "headers": {
          "Body": {
            "schema": {
              "type": "object"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DeleteAsyncProjectInfo"
                  },
                  "x-go-name": "Data"
                },
                "page": {
                  "$ref": "#/components/schemas/ResponsePageMeta"
                },
                "request_id": {
                  "type": "string",
                  "description": "Unique ID for this request.",
                  "x-go-name": "RequestID"
                },
                "status": {
                  "type": "string",
                  "description": "Response status (HTTP response code as string).\nUseful to distinguish between network 404 and API 404.",
                  "x-go-name": "Status"
                }
              }
            }
          }
        }
      },
      "DeleteRepoResponse": {
        "description": "",
        "headers": {
          "Body": {
            "schema": {
              "type": "object"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/DeleteRepoInfo"
                },
                "request_id": {
                  "type": "string",
                  "description": "Unique ID for this request.",
                  "x-go-name": "RequestID"
                },
                "status": {
                  "type": "string",
                  "description": "Response status (HTTP response code as string).\nUseful to distinguish between network 404 and API 404.",
                  "x-go-name": "Status"
                }
              }
            }
          }
        }
      },
      "DiffResponse": {
        "description": "",
        "headers": {
          "Body": {
            "schema": {
              "type": "object"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/Diff"
                },
                "request_id": {
                  "type": "string",
                  "description": "Unique ID for this request.",
                  "x-go-name": "RequestID"
                },
                "status": {
                  "type": "string",
                  "description": "Response status (HTTP response code as string).\nUseful to distinguish between network 404 and API 404.",
                  "x-go-name": "Status"
                }
              }
            }
          }
        }
      },
      "EmptyResponse": {
        "description": "",
        "headers": {
          "Body": {
            "schema": {
              "type": "object"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "description": "Nothing to see here.",
                  "items": {
                    "type": "object"
                  },
                  "x-go-name": "Data"
                },
                "request_id": {
                  "type": "string",
                  "description": "Unique ID for this request.",
                  "x-go-name": "RequestID"
                },
                "status": {
                  "type": "string",
                  "description": "Response status (HTTP response code as string).\nUseful to distinguish between network 404 and API 404.",
                  "x-go-name": "Status"
                }
              }
            }
          }
        }
      },
      "ErrorResponse": {
        "description": "",
        "headers": {
          "Body": {
            "schema": {
              "type": "object"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "errors": {
                  "type": "array",
                  "description": "List of errors that occurred during the request.",
                  "items": {
                    "$ref": "#/components/schemas/Error"
                  },
                  "x-go-name": "Errors"
                },
                "request_id": {
                  "type": "string",
                  "description": "Unique ID for this request.",
                  "x-go-name": "RequestID"
                },
                "status": {
                  "type": "string",
                  "description": "Response status (HTTP response code as string).\nUseful to distinguish between network 404 and API 404.",
                  "x-go-name": "Status"
                }
              }
            }
          }
        }
      },
      "FavoriteProjectResponse": {
        "description": "",
        "headers": {
          "Body": {
            "schema": {
              "type": "object"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/FavoriteProject"
                },
                "page": {
                  "$ref": "#/components/schemas/ResponsePageMeta"
                },
                "request_id": {
                  "type": "string",
                  "description": "Unique ID for this request.",
                  "x-go-name": "RequestID"
                },
                "status": {
                  "type": "string",
                  "description": "Response status (HTTP response code as string).\nUseful to distinguish between network 404 and API 404.",
                  "x-go-name": "Status"
                }
              }
            }
          }
        }
      },
      "ForkRepoResponse": {
        "description": "",
        "headers": {
          "Body": {
            "schema": {
              "type": "object"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/RepoForkAsyncInfo"
                },
                "page": {
                  "$ref": "#/components/schemas/ResponsePageMeta"
                },
                "request_id": {
                  "type": "string",
                  "description": "Unique ID for this request.",
                  "x-go-name": "RequestID"
                },
                "status": {
                  "type": "string",
                  "description": "Response status (HTTP response code as string).\nUseful to distinguish between network 404 and API 404.",
                  "x-go-name": "Status"
                }
              }
            }
          }
        }
      },
      "IssueResponse": {
        "description": "",
        "headers": {
          "Body": {
            "schema": {
              "type": "object"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/Issue"
                },
                "request_id": {
                  "type": "string",
                  "description": "Unique ID for this request.",
                  "x-go-name": "RequestID"
                },
                "status": {
                  "type": "string",
                  "description": "Response status (HTTP response code as string).\nUseful to distinguish between network 404 and API 404.",
                  "x-go-name": "Status"
                }
              }
            }
          }
        }
      },
      "JobResponse": {
        "description": "",
        "headers": {
          "Body": {
            "schema": {
              "type": "object"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/Job"
                },
                "page": {
                  "$ref": "#/components/schemas/ResponsePageMeta"
                },
                "request_id": {
                  "type": "string",
                  "description": "Unique ID for this request.",
                  "x-go-name": "RequestID"
                },
                "status": {
                  "type": "string",
                  "description": "Response status (HTTP response code as string).\nUseful to distinguish between network 404 and API 404.",
                  "x-go-name": "Status"
                }
              }
            }
          }
        }
      },
      "LabelListResponse": {
        "description": "",
        "headers": {
          "Body": {
            "schema": {
              "type": "object"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Label"
                  },
                  "x-go-name": "Data"
                },
                "request_id": {
                  "type": "string",
                  "description": "Unique ID for this request.",
                  "x-go-name": "RequestID"
                },
                "status": {
                  "type": "string",
                  "description": "Response status (HTTP response code as string).\nUseful to distinguish between network 404 and API 404.",
                  "x-go-name": "Status"
                }
              }
            }
          }
        }
      },
      "LabelResponse": {
        "description": "",
        "headers": {
          "Body": {
            "schema": {
              "type": "object"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/Label"
                },
                "request_id": {
                  "type": "string",
                  "description": "Unique ID for this request.",
                  "x-go-name": "RequestID"
                },
                "status": {
                  "type": "string",
                  "description": "Response status (HTTP response code as string).\nUseful to distinguish between network 404 and API 404.",
                  "x-go-name": "Status"
                }
              }
            }
          }
        }
      },
      "ListFilesByPatternResponse": {
        "description": "",
        "headers": {
          "Body": {
            "schema": {
              "type": "object"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TreePath"
                  },
                  "x-go-name": "Data"
                },
                "request_id": {
                  "type": "string",
                  "description": "Unique ID for this request.",
                  "x-go-name": "RequestID"
                },
                "status": {
                  "type": "string",
                  "description": "Response status (HTTP response code as string).\nUseful to distinguish between network 404 and API 404.",
                  "x-go-name": "Status"
                },
                "warnings": {
                  "type": "array",
                  "description": "List of warnings that occurred during the request.",
                  "example": [
                    {
                      "data": {},
                      "type": "repo_tree_exceeds_limit"
                    }
                  ],
                  "items": {
                    "$ref": "#/components/schemas/ResponseWarning"
                  },
                  "x-go-name": "Warnings"
                }
              }
            }
          }
        }
      },
      "ListGroupsAndReposResponse": {
        "description": "",
        "headers": {
          "Body": {
            "schema": {
              "type": "object"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/Repository"
                },
                "page": {
                  "$ref": "#/components/schemas/ResponsePageMeta"
                },
                "request_id": {
                  "type": "string",
                  "description": "Unique ID for this request.",
                  "x-go-name": "RequestID"
                },
                "status": {
                  "type": "string",
                  "description": "Response status (HTTP response code as string).\nUseful to distinguish between network 404 and API 404.",
                  "x-go-name": "Status"
                }
              }
            }
          }
        }
      },
      "ListOrgReposResponse": {
        "description": "",
        "headers": {
          "Body": {
            "schema": {
              "type": "object"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RepositoryListItem"
                  },
                  "x-go-name": "Data"
                },
                "page": {
                  "$ref": "#/components/schemas/ResponsePageMeta"
                },
                "request_id": {
                  "type": "string",
                  "description": "Unique ID for this request.",
                  "x-go-name": "RequestID"
                },
                "status": {
                  "type": "string",
                  "description": "Response status (HTTP response code as string).\nUseful to distinguish between network 404 and API 404.",
                  "x-go-name": "Status"
                }
              }
            }
          }
        }
      },
      "ListProjectRepoBranchesNames": {
        "description": "",
        "headers": {
          "Body": {
            "schema": {
              "type": "object"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "x-go-name": "Data"
                },
                "request_id": {
                  "type": "string",
                  "description": "Unique ID for this request.",
                  "x-go-name": "RequestID"
                },
                "status": {
                  "type": "string",
                  "description": "Response status (HTTP response code as string).\nUseful to distinguish between network 404 and API 404.",
                  "x-go-name": "Status"
                }
              }
            }
          }
        }
      },
      "ListRepoBranchesEnrichedResponse": {
        "description": "",
        "headers": {
          "Body": {
            "schema": {
              "type": "object"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RepoBranchWithIssue"
                  },
                  "x-go-name": "Data"
                },
                "request_id": {
                  "type": "string",
                  "description": "Unique ID for this request.",
                  "x-go-name": "RequestID"
                },
                "status": {
                  "type": "string",
                  "description": "Response status (HTTP response code as string).\nUseful to distinguish between network 404 and API 404.",
                  "x-go-name": "Status"
                }
              }
            }
          }
        }
      },
      "ListRepoBranchesResponse": {
        "description": "",
        "headers": {
          "Body": {
            "schema": {
              "type": "object"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RepoBranch"
                  },
                  "x-go-name": "Data"
                },
                "request_id": {
                  "type": "string",
                  "description": "Unique ID for this request.",
                  "x-go-name": "RequestID"
                },
                "status": {
                  "type": "string",
                  "description": "Response status (HTTP response code as string).\nUseful to distinguish between network 404 and API 404.",
                  "x-go-name": "Status"
                }
              }
            }
          }
        }
      },
      "ListRepoCommitsResponse": {
        "description": "",
        "headers": {
          "Body": {
            "schema": {
              "type": "object"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RepoCommit"
                  },
                  "x-go-name": "Data"
                },
                "page": {
                  "$ref": "#/components/schemas/ResponsePageMeta"
                },
                "request_id": {
                  "type": "string",
                  "description": "Unique ID for this request.",
                  "x-go-name": "RequestID"
                },
                "status": {
                  "type": "string",
                  "description": "Response status (HTTP response code as string).\nUseful to distinguish between network 404 and API 404.",
                  "x-go-name": "Status"
                }
              }
            }
          }
        }
      },
      "ListRepoForksResponse": {
        "description": "",
        "headers": {
          "Body": {
            "schema": {
              "type": "object"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RepoFork"
                  },
                  "x-go-name": "Data"
                },
                "page": {
                  "$ref": "#/components/schemas/ResponsePageMeta"
                },
                "request_id": {
                  "type": "string",
                  "description": "Unique ID for this request.",
                  "x-go-name": "RequestID"
                },
                "status": {
                  "type": "string",
                  "description": "Response status (HTTP response code as string).\nUseful to distinguish between network 404 and API 404.",
                  "x-go-name": "Status"
                }
              }
            }
          }
        }
      },
      "ListRepoTagsResponse": {
        "description": "",
        "headers": {
          "Body": {
            "schema": {
              "type": "object"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "x-go-name": "Data"
                },
                "page": {
                  "$ref": "#/components/schemas/ResponsePageMeta"
                },
                "request_id": {
                  "type": "string",
                  "description": "Unique ID for this request.",
                  "x-go-name": "RequestID"
                },
                "status": {
                  "type": "string",
                  "description": "Response status (HTTP response code as string).\nUseful to distinguish between network 404 and API 404.",
                  "x-go-name": "Status"
                }
              }
            }
          }
        }
      },
      "ListReviewerGroupsResponse": {
        "description": "",
        "headers": {
          "Body": {
            "schema": {
              "type": "object"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ReviewerGroup"
                  },
                  "x-go-name": "Data"
                },
                "page": {
                  "$ref": "#/components/schemas/ResponsePageMeta"
                },
                "request_id": {
                  "type": "string",
                  "description": "Unique ID for this request.",
                  "x-go-name": "RequestID"
                },
                "status": {
                  "type": "string",
                  "description": "Response status (HTTP response code as string).\nUseful to distinguish between network 404 and API 404.",
                  "x-go-name": "Status"
                }
              }
            }
          }
        }
      },
      "ListServiceAccountEntitiesResponse": {
        "description": "",
        "headers": {
          "Body": {
            "schema": {
              "type": "object"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/ServiceAccountEntities"
                },
                "request_id": {
                  "type": "string",
                  "description": "Unique ID for this request.",
                  "x-go-name": "RequestID"
                },
                "status": {
                  "type": "string",
                  "description": "Response status (HTTP response code as string).\nUseful to distinguish between network 404 and API 404.",
                  "x-go-name": "Status"
                }
              }
            }
          }
        }
      },
      "MergePullRequestResponse": {
        "description": "",
        "headers": {
          "Body": {
            "schema": {
              "type": "object"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/PullRequestMergeResult"
                },
                "request_id": {
                  "type": "string",
                  "description": "Unique ID for this request.",
                  "x-go-name": "RequestID"
                },
                "status": {
                  "type": "string",
                  "description": "Response status (HTTP response code as string).\nUseful to distinguish between network 404 and API 404.",
                  "x-go-name": "Status"
                }
              }
            }
          }
        }
      },
      "MigrationResponse": {
        "description": "",
        "headers": {
          "Body": {
            "schema": {
              "type": "object"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/MigrationJobInfo"
                },
                "request_id": {
                  "type": "string",
                  "description": "Unique ID for this request.",
                  "x-go-name": "RequestID"
                },
                "status": {
                  "type": "string",
                  "description": "Response status (HTTP response code as string).\nUseful to distinguish between network 404 and API 404.",
                  "x-go-name": "Status"
                }
              }
            }
          }
        }
      },
      "MigrationsResponse": {
        "description": "",
        "headers": {
          "Body": {
            "schema": {
              "type": "object"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "request_id": {
                  "type": "string",
                  "description": "Unique ID for this request.",
                  "x-go-name": "RequestID"
                },
                "status": {
                  "type": "string",
                  "description": "Response status (HTTP response code as string).\nUseful to distinguish between network 404 and API 404.",
                  "x-go-name": "Status"
                }
              }
            }
          }
        }
      },
      "MirrorResponse": {
        "description": "",
        "headers": {
          "Body": {
            "schema": {
              "type": "object"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/MirrorSettings"
                },
                "page": {
                  "$ref": "#/components/schemas/ResponsePageMeta"
                },
                "request_id": {
                  "type": "string",
                  "description": "Unique ID for this request.",
                  "x-go-name": "RequestID"
                },
                "status": {
                  "type": "string",
                  "description": "Response status (HTTP response code as string).\nUseful to distinguish between network 404 and API 404.",
                  "x-go-name": "Status"
                }
              }
            }
          }
        }
      },
      "NotificationSubscriptionInfoResponse": {
        "description": "",
        "headers": {
          "Body": {
            "schema": {
              "type": "object"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/NotificationSubscriptionInfo"
                },
                "request_id": {
                  "type": "string",
                  "description": "Unique ID for this request.",
                  "x-go-name": "RequestID"
                },
                "status": {
                  "type": "string",
                  "description": "Response status (HTTP response code as string).\nUseful to distinguish between network 404 and API 404.",
                  "x-go-name": "Status"
                }
              }
            }
          }
        }
      },
      "NotificationSubscriptionResponse": {
        "description": "",
        "headers": {
          "Body": {
            "schema": {
              "type": "object"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/NotificationSubscription"
                },
                "request_id": {
                  "type": "string",
                  "description": "Unique ID for this request.",
                  "x-go-name": "RequestID"
                },
                "status": {
                  "type": "string",
                  "description": "Response status (HTTP response code as string).\nUseful to distinguish between network 404 and API 404.",
                  "x-go-name": "Status"
                }
              }
            }
          }
        }
      },
      "NotificationSubscriptionsResponse": {
        "description": "",
        "headers": {
          "Body": {
            "schema": {
              "type": "object"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NotificationSubscription"
                  },
                  "x-go-name": "Data"
                },
                "page": {
                  "$ref": "#/components/schemas/ResponsePageMeta"
                },
                "request_id": {
                  "type": "string",
                  "description": "Unique ID for this request.",
                  "x-go-name": "RequestID"
                },
                "status": {
                  "type": "string",
                  "description": "Response status (HTTP response code as string).\nUseful to distinguish between network 404 and API 404.",
                  "x-go-name": "Status"
                }
              }
            }
          }
        }
      },
      "PrListSettingsResponse": {
        "description": "",
        "headers": {
          "Body": {
            "schema": {
              "type": "object"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PrSettings"
                  },
                  "x-go-name": "Data"
                },
                "page": {
                  "$ref": "#/components/schemas/ResponsePageMeta"
                },
                "request_id": {
                  "type": "string",
                  "description": "Unique ID for this request.",
                  "x-go-name": "RequestID"
                },
                "status": {
                  "type": "string",
                  "description": "Response status (HTTP response code as string).\nUseful to distinguish between network 404 and API 404.",
                  "x-go-name": "Status"
                }
              }
            }
          }
        }
      },
      "ProjectGroupsResponse": {
        "description": "",
        "headers": {
          "Body": {
            "schema": {
              "type": "object"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Project"
                  },
                  "x-go-name": "Data"
                },
                "page": {
                  "$ref": "#/components/schemas/ResponsePageMeta"
                },
                "request_id": {
                  "type": "string",
                  "description": "Unique ID for this request.",
                  "x-go-name": "RequestID"
                },
                "status": {
                  "type": "string",
                  "description": "Response status (HTTP response code as string).\nUseful to distinguish between network 404 and API 404.",
                  "x-go-name": "Status"
                }
              }
            }
          }
        }
      },
      "ProjectResponse": {
        "description": "",
        "headers": {
          "Body": {
            "schema": {
              "type": "object"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/Project"
                },
                "page": {
                  "$ref": "#/components/schemas/ResponsePageMeta"
                },
                "request_id": {
                  "type": "string",
                  "description": "Unique ID for this request.",
                  "x-go-name": "RequestID"
                },
                "status": {
                  "type": "string",
                  "description": "Response status (HTTP response code as string).\nUseful to distinguish between network 404 and API 404.",
                  "x-go-name": "Status"
                }
              }
            }
          }
        }
      },
      "ProjectUsageQuotasSettingsResponse": {
        "description": "",
        "headers": {
          "Body": {
            "schema": {
              "type": "object"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/ProjectUsageQuotasSettings"
                },
                "page": {
                  "$ref": "#/components/schemas/ResponsePageMeta"
                },
                "request_id": {
                  "type": "string",
                  "description": "Unique ID for this request.",
                  "x-go-name": "RequestID"
                },
                "status": {
                  "type": "string",
                  "description": "Response status (HTTP response code as string).\nUseful to distinguish between network 404 and API 404.",
                  "x-go-name": "Status"
                }
              }
            }
          }
        }
      },
      "ProjectsListResponse": {
        "description": "",
        "headers": {
          "Body": {
            "schema": {
              "type": "object"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Project"
                  },
                  "x-go-name": "Data"
                },
                "page": {
                  "$ref": "#/components/schemas/ResponsePageMeta"
                },
                "request_id": {
                  "type": "string",
                  "description": "Unique ID for this request.",
                  "x-go-name": "RequestID"
                },
                "status": {
                  "type": "string",
                  "description": "Response status (HTTP response code as string).\nUseful to distinguish between network 404 and API 404.",
                  "x-go-name": "Status"
                }
              }
            }
          }
        }
      },
      "ProtectedBranchesSettingsResponse": {
        "description": "",
        "headers": {
          "Body": {
            "schema": {
              "type": "object"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/ProtectedBranchesSettings"
                },
                "page": {
                  "$ref": "#/components/schemas/ResponsePageMeta"
                },
                "request_id": {
                  "type": "string",
                  "description": "Unique ID for this request.",
                  "x-go-name": "RequestID"
                },
                "status": {
                  "type": "string",
                  "description": "Response status (HTTP response code as string).\nUseful to distinguish between network 404 and API 404.",
                  "x-go-name": "Status"
                }
              }
            }
          }
        }
      },
      "PullRequestAuthorsResponse": {
        "description": "",
        "headers": {
          "Body": {
            "schema": {
              "type": "object"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/PullRequestAuthors"
                }
              }
            }
          }
        }
      },
      "PullRequestAutoMergeResponse": {
        "description": "",
        "headers": {
          "Body": {
            "schema": {
              "type": "object"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/PullRequestAutoMerge"
                },
                "request_id": {
                  "type": "string",
                  "description": "Unique ID for this request.",
                  "x-go-name": "RequestID"
                },
                "status": {
                  "type": "string",
                  "description": "Response status (HTTP response code as string).\nUseful to distinguish between network 404 and API 404.",
                  "x-go-name": "Status"
                }
              }
            }
          }
        }
      },
      "PullRequestCountersResponse": {
        "description": "",
        "headers": {
          "Body": {
            "schema": {
              "type": "object"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PullRequestCounters"
                  },
                  "x-go-name": "Data"
                }
              }
            }
          }
        }
      },
      "PullRequestLinkedIssuesResponse": {
        "description": "",
        "headers": {
          "Body": {
            "schema": {
              "type": "object"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LinkedIssue"
                  },
                  "x-go-name": "Data"
                },
                "request_id": {
                  "type": "string",
                  "description": "Unique ID for this request.",
                  "x-go-name": "RequestID"
                },
                "status": {
                  "type": "string",
                  "description": "Response status (HTTP response code as string).\nUseful to distinguish between network 404 and API 404.",
                  "x-go-name": "Status"
                }
              }
            }
          }
        }
      },
      "PullRequestMergeConflictsResponse": {
        "description": "",
        "headers": {
          "Body": {
            "schema": {
              "type": "object"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/PullRequestMergeConflict"
                },
                "request_id": {
                  "type": "string",
                  "description": "Unique ID for this request.",
                  "x-go-name": "RequestID"
                },
                "status": {
                  "type": "string",
                  "description": "Response status (HTTP response code as string).\nUseful to distinguish between network 404 and API 404.",
                  "x-go-name": "Status"
                }
              }
            }
          }
        }
      },
      "PullRequestResponse": {
        "description": "",
        "headers": {
          "Body": {
            "schema": {
              "type": "object"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/PullRequest"
                },
                "request_id": {
                  "type": "string",
                  "description": "Unique ID for this request.",
                  "x-go-name": "RequestID"
                },
                "status": {
                  "type": "string",
                  "description": "Response status (HTTP response code as string).\nUseful to distinguish between network 404 and API 404.",
                  "x-go-name": "Status"
                }
              }
            }
          }
        }
      },
      "PullRequestsActivityListResponse": {
        "description": "",
        "headers": {
          "Body": {
            "schema": {
              "type": "object"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PullRequestActivity"
                  },
                  "x-go-name": "Data"
                },
                "page": {
                  "$ref": "#/components/schemas/ResponsePageMeta"
                }
              }
            }
          }
        }
      },
      "PullRequestsListResponse": {
        "description": "",
        "headers": {
          "Body": {
            "schema": {
              "type": "object"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PullRequest"
                  },
                  "x-go-name": "Data"
                },
                "page": {
                  "$ref": "#/components/schemas/ResponsePageMeta"
                }
              }
            }
          }
        }
      },
      "RepoBranchResponse": {
        "description": "",
        "headers": {
          "Body": {
            "schema": {
              "type": "object"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/RepoBranch"
                },
                "request_id": {
                  "type": "string",
                  "description": "Unique ID for this request.",
                  "x-go-name": "RequestID"
                },
                "status": {
                  "type": "string",
                  "description": "Response status (HTTP response code as string).\nUseful to distinguish between network 404 and API 404.",
                  "x-go-name": "Status"
                }
              }
            }
          }
        }
      },
      "RepoBranchWithMetadataResponse": {
        "description": "",
        "headers": {
          "Body": {
            "schema": {
              "type": "object"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/RepoBranchWithMetadata"
                  },
                  "x-go-name": "Data"
                },
                "request_id": {
                  "type": "string",
                  "description": "Unique ID for this request.",
                  "x-go-name": "RequestID"
                },
                "status": {
                  "type": "string",
                  "description": "Response status (HTTP response code as string).\nUseful to distinguish between network 404 and API 404.",
                  "x-go-name": "Status"
                }
              }
            }
          }
        }
      },
      "RepoCommitResponse": {
        "description": "",
        "headers": {
          "Body": {
            "schema": {
              "type": "object"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/RepoCommit"
                },
                "request_id": {
                  "type": "string",
                  "description": "Unique ID for this request.",
                  "x-go-name": "RequestID"
                },
                "status": {
                  "type": "string",
                  "description": "Response status (HTTP response code as string).\nUseful to distinguish between network 404 and API 404.",
                  "x-go-name": "Status"
                }
              }
            }
          }
        }
      },
      "RepoContentResponse": {
        "description": "",
        "headers": {
          "Body": {
            "schema": {
              "type": "object"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RepoContent"
                  },
                  "x-go-name": "Data"
                },
                "request_id": {
                  "type": "string",
                  "description": "Unique ID for this request.",
                  "x-go-name": "RequestID"
                },
                "status": {
                  "type": "string",
                  "description": "Response status (HTTP response code as string).\nUseful to distinguish between network 404 and API 404.",
                  "x-go-name": "Status"
                }
              }
            }
          }
        }
      },
      "RepoFileBlameResponse": {
        "description": "",
        "headers": {
          "Body": {
            "schema": {
              "type": "object"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LineBlameInfo"
                  },
                  "x-go-name": "Data"
                },
                "page": {
                  "$ref": "#/components/schemas/ResponsePageMeta"
                },
                "request_id": {
                  "type": "string",
                  "description": "Unique ID for this request.",
                  "x-go-name": "RequestID"
                },
                "status": {
                  "type": "string",
                  "description": "Response status (HTTP response code as string).\nUseful to distinguish between network 404 and API 404.",
                  "x-go-name": "Status"
                }
              }
            }
          }
        }
      },
      "RepoFileResponse": {
        "description": "",
        "headers": {
          "Body": {
            "schema": {
              "type": "object"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/RepoFile"
                },
                "request_id": {
                  "type": "string",
                  "description": "Unique ID for this request.",
                  "x-go-name": "RequestID"
                },
                "status": {
                  "type": "string",
                  "description": "Response status (HTTP response code as string).\nUseful to distinguish between network 404 and API 404.",
                  "x-go-name": "Status"
                }
              }
            }
          }
        }
      },
      "RepoFilesResponse": {
        "description": "",
        "headers": {
          "Body": {
            "schema": {
              "type": "object"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/RepoFile"
                  },
                  "x-go-name": "Data"
                },
                "request_id": {
                  "type": "string",
                  "description": "Unique ID for this request.",
                  "x-go-name": "RequestID"
                },
                "status": {
                  "type": "string",
                  "description": "Response status (HTTP response code as string).\nUseful to distinguish between network 404 and API 404.",
                  "x-go-name": "Status"
                }
              }
            }
          }
        }
      },
      "RepoPolicyListResponse": {
        "description": "",
        "headers": {
          "Body": {
            "schema": {
              "type": "object"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RepoPolicy"
                  },
                  "x-go-name": "Data"
                },
                "page": {
                  "$ref": "#/components/schemas/ResponsePageMeta"
                },
                "request_id": {
                  "type": "string",
                  "description": "Unique ID for this request.",
                  "x-go-name": "RequestID"
                },
                "status": {
                  "type": "string",
                  "description": "Response status (HTTP response code as string).\nUseful to distinguish between network 404 and API 404.",
                  "x-go-name": "Status"
                }
              }
            }
          }
        }
      },
      "RepoPolicyResponse": {
        "description": "",
        "headers": {
          "Body": {
            "schema": {
              "type": "object"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/RepoPolicy"
                },
                "request_id": {
                  "type": "string",
                  "description": "Unique ID for this request.",
                  "x-go-name": "RequestID"
                },
                "status": {
                  "type": "string",
                  "description": "Response status (HTTP response code as string).\nUseful to distinguish between network 404 and API 404.",
                  "x-go-name": "Status"
                }
              }
            }
          }
        }
      },
      "RepoResponse": {
        "description": "",
        "headers": {
          "Body": {
            "schema": {
              "type": "object"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/Repository"
                },
                "page": {
                  "$ref": "#/components/schemas/ResponsePageMeta"
                },
                "request_id": {
                  "type": "string",
                  "description": "Unique ID for this request.",
                  "x-go-name": "RequestID"
                },
                "status": {
                  "type": "string",
                  "description": "Response status (HTTP response code as string).\nUseful to distinguish between network 404 and API 404.",
                  "x-go-name": "Status"
                }
              }
            }
          }
        }
      },
      "RepoSearchResponse": {
        "description": "",
        "headers": {
          "Body": {
            "schema": {
              "type": "object"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "Data": {
                  "$ref": "#/components/schemas/SearchResult"
                },
                "request_id": {
                  "type": "string",
                  "description": "Unique ID for this request.",
                  "x-go-name": "RequestID"
                },
                "status": {
                  "type": "string",
                  "description": "Response status (HTTP response code as string).\nUseful to distinguish between network 404 and API 404.",
                  "x-go-name": "Status"
                }
              }
            }
          }
        }
      },
      "RepoTreeMetadataResponse": {
        "description": "",
        "headers": {
          "Body": {
            "schema": {
              "type": "object"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/RepoTreeNodeMetadata"
                  },
                  "x-go-name": "Data"
                },
                "request_id": {
                  "type": "string",
                  "description": "Unique ID for this request.",
                  "x-go-name": "RequestID"
                },
                "status": {
                  "type": "string",
                  "description": "Response status (HTTP response code as string).\nUseful to distinguish between network 404 and API 404.",
                  "x-go-name": "Status"
                },
                "warnings": {
                  "type": "array",
                  "description": "List of warnings that occurred during the request.",
                  "example": [
                    {
                      "data": {},
                      "type": "repo_tree_exceeds_limit"
                    }
                  ],
                  "items": {
                    "$ref": "#/components/schemas/ResponseWarning"
                  },
                  "x-go-name": "Warnings"
                }
              }
            }
          }
        }
      },
      "RepoTreeResponse": {
        "description": "",
        "headers": {
          "Body": {
            "schema": {
              "type": "object"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RepoTreeNode"
                  },
                  "x-go-name": "Data"
                },
                "request_id": {
                  "type": "string",
                  "description": "Unique ID for this request.",
                  "x-go-name": "RequestID"
                },
                "status": {
                  "type": "string",
                  "description": "Response status (HTTP response code as string).\nUseful to distinguish between network 404 and API 404.",
                  "x-go-name": "Status"
                },
                "warnings": {
                  "type": "array",
                  "description": "List of warnings that occurred during the request.",
                  "example": [
                    {
                      "data": {},
                      "type": "repo_tree_exceeds_limit"
                    }
                  ],
                  "items": {
                    "$ref": "#/components/schemas/ResponseWarning"
                  },
                  "x-go-name": "Warnings"
                }
              }
            }
          }
        }
      },
      "RepoUsageQuotasResponse": {
        "description": "",
        "headers": {
          "Body": {
            "schema": {
              "type": "object"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/RepoUsageQuotas"
                },
                "request_id": {
                  "type": "string",
                  "description": "Unique ID for this request.",
                  "x-go-name": "RequestID"
                },
                "status": {
                  "type": "string",
                  "description": "Response status (HTTP response code as string).\nUseful to distinguish between network 404 and API 404.",
                  "x-go-name": "Status"
                }
              }
            }
          }
        }
      },
      "RepositorySettingFiltersResponse": {
        "description": "",
        "headers": {
          "Body": {
            "schema": {
              "type": "object"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RepoStructure"
                  },
                  "x-go-name": "Data"
                },
                "request_id": {
                  "type": "string",
                  "description": "Unique ID for this request.",
                  "x-go-name": "RequestID"
                },
                "status": {
                  "type": "string",
                  "description": "Response status (HTTP response code as string).\nUseful to distinguish between network 404 and API 404.",
                  "x-go-name": "Status"
                }
              }
            }
          }
        }
      },
      "RepositorySettingsFilterResponse": {
        "description": "",
        "headers": {
          "Body": {
            "schema": {
              "type": "object"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/RepoStructure"
                },
                "request_id": {
                  "type": "string",
                  "description": "Unique ID for this request.",
                  "x-go-name": "RequestID"
                },
                "status": {
                  "type": "string",
                  "description": "Response status (HTTP response code as string).\nUseful to distinguish between network 404 and API 404.",
                  "x-go-name": "Status"
                }
              }
            }
          }
        }
      },
      "ReviewerGroupResponse": {
        "description": "",
        "headers": {
          "Body": {
            "schema": {
              "type": "object"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/ReviewerGroup"
                },
                "request_id": {
                  "type": "string",
                  "description": "Unique ID for this request.",
                  "x-go-name": "RequestID"
                },
                "status": {
                  "type": "string",
                  "description": "Response status (HTTP response code as string).\nUseful to distinguish between network 404 and API 404.",
                  "x-go-name": "Status"
                }
              }
            }
          }
        }
      },
      "SearchSettingsResponse": {
        "description": "",
        "headers": {
          "Body": {
            "schema": {
              "type": "object"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/SearchSettings"
                },
                "request_id": {
                  "type": "string",
                  "description": "Unique ID for this request.",
                  "x-go-name": "RequestID"
                },
                "status": {
                  "type": "string",
                  "description": "Response status (HTTP response code as string).\nUseful to distinguish between network 404 and API 404.",
                  "x-go-name": "Status"
                }
              }
            }
          }
        }
      },
      "ServiceAccountResponse": {
        "description": "",
        "headers": {
          "Body": {
            "schema": {
              "type": "object"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/ServiceAccount"
                },
                "request_id": {
                  "type": "string",
                  "description": "Unique ID for this request.",
                  "x-go-name": "RequestID"
                },
                "status": {
                  "type": "string",
                  "description": "Response status (HTTP response code as string).\nUseful to distinguish between network 404 and API 404.",
                  "x-go-name": "Status"
                }
              }
            }
          }
        }
      },
      "ServiceAccountsListResponse": {
        "description": "",
        "headers": {
          "Body": {
            "schema": {
              "type": "object"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ServiceAccount"
                  },
                  "x-go-name": "Data"
                },
                "request_id": {
                  "type": "string",
                  "description": "Unique ID for this request.",
                  "x-go-name": "RequestID"
                },
                "status": {
                  "type": "string",
                  "description": "Response status (HTTP response code as string).\nUseful to distinguish between network 404 and API 404.",
                  "x-go-name": "Status"
                }
              }
            }
          }
        }
      },
      "ServiceInformationResponse": {
        "description": "",
        "headers": {
          "Body": {
            "schema": {
              "type": "object"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ServiceInformation"
                  },
                  "x-go-name": "Data"
                },
                "request_id": {
                  "type": "string",
                  "description": "Unique ID for this request.",
                  "x-go-name": "RequestID"
                },
                "status": {
                  "type": "string",
                  "description": "Response status (HTTP response code as string).\nUseful to distinguish between network 404 and API 404.",
                  "x-go-name": "Status"
                }
              }
            }
          }
        }
      },
      "SimpleUserListResponse": {
        "description": "",
        "headers": {
          "Body": {
            "schema": {
              "type": "object"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SimpleUser"
                  },
                  "x-go-name": "Data"
                },
                "request_id": {
                  "type": "string",
                  "description": "Unique ID for this request.",
                  "x-go-name": "RequestID"
                },
                "status": {
                  "type": "string",
                  "description": "Response status (HTTP response code as string).\nUseful to distinguish between network 404 and API 404.",
                  "x-go-name": "Status"
                }
              }
            }
          }
        }
      },
      "TagResponse": {
        "description": "",
        "headers": {
          "Body": {
            "schema": {
              "type": "object"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/RepoTag"
                },
                "page": {
                  "$ref": "#/components/schemas/ResponsePageMeta"
                },
                "request_id": {
                  "type": "string",
                  "description": "Unique ID for this request.",
                  "x-go-name": "RequestID"
                },
                "status": {
                  "type": "string",
                  "description": "Response status (HTTP response code as string).\nUseful to distinguish between network 404 and API 404.",
                  "x-go-name": "Status"
                }
              }
            }
          }
        }
      },
      "UserPublicKeyResponse": {
        "description": "",
        "headers": {
          "Body": {
            "schema": {
              "type": "object"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/UserPublicKey"
                },
                "page": {
                  "$ref": "#/components/schemas/ResponsePageMeta"
                },
                "request_id": {
                  "type": "string",
                  "description": "Unique ID for this request.",
                  "x-go-name": "RequestID"
                },
                "status": {
                  "type": "string",
                  "description": "Response status (HTTP response code as string).\nUseful to distinguish between network 404 and API 404.",
                  "x-go-name": "Status"
                }
              }
            }
          }
        }
      },
      "UserPublicKeysListResponse": {
        "description": "",
        "headers": {
          "Body": {
            "schema": {
              "type": "object"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserPublicKey"
                  },
                  "x-go-name": "Data"
                },
                "page": {
                  "$ref": "#/components/schemas/ResponsePageMeta"
                },
                "request_id": {
                  "type": "string",
                  "description": "Unique ID for this request.",
                  "x-go-name": "RequestID"
                },
                "status": {
                  "type": "string",
                  "description": "Response status (HTTP response code as string).\nUseful to distinguish between network 404 and API 404.",
                  "x-go-name": "Status"
                }
              }
            }
          }
        }
      },
      "UserResponse": {
        "description": "",
        "headers": {
          "Body": {
            "schema": {
              "type": "object"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/User"
                },
                "page": {
                  "$ref": "#/components/schemas/ResponsePageMeta"
                },
                "request_id": {
                  "type": "string",
                  "description": "Unique ID for this request.",
                  "x-go-name": "RequestID"
                },
                "status": {
                  "type": "string",
                  "description": "Response status (HTTP response code as string).\nUseful to distinguish between network 404 and API 404.",
                  "x-go-name": "Status"
                }
              }
            }
          }
        }
      },
      "UserSuggestionsResponse": {
        "description": "",
        "headers": {
          "Body": {
            "schema": {
              "type": "object"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserSuggestion"
                  },
                  "x-go-name": "Data"
                },
                "page": {
                  "$ref": "#/components/schemas/ResponsePageMeta"
                }
              }
            }
          }
        }
      },
      "UserTokenCheckResponse": {
        "description": "",
        "headers": {
          "Body": {
            "schema": {
              "type": "object"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "object",
                  "properties": {
                    "token": {
                      "$ref": "#/components/schemas/UserToken"
                    },
                    "user": {
                      "$ref": "#/components/schemas/SimpleUser"
                    }
                  },
                  "x-go-name": "Data"
                },
                "request_id": {
                  "type": "string",
                  "description": "Unique ID for this request.",
                  "x-go-name": "RequestID"
                },
                "status": {
                  "type": "string",
                  "description": "Response status (HTTP response code as string).\nUseful to distinguish between network 404 and API 404.",
                  "x-go-name": "Status"
                }
              }
            }
          }
        }
      },
      "UserTokenResponse": {
        "description": "",
        "headers": {
          "Body": {
            "schema": {
              "type": "object"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/UserToken"
                },
                "page": {
                  "$ref": "#/components/schemas/ResponsePageMeta"
                },
                "request_id": {
                  "type": "string",
                  "description": "Unique ID for this request.",
                  "x-go-name": "RequestID"
                },
                "status": {
                  "type": "string",
                  "description": "Response status (HTTP response code as string).\nUseful to distinguish between network 404 and API 404.",
                  "x-go-name": "Status"
                }
              }
            }
          }
        }
      },
      "UserTokensListResponse": {
        "description": "",
        "headers": {
          "Body": {
            "schema": {
              "type": "object"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserToken"
                  },
                  "x-go-name": "Data"
                },
                "page": {
                  "$ref": "#/components/schemas/ResponsePageMeta"
                },
                "request_id": {
                  "type": "string",
                  "description": "Unique ID for this request.",
                  "x-go-name": "RequestID"
                },
                "status": {
                  "type": "string",
                  "description": "Response status (HTTP response code as string).\nUseful to distinguish between network 404 and API 404.",
                  "x-go-name": "Status"
                }
              }
            }
          }
        }
      },
      "UsersListResponse": {
        "description": "",
        "headers": {
          "Body": {
            "schema": {
              "type": "object"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  },
                  "x-go-name": "Data"
                },
                "page": {
                  "$ref": "#/components/schemas/ResponsePageMeta"
                },
                "request_id": {
                  "type": "string",
                  "description": "Unique ID for this request.",
                  "x-go-name": "RequestID"
                },
                "status": {
                  "type": "string",
                  "description": "Response status (HTTP response code as string).\nUseful to distinguish between network 404 and API 404.",
                  "x-go-name": "Status"
                }
              }
            }
          }
        }
      },
      "ViewedFilesResponse": {
        "description": "",
        "headers": {
          "Body": {
            "schema": {
              "type": "object"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PullRequestViewedFile"
                  },
                  "x-go-name": "Data"
                },
                "errors": {
                  "type": "array",
                  "description": "List of errors that occurred during the request.",
                  "items": {
                    "$ref": "#/components/schemas/Error"
                  },
                  "x-go-name": "Errors"
                },
                "request_id": {
                  "type": "string",
                  "description": "Unique ID for this request.",
                  "x-go-name": "RequestID"
                },
                "status": {
                  "type": "string",
                  "description": "Response status (HTTP response code as string).\nUseful to distinguish between network 404 and API 404.",
                  "x-go-name": "Status"
                }
              }
            }
          }
        }
      },
      "WebhookResponse": {
        "description": "",
        "headers": {
          "Body": {
            "schema": {
              "type": "object"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/Webhook"
                },
                "request_id": {
                  "type": "string",
                  "description": "Unique ID for this request.",
                  "x-go-name": "RequestID"
                },
                "status": {
                  "type": "string",
                  "description": "Response status (HTTP response code as string).\nUseful to distinguish between network 404 and API 404.",
                  "x-go-name": "Status"
                }
              }
            }
          }
        }
      },
      "WebhooksListResponse": {
        "description": "",
        "headers": {
          "Body": {
            "schema": {
              "type": "object"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Webhook"
                  },
                  "x-go-name": "Data"
                },
                "page": {
                  "$ref": "#/components/schemas/ResponsePageMeta"
                }
              }
            }
          }
        }
      }
    },
    "securitySchemes": {
      "AuthorizationHeaderToken": {
        "type": "apiKey",
        "description": "Sfera auth service access token must be prepended with \"Bearer\" followed by a space.",
        "name": "Authorization",
        "in": "header"
      },
      "BasicAuth": {
        "type": "http",
        "description": "Login/Token pair.",
        "scheme": "basic"
      }
    }
  },
  "x-original-swagger-version": "2.0"
}