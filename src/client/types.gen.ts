// This file is auto-generated by @hey-api/openapi-ts

export type ClientOptions = {
    baseURL: `${string}://${string}/app/sourcecode/api/api/v2` | (string & {});
};

/**
 * ApplyRepositoryPatchInput
 *
 * Represents the repository apply patch options.
 */
export type ApplyRepositoryPatchInput = {
    /**
     * Patch content (base64 encoded).
     */
    content: string;
    /**
     * Commit ID this patch is based on.
     * Might be empty if the repo is not initialized (empty).
     */
    last_commit_id?: string;
    /**
     * Commit message.
     */
    message: string;
    /**
     * Target branch name (will be created if it doesn't exist).
     */
    target_branch: string;
};

/**
 * Assignee
 *
 * Represents pull request assignee information.
 */
export type Assignee = {
    /**
     * Decision.
     * pending AssigneeDecisionPending  No decision yet.
     * approve AssigneeDecisionApprove  Pull request approved.
     * reject AssigneeDecisionReject  Pull request rejected.
     */
    decision?: 'pending' | 'approve' | 'reject';
    /**
     * Unique primary email.
     */
    email?: string;
    /**
     * First name.
     */
    first_name?: string;
    /**
     * Full name.
     */
    full_name?: string;
    /**
     * Last name.
     */
    last_name?: string;
    /**
     * Unique username (login).
     */
    login?: string;
    /**
     * Middle name.
     */
    middle_name?: string;
    /**
     * User principal name.
     */
    principal_name?: string;
};

/**
 * AssigneeDecisionInput
 *
 * Represents a repository pull request assignee decision input model.
 */
export type AssigneeDecisionInput = {
    decision?: 'pending' | 'approve' | 'reject';
};

/**
 * AutoMergeInput
 *
 * # Represents pull request's auto merge configuration input
 */
export type AutoMergeInput = {
    /**
     * Pull request's commit message
     */
    commit_message?: string;
    /**
     * Delete source branch option for merged pull request
     */
    delete_source_branch?: boolean;
    /**
     * On/Off toggler
     */
    is_on?: boolean;
    /**
     * Pull request's merge style
     * merge PullRequestMergeStyleMerge  Non fast-forward merge source into target.
     * rebase PullRequestMergeStyleRebase  Rebase a source onto a target and do fast-forward merge.
     * fast-forward-only PullRequestMergeStyleFastForward  Fast-forward only merge.
     * squash PullRequestMergeStyleSquash  Squash commits into single commit and do non fast-forward merge.
     * rebase-merge PullRequestMergeStyleRebaseMerge  Rebase a source into target and do non fast-forward merge.
     * manually-merged PullRequestMergeStyleManuallyMerged  Pull request has been merged manually, just mark it as merged directly.
     */
    merge_style?: 'merge' | 'rebase' | 'fast-forward-only' | 'squash' | 'rebase-merge' | 'manually-merged';
};

/**
 * AutoMergeStatus
 *
 * Represents pull request auto merge status.
 * pending
 * error
 * completed
 */
export type AutoMergeStatus = string;

/**
 * AutoMergeUpdateInput
 *
 * # Represents pull request's auto merge update input
 */
export type AutoMergeUpdateInput = {
    /**
     * Pull request's commit message
     */
    commit_message?: string;
    /**
     * Delete source branch option for merged pull request
     */
    delete_source_branch?: boolean;
    /**
     * On/Off toggler
     */
    is_on?: boolean;
    /**
     * Pull request's merge style
     * merge PullRequestMergeStyleMerge  Non fast-forward merge source into target.
     * rebase PullRequestMergeStyleRebase  Rebase a source onto a target and do fast-forward merge.
     * fast-forward-only PullRequestMergeStyleFastForward  Fast-forward only merge.
     * squash PullRequestMergeStyleSquash  Squash commits into single commit and do non fast-forward merge.
     * rebase-merge PullRequestMergeStyleRebaseMerge  Rebase a source into target and do non fast-forward merge.
     * manually-merged PullRequestMergeStyleManuallyMerged  Pull request has been merged manually, just mark it as merged directly.
     */
    merge_style?: 'merge' | 'rebase' | 'fast-forward-only' | 'squash' | 'rebase-merge' | 'manually-merged';
};

/**
 * AutolinkSettings
 *
 * Represents a repository autolink settings.
 */
export type AutolinkSettings = {
    /**
     * If set then issues auto-linking are enabled.
     */
    is_active?: boolean;
    /**
     * This prefix appended by alphanumeric string(A-Z, 0-9,-) will generate a link anytime it is found in an issue, pull request or commit.
     */
    issue_prefix?: string;
    /**
     * Defines target URL template.
     * The URL must contain <num> for the reference number.
     */
    target_url_template?: string;
    /**
     * Settings updated timestamp.
     */
    updated_at?: string;
};

/**
 * BranchWithMetadataInput
 *
 * Represents a input for getting branch metadata.
 */
export type BranchWithMetadataInput = {
    /**
     * List of branches to get metadata
     */
    branches: Array<string>;
};

/**
 * CIBuild is a common response object.
 */
export type CiBuild = {
    build_number?: number;
    build_url?: string;
    commit_id?: Sha1;
    created_at?: string;
    slug?: RepoSlug;
    source_branch?: string;
    status?: CiBuildStatus;
};

/**
 * CIBuildConfig
 *
 * CIBuild settings from app config.
 */
export type CiBuildConfig = {
    urls?: Array<string>;
};

/**
 * CIBuildStatus
 *
 * Represents pull request auto merge status.
 * BUILDING
 * IN_QUEUE
 * IN_PROGRESS
 * INPUT_WAIT
 * SUCCESS
 * ABORTED
 * FAILURE
 * UNSTABLE
 */
export type CiBuildStatus = string;

/**
 * CheckConnectionWebhook
 *
 * Represents test connection report.
 */
export type CheckConnectionWebhook = {
    error?: string;
    error_source?: CheckConnectionWebhookErrorSource;
    status?: CheckConnectionWebhookStatus;
};

/**
 * CheckConnectionWebhookErrorSource
 *
 * Сontains the source of the response from where the error message came.
 * Represents webhook source error.
 * sfera_service_account: The service account could not receive the token.
 * sfera_ci_authentication: The CI/CD was not authenticated.
 * sfera_ci_permissions: There are no rights in CI/CD.
 * sfera_ci_project_not_found: The project was not found in CI/CD.
 * sfera_ci_generic_error: There is a secondary error in CI/CD.
 */
export type CheckConnectionWebhookErrorSource = string;

export type CheckConnectionWebhookInput = WebhookReceiver;

/**
 * CheckConnectionWebhookStatus
 *
 * Сontains the status of the response from the test connection to sfera.CI/CD.
 * Represents webhook status error.
 * succeed: Successful connection to sfera.CI/CD.
 * error: Error checking the test connection to sfera.CI/CD.
 */
export type CheckConnectionWebhookStatus = string;

/**
 * CloneLinks
 *
 * Represents repository clone links info.
 */
export type CloneLinks = {
    /**
     * HTTPS is a link for cloning repo using HTTPS
     */
    https?: string;
    /**
     * SSH is a link for cloning repo using SSH
     */
    ssh?: string;
};

/**
 * CommitPerson
 *
 * Represents a Git author/committer.
 */
export type CommitPerson = {
    /**
     * User email.
     */
    email?: string;
    /**
     * User name.
     */
    name?: string;
    /**
     * Create or commit time.
     */
    when?: string;
};

/**
 * Config
 *
 * Limits from app config.
 */
export type Config = {
    ci_build?: CiBuildConfig;
    repo?: RepoConfig;
    security?: SecurityConfig;
};

/**
 * CreateBranchInput
 *
 * Represents a repository branch create options.
 */
export type CreateBranchInput = {
    /**
     * Branch to be used as base for the new branch (default repo branch is used if not specified)
     */
    base?: string;
    /**
     * New branch name
     */
    name: string;
};

/**
 * CreateForkInput
 *
 * Represents a repository fork creation options.
 */
export type CreateForkInput = {
    /**
     * Fork project key
     */
    destination_project_key: string;
    /**
     * Short description
     */
    destination_repo_description?: string;
    /**
     * Fork repository name
     */
    destination_repo_name: string;
};

/**
 * CreateIssueInput
 *
 * Represents the user issue create options.
 */
export type CreateIssueInput = {
    /**
     * Branch name.
     */
    branch: string;
    /**
     * Issue name.
     */
    name: string;
    /**
     * Issue external URL.
     */
    url?: string;
};

/**
 * CreateOrUpdateAutolinkSettingsInput
 *
 * Represents a repository autolink settings create/update options.
 */
export type CreateOrUpdateAutolinkSettingsInput = {
    /**
     * If set then issues auto-linking are enabled.
     */
    is_active: boolean;
    /**
     * This prefix appended by alphanumeric string(A-Z, 0-9,-) will generate a link anytime it is found in an issue, pull request or commit.
     */
    issue_prefix: string;
    /**
     * Defines target URL template.
     * The URL must contain <num> for the reference number.
     */
    target_url_template: string;
};

/**
 * CreateProjectInput
 *
 * Represents the project create options.
 */
export type CreateProjectInput = {
    /**
     * Description.
     */
    description?: string;
    /**
     * Name.
     */
    full_name: string;
    /**
     * Is project public or private (default - false).
     */
    is_public?: boolean;
    /**
     * Is project has lfs.
     */
    lfs_allow?: boolean;
    /**
     * Unique project key.
     */
    name: string;
    /**
     * ParentID a parent's group or project identifier
     */
    parent_id?: number;
};

/**
 * CreatePullRequestInput
 *
 * Represents repository pull request create options.
 */
export type CreatePullRequestInput = {
    /**
     * List of pull request logins
     */
    assignees?: Array<string>;
    /**
     * Pull request description
     */
    description?: string;
    idempotency_key?: PullRequestIdempotencyKey;
    /**
     * Branch name of the pull request source (source is merged to the target)
     */
    source_branch?: string;
    source_slug?: RepoSlug;
    /**
     * Branch name of the pull request target (source is merged to the target)
     */
    target_branch?: string;
    /**
     * Pull request title
     */
    title?: string;
};

/**
 * CreateRepositoryInput
 *
 * Represents the repository create options.
 */
export type CreateRepositoryInput = {
    /**
     * Default branch name (a valid GitRefName).
     */
    default_branch?: string;
    /**
     * Short description.
     */
    description?: string;
    /**
     * Initialize the readme file (default - false).
     */
    initialize_readme?: boolean;
    /**
     * Unique repository name.
     */
    name: string;
};

/**
 * CreateServiceAccountInput
 *
 * Represents the project service account create options.
 */
export type CreateServiceAccountInput = {
    /**
     * Description.
     */
    description?: string;
    /**
     * Login.
     */
    login: string;
    /**
     * Name.
     */
    name: string;
    /**
     * Password.
     */
    password: string;
};

/**
 * CreateTagInput
 *
 * Represents create tag input model.
 */
export type CreateTagInput = {
    commit?: Sha1;
    /**
     * Message of a tag (optional)
     */
    message?: string;
    /**
     * Name if a tag
     */
    name?: string;
};

/**
 * CreateUserPublicKeyInput
 *
 * Represents the user public key create options.
 */
export type CreateUserPublicKeyInput = {
    /**
     * Public key data.
     */
    data?: string;
    /**
     * Key name (description).
     */
    name: string;
    /**
     * Public key TTL.
     */
    ttl?: string;
};

/**
 * CreateUserTokenInput
 *
 * Represents the user access token create options.
 */
export type CreateUserTokenInput = {
    /**
     * Token name (description).
     */
    name: string;
    /**
     * Token TTL.
     */
    ttl?: string;
};

/**
 * CreateWebhookInput
 *
 * Represents webhook create options.
 */
export type CreateWebhookInput = {
    branch_and_tag_filter?: WebhookBranchAndTagFilter;
    events?: WebhookEvents;
    /**
     * Is webhook active or disabled.
     */
    is_active?: boolean;
    /**
     * Unique name.
     */
    name?: string;
    pull_request_target_branch_filter?: WebhookPullRequestTargetBranchFilter;
    receiver?: WebhookReceiver;
};

/**
 * DeleteAsyncProjectInfo
 *
 * Represents the project async deletion info.
 */
export type DeleteAsyncProjectInfo = {
    job_id?: JobId;
};

/**
 * DeleteBranchesInfo
 *
 * Represents the branches deletion info.
 */
export type DeleteBranchesInfo = {
    /**
     * Deleted branches with errors.
     */
    names_of_deleted_branches_with_errors?: Array<string>;
    /**
     * Successfully deleted branches.
     */
    names_of_successfully_deleted_branches?: Array<string>;
};

/**
 * DeleteBranchesInput
 *
 * aggregates the options for deleting branches.
 */
export type DeleteBranchesInput = {
    /**
     * Delete merged branches flag
     */
    delete_merged?: boolean;
};

/**
 * DeleteProjectInfo
 *
 * Represents the project deletion info.
 */
export type DeleteProjectInfo = {
    /**
     * ProjectsCount is a count of deleted projects
     */
    projects_count?: number;
};

/**
 * DeleteRepoInfo
 *
 * Represents repository deletion statistic.
 */
export type DeleteRepoInfo = {
    /**
     * PullRequestsCount is a count of deleted repository pull requests.
     */
    pull_requests_count?: number;
    /**
     * ReposCount is a count of deleted repositories.
     */
    repos_count?: number;
};

/**
 * Diff
 *
 * Represents the two branches diff.
 */
export type Diff = {
    /**
     * Base64 encoded diff content
     */
    content?: string;
    /**
     * List of files excluded from diff.
     */
    excluded_files?: Array<string>;
    /**
     * List of large files names
     */
    large_files?: Array<string>;
    source_head_id?: Sha1;
};

export type Duration = Duration;

/**
 * EnableMirroringInput
 *
 * Represents the repository mirror enabling options.
 */
export type EnableMirroringInput = {
    /**
     * Remote repository auth credentials.
     */
    remote_password?: string;
    /**
     * Remote Git repository URL.
     */
    remote_url: string;
    /**
     * Remote repository auth credentials.
     */
    remote_user?: string;
    /**
     * Mirror sync interval (if not set, the server default is used).
     */
    sync_interval?: string;
    type: MirrorType;
};

/**
 * Error
 *
 * Defines the format of an error response.
 */
export type _Error = {
    /**
     * Message is the error message visible to the user (more details can be gathered via logs and requestID).
     */
    message?: string;
    /**
     * In order to find out what are the variants of specific values in this key, please search for the models with the following names:
     * \*ErrorMetadata
     * RepoTagErrorMetadata
     */
    metadata?: {
        [key: string]: unknown;
    };
    /**
     * Scope defines the scope of an error (query parameter, business entity etc).
     */
    scope?: Array<ErrorScopeElement>;
    type?: ErrorType;
};

/**
 * ErrorScopeElement
 *
 * Defines the scope of an error response.
 */
export type ErrorScopeElement = {
    element?: string;
};

/**
 * ErrorType
 *
 * Enumerates the different types of errors.
 * enum:
 * internal
 * auth
 * bad_input
 * not_found
 * already_exists
 * not_allowed
 * conflict
 * type: string
 */
export type ErrorType = string;

/**
 * Event
 *
 * defines the container for all PPSC events.
 */
export type Event = {
    context?: EventContext;
    group_created?: GroupCreated;
    group_deleted?: GroupDeleted;
    id?: string;
    note?: NoteCreated;
    pr_source_branch_update?: PrSourceBranchUpdate;
    pr_status_change?: PrStatusChange;
    project_created?: ProjectCreated;
    project_deleted?: ProjectDeleted;
    repository_branch_created?: RepositoryBranchCreated;
    repository_branch_deleted?: RepositoryBranchDeleted;
    repository_branch_or_tag_created?: RepositoryBranchOrTagCreatedDeprecated;
    repository_branch_or_tag_deleted?: RepositoryBranchOrTagDeletedDeprecated;
    repository_created?: RepositoryCreated;
    repository_deleted?: RepositoryDeleted;
    repository_push?: RepositoryPush;
    repository_tag_created?: RepositoryTagCreated;
    repository_tag_deleted?: RepositoryTagDeleted;
    timestamp?: string;
    type?: EventType;
};

/**
 * EventContext
 *
 * defines an event context.
 */
export type EventContext = {
    slug?: RepoSlug;
};

/**
 * EventHeader
 *
 * defines an event common fields.
 */
export type EventHeader = {
    id?: string;
    timestamp?: string;
    type?: EventType;
};

/**
 * EventType
 *
 * defines an event type (the corresponding JSON field is filled based on enum).
 * pr_status_change: triggers on pull request status change
 * pr_source_branch_update: triggers on pull request's source branch update
 * repository_push: triggers on push
 * repository_branch_created: triggers on branch created
 * repository_branch_deleted: triggers on branch deleted
 * repository_tag_created: triggers on tag created
 * repository_tag_deleted: triggers on tag deleted
 * note_created: triggered on pull request's issue (note) creation
 * project_created: triggered on project creation
 * project_deleted: triggered on project deletion
 * group_created: triggered on group creation
 * group_deleted: triggered on group deletion
 * repository_created: triggered on repository creation
 * repository_deleted: triggered on repository deletion
 */
export type EventType = string;

/**
 * FavoriteProject
 *
 * Represents the user favorite project.
 */
export type FavoriteProject = {
    /**
     * Key unique project key.
     */
    key?: string;
};

/**
 * FileMatch
 *
 * Represents file match model.
 */
export type FileMatch = {
    branches?: Array<string>;
    file_name?: string;
    language?: string;
    line_matches?: Array<LineMatch>;
    repo_name?: string;
};

/**
 * GitRev is the git revision (ref, tag name, branch name, commit-ish etc)
 * https://git-scm.com/docs/gitrevisions
 */
export type GitRev = string;

/**
 * GitUser
 *
 * Represents a Git author/committer.
 */
export type GitUser = {
    /**
     * Email of the user (as in the Git config)
     */
    email?: string;
    /**
     * Name of the user (as in the Git config)
     */
    name?: string;
};

/**
 * GlobPattern represents glob pattern.
 */
export type GlobPattern = string;

/**
 * GroupCreated
 * is emitted on group creation
 */
export type GroupCreated = {
    requester?: SimpleUser;
};

/**
 * GroupDeleted
 * is emitted on group deletion
 */
export type GroupDeleted = {
    requester?: SimpleUser;
};

/**
 * GroupMember
 *
 * Represents a group member.
 */
export type GroupMember = {
    /**
     * Group ID
     */
    id?: string;
    /**
     * External flag (system or local user)
     */
    is_external?: boolean;
    /**
     * Ldap Key
     */
    ldap_key?: string;
    /**
     * List of group members (SimpleUser)
     */
    members?: Array<Assignee>;
    /**
     * Group Name
     */
    name?: string;
};

/**
 * IndexedBranch
 *
 * Represents a repository indexed branch.
 */
export type IndexedBranch = {
    /**
     * IsDefault
     */
    is_default?: boolean;
    /**
     * Name of a branch
     */
    name?: string;
    /**
     * Status is an indexing status
     */
    status?: string;
};

/**
 * Issue
 *
 * Represents a user issue assigned to a repo's branch.
 */
export type Issue = {
    /**
     * Repo branch name.
     */
    branch?: string;
    /**
     * Issue created timestamp.
     */
    created_at?: string;
    /**
     * Issue name.
     */
    name?: string;
    service_task_type?: ServiceTaskType;
    /**
     * Issue updated timestamp.
     */
    updated_at?: string;
    /**
     * Issue external URL.
     */
    url?: string;
};

/**
 * Job
 *
 * Represents background job state.
 */
export type Job = {
    /**
     * Job complete time (set if Status is complete).
     */
    complete_at?: string;
    /**
     * Job creation time.
     */
    created_at?: string;
    id?: JobId;
    /**
     * Last job error if occurred.
     */
    last_error?: string;
    /**
     * Total amount of execution stages.
     */
    max_stage?: number;
    /**
     * Current execution stage name (key defined by Job enum).
     */
    stage?: string;
    /**
     * Current execution stage number (out of Stages).
     */
    stage_number?: number;
    status?: JobStatus;
    type?: JobType;
    /**
     * Job state update time.
     */
    updated_at?: string;
};

/**
 * JobId
 *
 * represent a background job unique id.
 */
export type JobId = number;

/**
 * JobInput
 *
 * Represents background job run parameters.
 */
export type JobInput = {
    /**
     * Job start delay.
     */
    delay?: string;
    /**
     * Initial job stage.
     * type: string
     */
    initial_stage?: string;
    /**
     * Initial job stage parameters.
     * type: object
     */
    initial_stage_parameters?: {
        [key: string]: {
            [key: string]: unknown;
        };
    };
    key?: JobKey;
    /**
     * Max job retries count.
     * type: integer
     */
    max_attempts?: number;
    /**
     * Job parameters.
     * type: object
     */
    parameters?: {
        [key: string]: {
            [key: string]: unknown;
        };
    };
    /**
     * Job stages count.
     * type: integer
     */
    stages_count?: number;
    /**
     * Job execution timeout.
     */
    timeout: string;
    type: JobType;
};

/**
 * JobKey
 *
 * represents a worker job unique per type key.
 */
export type JobKey = string;

/**
 * JobStatus
 *
 * Represents job execution status.
 * in_progress: job is running
 * error: job finished with an error
 * complete: job successfully finished
 */
export type JobStatus = string;

/**
 * JobType
 *
 * represents a worker job unique type.
 */
export type JobType = string;

/**
 * Label
 *
 * Direct analog of hashtags, the nature of the entity is configured by the object_type field.
 */
export type Label = {
    /**
     * Protected label
     */
    is_protected: boolean;
    /**
     * Label name
     */
    name: string;
    /**
     * Object Id
     */
    object_id: string;
    object_type: LabelType;
};

/**
 * LabelAddInput
 *
 * Add a label.
 */
export type LabelAddInput = {
    /**
     * Protected label
     */
    is_protected: boolean;
    /**
     * Object Id
     */
    object_id: string;
    object_type: LabelType;
};

/**
 * LabelDeleteInput
 *
 * Delete a label.
 */
export type LabelDeleteInput = {
    /**
     * Object Id
     */
    object_id: string;
    object_type: LabelType;
};

/**
 * LabelType
 *
 * Types of label objects:
 * project
 */
export type LabelType = string;

/**
 * LineBlameInfo
 *
 * Represents a repository file line blame info.
 */
export type LineBlameInfo = {
    author?: CommitPerson;
    committer?: CommitPerson;
    hash?: Sha1;
    /**
     * Line number
     */
    line_number?: number;
    /**
     * Full commit message.
     */
    message?: string;
    /**
     * First line of the commit log message.
     */
    summary?: string;
};

/**
 * LineFragment
 *
 * Represents line fragment model, which contains match offset and length data in bytes.
 */
export type LineFragment = {
    line_offset?: number;
    match_length?: number;
    offset?: number;
};

/**
 * LineMatch
 *
 * Represents line match model.
 */
export type LineMatch = {
    after?: string;
    before?: string;
    line?: string;
    line_end?: number;
    line_fragments?: Array<LineFragment>;
    line_number?: number;
    line_start?: number;
};

/**
 * LinkedIssue is a linked issue to a pull request
 */
export type LinkedIssue = {
    /**
     * Name of an issue
     */
    name?: string;
    service_task_type?: ServiceTaskType;
    /**
     * URL of an issue
     */
    url?: string;
};

/**
 * LinkedIssueInput single linked issue input
 */
export type LinkedIssueInput = {
    /**
     * Name of an issue
     */
    name: string;
    /**
     * URL of an issue
     */
    url: string;
};

/**
 * LinkedIssuesInput
 *
 * Represents a pull request's linked issues input.
 */
export type LinkedIssuesInput = Array<LinkedIssueInput>;

/**
 * ListFilesByPatternInput
 *
 * represents list of domain.GlobPattern
 */
export type ListFilesByPatternInput = Array<GlobPattern>;

/**
 * ListFilesContentInput
 *
 * represents list of file paths
 */
export type ListFilesContentInput = Array<TreePath>;

export type ListPolicyCiBuildInput = Array<PolicyCiBuildInput>;

/**
 * ListPullRequestActivityOptions
 *
 * Represents pull request's activities additional filtering and pagination options.
 */
export type ListPullRequestActivityOptions = {
    EventGroups?: Array<PullRequestEventGroups>;
    PageCursor?: string;
    PageLimit?: number;
};

/**
 * ListTreeMetadataInput
 *
 * represents list of file paths
 */
export type ListTreeMetadataInput = Array<TreePath>;

/**
 * MergeConflict
 *
 * Represents repository pull request merge conflicts information of a single file.
 */
export type MergeConflict = {
    content?: string;
    filename?: string;
};

/**
 * MergePullRequestInput
 *
 * Represents repository pull request merge options.
 */
export type MergePullRequestInput = {
    merge_options?: MergePullRequestOptions;
    /**
     * Merge style.
     * merge PullRequestMergeStyleMerge  Non fast-forward merge source into target.
     * rebase PullRequestMergeStyleRebase  Rebase a source onto a target and do fast-forward merge.
     * fast-forward-only PullRequestMergeStyleFastForward  Fast-forward only merge.
     * squash PullRequestMergeStyleSquash  Squash commits into single commit and do non fast-forward merge.
     * rebase-merge PullRequestMergeStyleRebaseMerge  Rebase a source into target and do non fast-forward merge.
     * manually-merged PullRequestMergeStyleManuallyMerged  Pull request has been merged manually, just mark it as merged directly.
     */
    style?: 'merge' | 'rebase' | 'fast-forward-only' | 'squash' | 'rebase-merge' | 'manually-merged';
};

/**
 * MergePullRequestOptions
 *
 * Represents repository pull request merge options.
 * Should be passed only if merge style one of the following: merge, squash, rebase-merge
 */
export type MergePullRequestOptions = {
    delete_source_branch?: boolean;
    /**
     * This field required for all merge styles except fast-forward.
     */
    merge_commit_message?: string;
};

/**
 * MigrationJobInfo
 *
 * Represents migration job information.
 */
export type MigrationJobInfo = {
    job_id?: JobId;
};

/**
 * MigrationOptions
 *
 * Defines the way a repository gets migrated.
 */
export type MigrationOptions = {
    /**
     * Authentication password.
     */
    auth_password?: string;
    /**
     * Authentication oauth2 token if supported by service.
     */
    auth_token?: string;
    /**
     * Authentication login.
     */
    auth_username?: string;
    /**
     * Repository clone address.
     */
    clone_addr: string;
    /**
     * Migrate pull comments.
     */
    comments: boolean;
    /**
     * Migrated repository description.
     */
    description?: string;
    /**
     * Migrate LFS files (not supported yet).
     */
    lfs: boolean;
    /**
     * LFS endpoint to use it for repository.
     */
    lfs_endpoint?: string;
    /**
     * Migrate repository as mirror.
     */
    mirror: boolean;
    /**
     * Mirror update interval.
     */
    mirror_interval?: string;
    /**
     * Migrate pull requests.
     */
    pull_requests: boolean;
    /**
     * Migrate repository.
     */
    repository: boolean;
    /**
     * Migration service.
     * git PlainGitService  Migrate plain git repository
     * github GithubService  Migrate github repository
     * gitea GiteaService  Migrate gitea repository
     * gitlab GitlabService  Migrate gitlab repository
     * gogs GogsService  Migrate gogs repository
     * onedev OneDevService  Migrate onedev repository
     * gitbucket GitBucketService  Migrate gitbucket repository
     * codebase CodebaseService  Migrate codebase repository
     * bitbucket BitbucketService  Migrate bitbucket repository
     */
    service: 'git' | 'github' | 'gitea' | 'gitlab' | 'gogs' | 'onedev' | 'gitbucket' | 'codebase' | 'bitbucket';
    /**
     * Skip attachments doesn't meet server requirements.
     */
    skip_restricted_attachments: boolean;
};

/**
 * MirrorSettings
 *
 * Represents a repository mirror settings and current state.
 */
export type MirrorSettings = {
    /**
     * Mirror created timestamp.
     */
    created_at?: string;
    /**
     * The last mirror sync error.
     */
    last_error?: string;
    last_status?: MirrorSyncStatus;
    /**
     * Remote URL used for mirroring.
     */
    remote_url?: string;
    /**
     * Mirror sync interval.
     */
    sync_interval?: string;
    /**
     * The last successful sync timestamp.
     */
    synced_at?: string;
    type?: MirrorType;
    /**
     * Mirror updated timestamp.
     */
    updated_at?: string;
};

/**
 * MirrorSyncStatus
 *
 * Represents the last repository mirror sync status.
 * pending: is the initial sync status (applies for non-mirror repos as well)
 * synced: the last sync was successful
 * error: the last sync did fail (mirror_last_error keeps the error occurred)
 */
export type MirrorSyncStatus = string;

/**
 * MirrorType
 *
 * Represents repository mirror type.
 * push: push mirror
 * pull: pull (fetch) mirror
 */
export type MirrorType = string;

/**
 * MultiMigrationOptions
 *
 * Defines the way a repository gets migrated.
 */
export type MultiMigrationOptions = {
    /**
     * Authentication password.
     */
    auth_password?: string;
    /**
     * Authentication oauth2 token if supported by service.
     */
    auth_token?: string;
    /**
     * Authentication login.
     */
    auth_username?: string;
    /**
     * Repository clone address.
     */
    clone_addr?: Array<string>;
    /**
     * Migrate pull request comments.
     */
    comments: boolean;
    /**
     * Migrate pull requests.
     */
    pull_requests: boolean;
    /**
     * Migrate repository.
     */
    repository: boolean;
    /**
     * Repository host address.
     */
    server_addr?: string;
    /**
     * Migration service.
     * git PlainGitService  Migrate plain git repository
     * github GithubService  Migrate github repository
     * gitea GiteaService  Migrate gitea repository
     * gitlab GitlabService  Migrate gitlab repository
     * gogs GogsService  Migrate gogs repository
     * onedev OneDevService  Migrate onedev repository
     * gitbucket GitBucketService  Migrate gitbucket repository
     * codebase CodebaseService  Migrate codebase repository
     * bitbucket BitbucketService  Migrate bitbucket repository
     */
    service: 'git' | 'github' | 'gitea' | 'gitlab' | 'gogs' | 'onedev' | 'gitbucket' | 'codebase' | 'bitbucket';
};

/**
 * NoteCreated
 * is emitted on issue creation (quality api)
 */
export type NoteCreated = {
    id?: string;
    pr?: string;
    principalName?: string;
    project?: string;
    repository?: string;
    revision?: string;
    severity?: string;
    status?: string;
    text?: string;
};

/**
 * NotificationSubscription
 *
 * Subscription notification info.
 */
export type NotificationSubscription = {
    /**
     * Object Id
     */
    object_id?: string;
    object_type?: NotificationType;
    /**
     * Subscriber's principal name
     */
    subscriber?: string;
};

/**
 * NotificationSubscriptionInfo
 *
 * Notification subscription info regarding requester.
 */
export type NotificationSubscriptionInfo = {
    /**
     * IsRequesterSubscribed
     */
    is_requester_subscribed?: boolean;
    /**
     * Object Id
     */
    object_id?: string;
    object_type?: NotificationType;
};

/**
 * NotificationSubscriptionInput
 *
 * Adding a subscription.
 */
export type NotificationSubscriptionInput = {
    /**
     * Object Id
     */
    object_id: string;
    object_type: NotificationType;
};

/**
 * NotificationType
 *
 * Types of subscription objects:
 * pullRequest
 */
export type NotificationType = string;

/**
 * PolicyCIBuild
 *
 * Represents build policy settings for repository pull requests.
 */
export type PolicyCiBuild = {
    /**
     * Check whether we need build expiration over time
     */
    after_build_start?: boolean;
    /**
     * AfterBuildBranchUpdate indicates if branch should be updated before build
     */
    branch_update?: boolean;
    /**
     * BuildType whether the build is mandatory for merge
     * required PolicyCIBuildTypeRequired
     * optional PolicyCIBuildTypeOptional
     */
    build_type?: 'required' | 'optional';
    /**
     * CreatedAt when this build policy was created
     */
    created_at?: string;
    /**
     * Time after which the build should start, value in hours
     */
    expiration_at?: number;
    /**
     * id unique identifier of the build policy
     */
    id?: number;
    /**
     * instance URL of the CI/CD instance where builds are executed.
     */
    instance?: string;
    /**
     * Name for the build configuration.
     */
    name?: string;
    /**
     * policy_id identifier of the parent policy.
     */
    policy_id?: number;
    /**
     * project ci/cd name configuration file
     */
    project?: string;
    /**
     * ProjectArea folder path where project is located
     */
    project_area?: string;
    /**
     * project_id ci/cd project uuid
     */
    project_id?: string;
    /**
     * repo_id identifier of the repository this policy belongs to
     */
    repo_id?: number;
    /**
     * UpdatedAt Last time this build policy was modified
     */
    updated_at?: string;
};

/**
 * PolicyCIBuildInput
 *
 * Represents build policy settings for repository pull requests.
 */
export type PolicyCiBuildInput = {
    /**
     * Indicates if branch should be updated before build
     */
    after_build_branch_update?: boolean;
    /**
     * Check whether we need build expiration over time
     */
    after_build_start?: boolean;
    /**
     * Whether the build is mandatory for merge
     * required PolicyCIBuildTypeRequired
     * optional PolicyCIBuildTypeOptional
     */
    build_type?: 'required' | 'optional';
    /**
     * Time after which the build should start, value in hours
     */
    expiration_at?: number;
    /**
     * Id setting build
     */
    id?: number;
    /**
     * address ci/cd instance
     */
    instance?: string;
    /**
     * Name pull request ci/cd build name
     */
    name?: string;
    /**
     * Project ci/cd name configuration file
     */
    project?: string;
    /**
     * Area in ci/cd system folder path
     */
    project_area?: string;
    /**
     * ci/cd project uuid
     */
    project_id?: string;
};

/**
 * PolicyCIBuildUpdateInput
 *
 * Represents a repository pull request settings update options.
 */
export type PolicyCiBuildUpdateInput = {
    /**
     * Indicates if branch should be updated before build
     */
    after_build_branch_update?: boolean;
    /**
     * Check whether we need build expiration over time
     */
    after_build_start?: boolean;
    /**
     * Whether the build is mandatory for merge
     * defalut: required
     * required PolicyCIBuildTypeRequired
     * optional PolicyCIBuildTypeOptional
     */
    build_type?: 'required' | 'optional';
    /**
     * Time after which the build should start, value in hours
     */
    expiration_at?: number;
    /**
     * Id setting build
     */
    id?: number;
    /**
     * address ci/cd instance
     */
    instance?: string;
    /**
     * Name pull request ci/cd build name.
     */
    name?: string;
    /**
     * Project ci/cd name configuration file
     */
    project?: string;
    /**
     * Area in ci/cd system folder path
     */
    project_area?: string;
    /**
     * ci/cd project uuid
     */
    project_id?: string;
};

/**
 * PolicyModes
 *
 * Represents policy modes structure.
 */
export type PolicyModes = {
    allow_authors_to_approve_their_pull_requests?: RepoPolicyMode;
    code_quality_scan_mode?: RepoPolicyMode;
    create_pr_hook_message_mode?: RepoPolicyMode;
    delete_source_branch_after_merge_by_default_mode?: RepoPolicyMode;
    merge_branch_source_up_to_date_mode?: RepoPolicyMode;
    merge_types_fast_forward_mode?: RepoPolicyMode;
    merge_types_merge_commit_mode?: RepoPolicyMode;
    merge_types_squash_mode?: RepoPolicyMode;
    merging_for_unassigned_changed_files_mode?: RepoPolicyMode;
    merging_without_linked_issues_mode?: RepoPolicyMode;
};

/**
 * PolicyReviewerGroup
 *
 * Represents policy reviewer group.
 */
export type PolicyReviewerGroup = {
    group?: GroupMember;
    /**
     * ID reviewer group id
     */
    id?: number;
    /**
     * Whether this group can be removed
     */
    is_removable?: boolean;
    /**
     * Required flag
     */
    is_required?: boolean;
    member?: Assignee;
    /**
     * Number or required approvals
     */
    number_of_approvals?: number;
    /**
     * Specify reviewers flag
     */
    specify_reviewers?: boolean;
};

/**
 * PolicyReviewerGroupInput
 *
 * Represents policy reviewer group input.
 */
export type PolicyReviewerGroupInput = {
    group?: GroupMember;
    /**
     * ID reviewer group id
     */
    id?: number;
    /**
     * Required flag
     */
    is_required?: boolean;
    member?: Assignee;
    /**
     * Number or required approvals
     */
    number_of_approvals?: number;
    /**
     * Specify reviewers flag
     */
    specify_reviewers?: boolean;
};

/**
 * PrSettings
 *
 * Represents a repository pull request settings.
 *
 * # DEPRECATED
 */
export type PrSettings = {
    /**
     * Indicates whether auto merge is allowed for the PR.
     */
    allow_auto_merge?: boolean;
    /**
     * Indicates whether fast-forward is allowed as a merge type.
     */
    allow_merge_types_fast_forward?: boolean;
    /**
     * Indicates whether merge commit is allowed as a merge type.
     */
    allow_merge_types_merge_commit?: boolean;
    /**
     * Indicated where squash is allowed as a merge type.
     */
    allow_merge_types_squash?: boolean;
    /**
     * Minimum number of assignee approvals needed to merge a PR.
     */
    approvals_min?: number;
    /**
     * Indicates whether pull request merging should be blocked according to unassigned changed files.
     */
    block_merging_for_unassigned_changed_files?: boolean;
    /**
     * Indicates whether pull request merging should be blocked according to no linked issues.
     */
    block_merging_without_linked_issues?: boolean;
    /**
     * Defines the necessity of a successful code quality scan to merge a PR.
     * If False, code quality scan doesn't block the merge.
     */
    code_quality_scan?: boolean;
    /**
     * If set, the Git CLI displays a web link to create a new PR when a new branch is pushed.
     */
    create_pr_hook_message?: boolean;
    /**
     * List of default assignee principal names to set for each new PR created.
     */
    default_assignees?: Array<SimpleUser>;
    /**
     * Indicates whether the source branch should be deleted after merge by default.
     */
    delete_source_branch_after_merge_by_default?: boolean;
    /**
     * Indicates whether pull request merging should be blocked according to merge branch source is not up to date.
     * If False, merge branch source that is not up to date doesn't block the merge.
     */
    merge_branch_source_up_to_date?: boolean;
    /**
     * Maximum number of assignee rejects that is acceptable to merge a PR.
     */
    rejects_max?: number;
    /**
     * Settings updated timestamp.
     */
    updated_at?: string;
};

/**
 * PrSourceBranchUpdate
 *
 * is emitted on branch related to a PR as the source push.
 */
export type PrSourceBranchUpdate = {
    commit?: RepoCommit;
    pr?: PullRequest;
    source_issue?: Issue;
    target_commit?: RepoCommit;
    target_issue?: Issue;
};

/**
 * PrStatusChange
 *
 * is emitted on PR status change (or merge status change).
 */
export type PrStatusChange = {
    commit?: RepoCommit;
    is_first_creation?: boolean;
    pr?: PullRequest;
    source_commit?: RepoCommit;
    source_issue?: Issue;
    target_commit?: RepoCommit;
    target_issue?: Issue;
};

/**
 * Project
 *
 * Represents the project.
 */
export type Project = {
    /**
     * Repo created timestamp.
     */
    created_at?: string;
    /**
     * Description set by the user.
     */
    description?: string;
    /**
     * Name.
     */
    full_name?: string;
    /**
     * SubProjects list of project groups or group subgroups
     */
    groups?: Array<Project>;
    /**
     * ID project's identifier
     */
    id?: number;
    /**
     * IsFavorite favorite project flag
     */
    is_favorite?: boolean;
    /**
     * IsPublic project public visibility flag.
     */
    is_public?: boolean;
    /**
     * LFSAllow project support lfs.
     */
    lfs_allow?: boolean;
    /**
     * Unique project key.
     */
    name?: string;
    /**
     * ParentID is a group characteristic, which belongs it to a specified group or project identifier
     */
    parent_id?: number;
    permissions?: ProjectPermissions;
    /**
     * Repo updated timestamp.
     */
    updated_at?: string;
};

/**
 * ProjectCreated
 * is emitted on project creation
 */
export type ProjectCreated = {
    requester?: SimpleUser;
};

/**
 * ProjectDeleted
 * is emitted on project deletion
 */
export type ProjectDeleted = {
    requester?: SimpleUser;
};

/**
 * ProjectPermissions
 *
 * Represents user permissions in project.
 */
export type ProjectPermissions = {
    /**
     * CanCreateRepository defines access to create repositories.
     */
    can_create_repository?: boolean;
    /**
     * CanEditAdvanced defines access to delete project.
     */
    can_edit_advanced?: boolean;
    /**
     * CanEditAdvancedQualityGate defines access to delete quality gates and to edit plugins.
     */
    can_edit_advanced_quality_gate?: boolean;
    /**
     * CanEditAdvancedQualityPlugin defines access to activate, deactivate or delete plugin.
     */
    can_edit_advanced_quality_plugin?: boolean;
    /**
     * CanEditAdvancedSettings defines access to edit project visibility setting.
     */
    can_edit_advanced_settings?: boolean;
    /**
     * CanEditQualityGate defines access to edit quality gates.
     */
    can_edit_quality_gate?: boolean;
    /**
     * CanEditQualityPlugin defines access to edit plugin general settings, activate/deactivate plugin rules, etc.
     */
    can_edit_quality_plugin?: boolean;
    /**
     * CanEditRoles defines access to assign roles, actions.
     */
    can_edit_roles?: boolean;
    /**
     * CanEditSettings defines access to edit settings.
     */
    can_edit_settings?: boolean;
    /**
     * CanEditTeams defines access to edit teams.
     */
    can_edit_teams?: boolean;
    /**
     * CanImportRepository defines access to import repositories.
     */
    can_import_repository?: boolean;
    /**
     * CanViewQualityGate defines access to view quality gates.
     */
    can_view_quality_gate?: boolean;
    /**
     * CanViewQualityPlugin defines access to view plugins and plugin's rules.
     */
    can_view_quality_plugin?: boolean;
    /**
     * CanViewRoles defines access to view roles, actions.
     */
    can_view_roles?: boolean;
    /**
     * CanViewSettings defines access to view settings.
     */
    can_view_settings?: boolean;
    /**
     * CanViewTeams defines access to view teams.
     */
    can_view_teams?: boolean;
};

/**
 * ProjectUsageQuotasSettings
 *
 * Project usage quotas settings.
 */
export type ProjectUsageQuotasSettings = {
    /**
     * Enable soft and hard file usage quotas limit setting.
     */
    enable_file_storage_policy_limit?: boolean;
    /**
     * Enable soft and hard repository usage quotas limit setting.
     */
    enable_repo_storage_policy_limit?: boolean;
    /**
     * Hard limit file usage quotas setting.
     */
    file_storage_policy_hard_limit?: number;
    /**
     * Soft limit file usage quotas setting.
     */
    file_storage_policy_soft_limit?: number;
    /**
     * Hard limit repository usage quotas setting.
     */
    repo_storage_policy_hard_limit?: number;
    /**
     * Soft limit repository usage quotas setting.
     */
    repo_storage_policy_soft_limit?: number;
    /**
     * Settings updated timestamp.
     */
    updated_at?: string;
};

/**
 * ProtectedBranch
 *
 * Represents repository protected branch.
 */
export type ProtectedBranch = {
    /**
     * Creation time.
     */
    created_at?: string;
    /**
     * Protection active/inactive flag.
     */
    is_active?: boolean;
    /**
     * Default branch flag.
     */
    is_default?: boolean;
    mask?: GlobPattern;
    /**
     * Last update time.
     */
    updated_at?: string;
};

/**
 * ProtectedBranchInput
 *
 * Represents repository protected branch input.
 */
export type ProtectedBranchInput = {
    /**
     * Protection active/inactive flag.
     */
    is_active: boolean;
    mask: GlobPattern;
};

/**
 * ProtectedBranchesSettings
 *
 * Represents repository protected branches settings.
 */
export type ProtectedBranchesSettings = Array<ProtectedBranch>;

/**
 * PullRequest
 *
 * Represents repository pull request information.
 */
export type PullRequest = {
    /**
     * Pull request reviewers.
     */
    assignees?: Array<Assignee>;
    author?: SimpleUser;
    /**
     * Is pull request was closed.
     */
    closed?: boolean;
    /**
     * Pull request close time if closed
     */
    closed_at?: string;
    /**
     * List of pull request files - keep it for backward compatability
     */
    conflicts?: Array<string>;
    /**
     * Pull request creation time
     */
    created_at?: string;
    /**
     * Pull request description
     */
    description?: string;
    /**
     * Reviewer groups
     */
    group_assignees?: Array<ReviewerGroupAssignees>;
    id?: PullRequestId;
    /**
     * Linked issues
     */
    linked_issues?: Array<LinkedIssue>;
    merge_base?: Sha1;
    merge_branch_head?: Sha1;
    merge_branch_source_head?: Sha1;
    merge_branch_target_head?: Sha1;
    /**
     * Pull request merge status
     * conflict PullRequestMergeStatusConflict  Pull request has conflicted changes.
     * empty PullRequestMergeStatusEmpty  Pull request's resulting patch is empty.
     * ready PullRequestMergeStatusReady  Pull request is ready for merge.
     * checking PullRequestMergeStatusChecking  Pull request status checking is in progress.
     * error PullRequestMergeStatusError  Pull request is in an erroneous state.
     * merging PullRequestMergeStatusMerging  Pull request merge is in progress.
     * merged PullRequestMergeStatusMerged  Pull request has been merged via the API.
     * manually_merged PullRequestMergeStatusManuallyMerged  Pull request has been merged manually through the git CLI.
     */
    merge_status?: 'conflict' | 'empty' | 'ready' | 'checking' | 'error' | 'merging' | 'merged' | 'manually_merged';
    /**
     * Pull request merge time if merged
     */
    merged_at?: string;
    permissions?: PullRequestPermissions;
    policy_modes?: PolicyModes;
    /**
     * Policy reviewer groups
     */
    policy_reviewer_groups?: Array<PolicyReviewerGroup>;
    /**
     * Branch name of the pull request source (source is merged to the target).
     */
    source_branch?: string;
    source_branch_delete_status?: SourceBranchDeleteStatus;
    source_head?: Sha1;
    source_slug?: RepoSlug;
    status?: PullRequestStatus;
    /**
     * Branch name of the pull request target (source is merged to the target).
     */
    target_branch?: string;
    target_head?: Sha1;
    /**
     * Pull request title
     */
    title?: string;
    /**
     * Untracked files
     */
    untracked_files?: Array<string>;
    /**
     * Pull request last update time
     */
    updated_at?: string;
};

/**
 * PullRequestActivity represents an activity record of the pull request with.
 *
 * Every event type has its own set of the corresponding data to be presented.
 */
export type PullRequestActivity = {
    /**
     * List of users targeted by the event in the assignment context (e.g. 'reviewers assigned'). Displayed for the 'reviewers' event group.
     */
    assignees?: Array<SimpleUser>;
    ci_build?: PullRequestActivityCiBuild;
    /**
     * List of commit hashes added during the event. Displayed for the 'commits' event group.
     */
    commits_added?: Array<PullRequestActivityCommit>;
    /**
     * Added commits count. Displayed for the 'commits' event group.
     */
    commits_added_count?: number;
    /**
     * List of commit hashes deleted during the event. Displayed for the 'commits' event group.
     */
    commits_deleted?: Array<PullRequestActivityCommit>;
    /**
     * Deleted commits count. Displayed for the 'commits' event group.
     */
    commits_deleted_count?: number;
    event_type?: PullRequestActivityEventType;
    /**
     * Source code issue identifier. Displayed for the 'issues' event group.
     */
    issue_id?: string;
    /**
     * Activity time.
     */
    logged_at?: string;
    /**
     * Push number in pull request.
     */
    push_number?: number;
    user_acted?: SimpleUser;
};

/**
 * PullRequestActivityCiBuild contains CI build data to display for build related events.
 */
export type PullRequestActivityCiBuild = {
    /**
     * CI project display name.
     */
    build_project_name?: string;
    /**
     * CI build URL.
     */
    build_url?: string;
    /**
     * CI build display name.
     */
    display_name?: string;
    status?: CiBuildStatus;
};

/**
 * PullRequestActivityCommit contains commit data to display for commit related events.
 */
export type PullRequestActivityCommit = {
    /**
     * Commit author name.
     */
    author_name?: string;
    /**
     * Time when the commit was done locally.
     */
    commited_at?: string;
    /**
     * Commit hash.
     */
    hash?: string;
    /**
     * Commit message text. Truncated if the size exceeds hard coded limit.
     */
    message?: string;
};

/**
 * PullRequestActivityEventType represents specific activity events.
 *
 * See the 'entity.PullRequestActivityEventType' for details.
 */
export type PullRequestActivityEventType = string;

/**
 * PullRequestAuthors
 *
 * Represents repository pull request authors information.
 */
export type PullRequestAuthors = {
    /**
     * Users have self user will always be in first place, if available.
     */
    users?: Array<SimpleUser>;
};

/**
 * PullRequestAutoMerge
 *
 * Represents auto merge pull request information.
 */
export type PullRequestAutoMerge = {
    author?: SimpleUser;
    /**
     * Merge commit message
     */
    commit_message?: string;
    /**
     * CompletedAt represents the timestamp when the pull request auto merge was completed.
     */
    completed_at?: string;
    /**
     * CreatedAt represents the timestamp when the pull request auto merge was created.
     */
    created_at?: string;
    /**
     * Delete source branch option for merged pull request
     */
    delete_source_branch?: boolean;
    /**
     * Auto merge error message
     */
    error_message?: string;
    /**
     * On/Off flag
     */
    is_on?: boolean;
    merge_commit?: Sha1;
    /**
     * Pull request merge style
     * merge PullRequestMergeStyleMerge  Non fast-forward merge source into target.
     * rebase PullRequestMergeStyleRebase  Rebase a source onto a target and do fast-forward merge.
     * fast-forward-only PullRequestMergeStyleFastForward  Fast-forward only merge.
     * squash PullRequestMergeStyleSquash  Squash commits into single commit and do non fast-forward merge.
     * rebase-merge PullRequestMergeStyleRebaseMerge  Rebase a source into target and do non fast-forward merge.
     * manually-merged PullRequestMergeStyleManuallyMerged  Pull request has been merged manually, just mark it as merged directly.
     */
    merge_style?: 'merge' | 'rebase' | 'fast-forward-only' | 'squash' | 'rebase-merge' | 'manually-merged';
    pr_id?: PullRequestId;
    status?: AutoMergeStatus;
    /**
     * UpdatedAt represents the timestamp when the pull request auto merge was last updated.
     */
    updated_at?: string;
};

/**
 * PullRequestCounters
 *
 * Represents repository pull request counts information.
 */
export type PullRequestCounters = {
    /**
     * Count of all pull requests.
     */
    all?: number;
    /**
     * Count of merged pull requests.
     */
    merged?: number;
    /**
     * Count of opened pull requests.
     */
    open?: number;
    /**
     * Count of reject pull requests.
     */
    rejected?: number;
};

/**
 * PullRequestActivityEventGroup
 *
 * Represents repository pull request activities event group filter.
 * statuses: filter by pull request status transitions
 * reviewers: filter by reviewer events
 * issues: filter by issues raised
 * commits: filter by added or deleted commits
 * builds: filter by CI build status changes
 */
export type PullRequestEventGroups = string;

export type PullRequestId = number;

export type PullRequestIdempotencyKey = string;

/**
 * PullRequestMergeConflict
 *
 * Represents repository pull request merge conflicts information.
 */
export type PullRequestMergeConflict = {
    did_exceed_limit?: boolean;
    is_resolvable?: boolean;
    merge_conflicts?: Array<MergeConflict>;
};

/**
 * PullRequestMergeResult
 *
 * Represents repository pull request merge result.
 */
export type PullRequestMergeResult = {
    merge_commit?: Sha1;
    pull_request?: PullRequest;
};

/**
 * PullRequestPermissions
 *
 * Represents pull request permissions for user.
 */
export type PullRequestPermissions = {
    /**
     * CanAddAssignee defines access to add assign PR
     */
    can_add_assignee?: boolean;
    /**
     * CanClose defines access to close PR.
     */
    can_close?: boolean;
    /**
     * CanForceMerge defines access to force merge pull request
     */
    can_force_merge?: boolean;
    /**
     * CanMerge defines access to merge PR.
     */
    can_merge?: boolean;
    /**
     * CanRemoveAssignee defines access to remove assign PR
     */
    can_remove_assignee?: boolean;
    /**
     * CanReopen defines access to reopen PR.
     */
    can_reopen?: boolean;
    /**
     * CanSetDecision defines that decision can be applied to the pull request.
     */
    can_set_decision?: boolean;
};

/**
 * PullRequestReviewerGroup
 *
 * Represents pull request reviewer group.
 */
export type PullRequestReviewerGroup = {
    /**
     * Auto approve by author
     */
    auto_approve_by_author?: boolean;
    /**
     * List of reviewers
     */
    default_reviewers?: Array<SimpleUser>;
    /**
     * File masks
     */
    file_masks?: Array<string>;
    id?: PullRequestReviewerGroupId;
    /**
     * Minimap amount of approves
     */
    min_approvals?: number;
    /**
     * Group name
     */
    name?: string;
    repo_slug?: RepoSlug;
    /**
     * Exclusive branch mask (implies multiple masks separated by comma)
     */
    target_branch_ignore_mask?: string;
    /**
     * Target branch mask (implies multiple masks separated by comma)
     */
    target_branch_mask?: string;
};

export type PullRequestReviewerGroupId = number;

/**
 * PullRequestStatus
 *
 * Represents repository pull request status filter.
 * open: newly created pull request
 * rejected: pull request changes have been discarded
 * merged: pull request has merged
 */
export type PullRequestStatus = string;

/**
 * PullRequestStatusFilter
 *
 * Represents repository pull request status filter.
 * open: filter opened pull requests (all except merged and rejected)
 * close: filter closed pull requests (merged and rejected)
 * merged: filter merged pull requests
 * rejected: filter rejected pull requests
 * all: filter all pull requests
 */
export type PullRequestStatusFilter = string;

/**
 * PullRequestViewedFile
 *
 * Represents pull request viewed file.
 */
export type PullRequestViewedFile = {
    /**
     * Changed since last view
     */
    changed_since_last_view?: boolean;
    /**
     * Created at
     */
    created_at?: string;
    /**
     * Path to the file.
     */
    file_path?: string;
    hash?: Sha1;
};

/**
 * PullRequestViewedFileInput
 *
 * Represents pull request viewed file input.
 */
export type PullRequestViewedFileInput = {
    /**
     * Path to the file.
     * type: string
     */
    file_path?: string;
};

/**
 * RepoBranch
 *
 * Represents a repository branch with the head commit.
 */
export type RepoBranch = {
    /**
     * Protection flag.
     */
    is_protected?: boolean;
    last_commit?: RepoCommit;
    /**
     * Branch name
     */
    name?: string;
};

/**
 * RepoBranchWithIssue
 *
 * Represents a repository branch with the head commit and issue assigned.
 */
export type RepoBranchWithIssue = {
    /**
     * Protection flag.
     */
    is_protected?: boolean;
    issue?: Issue;
    last_commit?: RepoCommit;
    /**
     * Branch name
     */
    name?: string;
};

/**
 * RepoBranch
 *
 * Represents a repository branch with the head commit.
 */
export type RepoBranchWithMetadata = {
    /**
     * Ahead represents the number of commits ahead, when comparing the output ref to the BehindAheadBaseRev.
     */
    ahead?: number;
    /**
     * Behind represents the number of commits behind, when comparing the output ref to the BehindAheadBaseRev.
     */
    behind?: number;
    behind_ahead_base_rev?: GitRev;
    /**
     * Represents if branch has common ancestor with BehindAheadBaseRev.
     */
    has_common_ancestor_with_base?: boolean;
    issue?: Issue;
};

/**
 * RepoCommit
 *
 * Represents a repository commit.
 */
export type RepoCommit = {
    /**
     * Deprecated (a copy of TagNames for backward compatability)
     */
    Tags?: Array<RepoTag>;
    author?: GitUser;
    /**
     * BranchNames associated with the commit
     */
    branch_names?: Array<string>;
    committer?: GitUser;
    /**
     * Commit creation date (author date)
     */
    created_at?: string;
    hash?: Sha1;
    /**
     * Linked issues
     */
    issues?: {
        [key: string]: string;
    };
    /**
     * Commit message
     */
    message?: string;
    /**
     * Parents of the commit
     */
    parents?: Array<Sha1>;
    /**
     * TagNames attached to commit
     */
    tag_names?: Array<string>;
};

/**
 * RepoConfig
 *
 * Repo settings from app config.
 */
export type RepoConfig = {
    disable_download_archives?: boolean;
    disable_merge_branch?: boolean;
    lfs_allow?: boolean;
};

/**
 * RepoContent
 *
 * Represents a repository content element.
 * Deprecated: Use RepoTreeNode instead
 */
export type RepoContent = {
    /**
     * Element git url (excluding host)
     */
    git_url?: string;
    /**
     * IsBinary identifies whether file is binary or not from the perspective of git
     */
    is_binary?: boolean;
    /**
     * IsLFS identifies whether file is lfs pointer
     */
    is_lfs?: boolean;
    last_commit?: RepoCommit;
    /**
     * Element name
     */
    name?: string;
    path?: TreePath;
    /**
     * Element SHA
     */
    sha?: string;
    /**
     * Element size
     */
    size?: number;
    submodule_info?: SubmoduleRepoContent;
    type?: RepoContentType;
};

/**
 * RepoContentType
 *
 * Represents repository tree element type.
 * Deprecated: Use RepoTreeNodeType instead
 */
export type RepoContentType = string;

export type RepoCoreFields = {
    clone_links?: CloneLinks;
    /**
     * Repo created timestamp.
     */
    created_at?: string;
    /**
     * Original repository URL set by the owner.
     * Default branch name.
     */
    default_branch?: string;
    /**
     * Description set by the owner.
     */
    description?: string;
    fork_slug?: RepoSlug;
    /**
     * IsFork flag identifying repo as fork
     */
    is_fork?: boolean;
    /**
     * Unique name.
     */
    name?: string;
    /**
     * Project key.
     */
    owner_name?: string;
    permissions?: RepositoryPermissions;
    /**
     * Repo topics (tags) set by owner.
     */
    topics?: Array<string>;
    /**
     * Repo updated timestamp.
     */
    updated_at?: string;
};

/**
 * RepoFile
 *
 * Represents a repository file content.
 */
export type RepoFile = {
    /**
     * Base64 encoded file content
     */
    content?: string;
    /**
     * IsBinary identifies whether file is binary or not from the perspective of git
     */
    is_binary?: boolean;
    /**
     * IsLFS identifies whether file is lfs pointer
     */
    is_lfs?: boolean;
    /**
     * File name
     */
    name?: string;
};

/**
 * RepoFork
 *
 * Represents the repository fork.
 */
export type RepoFork = {
    /**
     * Repository description.
     */
    description?: string;
    /**
     * Repository name.
     */
    name?: string;
    /**
     * Project description.
     */
    project_description?: string;
    /**
     * Project key.
     */
    project_key?: string;
    /**
     * Project name.
     */
    project_name?: string;
    /**
     * Repo fork updated timestamp.
     */
    updated_at?: string;
};

/**
 * RepoForkAsyncInfo
 *
 * Represents the repository async fork info.
 */
export type RepoForkAsyncInfo = {
    job_id?: JobId;
};

/**
 * RepoPolicy
 *
 * Represents a repository pull request settings.
 */
export type RepoPolicy = {
    allow_authors_to_approve_their_pull_requests?: RepoPolicyMode;
    /**
     * Allow auto merge.
     */
    allow_auto_merge?: boolean;
    /**
     * Min approves to merge.
     */
    approvals_min?: number;
    code_quality_scan_mode?: RepoPolicyMode;
    create_pr_hook_message_mode?: RepoPolicyMode;
    /**
     * Default DefaultAssignees
     */
    default_assignees?: Array<SimpleUser>;
    delete_source_branch_after_merge_by_default_mode?: RepoPolicyMode;
    /**
     * Description pull request setting description.
     */
    description?: string;
    /**
     * Unique pull request setting ID.
     */
    id?: number;
    /**
     * IsActive tag which indicates whether the setting is enabled
     */
    is_active?: boolean;
    /**
     * IsDefault pull request setting.
     */
    is_default?: boolean;
    merge_branch_source_up_to_date_mode?: RepoPolicyMode;
    merge_types_fast_forward_mode?: RepoPolicyMode;
    merge_types_merge_commit_mode?: RepoPolicyMode;
    merge_types_squash_mode?: RepoPolicyMode;
    merging_for_unassigned_changed_files_mode?: RepoPolicyMode;
    merging_without_linked_issues_mode?: RepoPolicyMode;
    /**
     * Name pull request setting name.
     */
    name?: string;
    /**
     * Max rejects to merge.
     */
    rejects_max?: number;
    repo_structure_branches_exclude?: Array<RepoStructure>;
    repo_structure_branches_include?: Array<RepoStructure>;
    repo_structure_paths_exclude?: Array<RepoStructure>;
    repo_structure_paths_include?: Array<RepoStructure>;
    /**
     * ReviewerGroups represents policy reviewer groups
     */
    reviewer_groups?: Array<PolicyReviewerGroup>;
    /**
     * SettingBuilds represents policy assembly settings
     */
    setting_builds?: Array<PolicyCiBuild>;
    /**
     * Updated at timestamp.
     */
    updated_at?: string;
};

/**
 * RepoPolicyInput
 *
 * Represents a create repository pull request settings.
 */
export type RepoPolicyInput = {
    allow_authors_to_approve_their_pull_requests?: RepoPolicyMode;
    /**
     * Allow auto merge.
     */
    allow_auto_merge?: boolean;
    /**
     * Min approves to merge.
     */
    approvals_min?: number;
    block_merging_without_reviewers_assigned_to_changed_files?: RepoPolicyMode;
    code_quality_scan_mode?: RepoPolicyMode;
    create_pr_hook_message_mode?: RepoPolicyMode;
    /**
     * List of default assignee principal names to set for each new PR created.
     */
    default_assignees?: Array<string>;
    delete_source_branch_after_merge_by_default_mode?: RepoPolicyMode;
    /**
     * Description pull request setting description.
     */
    description?: string;
    /**
     * IsActive tag which indicates whether the setting is enabled
     */
    is_active?: boolean;
    merge_branch_source_up_to_date_mode?: RepoPolicyMode;
    merge_types_fast_forward_mode?: RepoPolicyMode;
    merge_types_merge_commit_mode?: RepoPolicyMode;
    merge_types_squash_mode?: RepoPolicyMode;
    merging_for_unassigned_changed_files_mode?: RepoPolicyMode;
    merging_without_linked_issues_mode?: RepoPolicyMode;
    /**
     * Name pull request setting name.
     */
    name?: string;
    /**
     * Max rejects to merge.
     */
    rejects_max?: number;
    repo_structure_branches_exclude?: Array<RepoStructureId>;
    repo_structure_branches_include?: Array<RepoStructureId>;
    repo_structure_paths_exclude?: Array<RepoStructureId>;
    repo_structure_paths_include?: Array<RepoStructureId>;
    /**
     * ReviewerGroups represents policy reviewer groups
     */
    reviewer_groups?: Array<PolicyReviewerGroupInput>;
    setting_builds?: ListPolicyCiBuildInput;
    /**
     * Updated at timestamp.
     */
    updated_at?: string;
};

export type RepoPolicyMode = string;

export type RepoSlug = {
    name?: string;
    owner?: string;
};

/**
 * RepoStructure
 *
 * Creates a new repo structure.
 */
export type RepoStructure = {
    /**
     * Description of the repo structure.
     */
    description?: string;
    id?: RepoStructureId;
    /**
     * IsDefault determines that this field is default within this repository.
     */
    is_default?: boolean;
    /**
     * Regular expression of branch filter.
     */
    mask?: string;
    /**
     * Name filter.
     */
    name?: string;
};

/**
 * RepoStructureCreateInput
 *
 * Creates a new repo structure.
 */
export type RepoStructureCreateInput = {
    /**
     * Description of the repo structure.
     */
    description?: string;
    /**
     * Regular expression of branch filter.
     */
    mask: string;
    /**
     * Name repo structure.
     */
    name: string;
};

export type RepoStructureId = number;

/**
 * RepoStructurePatchInput
 *
 * Edit repo structure.
 */
export type RepoStructurePatchInput = {
    /**
     * Description of the repo structure.
     */
    description?: string;
    /**
     * Mask of branch filter.
     */
    mask: string;
    /**
     * Repo structure name.
     */
    name: string;
};

/**
 * RepoSubmodule
 *
 * Represents submodule related information.
 */
export type RepoSubmodule = {
    commit?: Sha1;
    /**
     * IsLocal detects if URL is in the same environment
     */
    is_local?: boolean;
    /**
     * TargetURL HTTP link to submodule repository
     */
    target_url?: string;
    /**
     * URL to submodule repository
     */
    url?: string;
};

/**
 * RepoTag
 *
 * Represents a repository tag.
 */
export type RepoTag = {
    commit?: Sha1;
    /**
     * Message of a tag
     */
    message?: string;
    /**
     * Name of a tag
     */
    name?: string;
};

/**
 * RepoTagErrorMetadata
 *
 * Represents a repository tag error metadata.
 */
export type RepoTagErrorMetadata = {
    conflicted_tag_name?: string;
};

/**
 * RepoTreeNode
 *
 * Represents a repository tree node.
 */
export type RepoTreeNode = {
    /**
     * Tree node ID
     */
    id?: string;
    /**
     * IsBinary identifies whether file is binary or not from the perspective of git
     */
    is_binary?: boolean;
    /**
     * IsExecutable identifies whether file is executable
     */
    is_executable?: boolean;
    /**
     * IsLFS identifies whether file is lfs pointer
     */
    is_lfs?: boolean;
    /**
     * Tree node name
     */
    name?: string;
    path?: TreePath;
    /**
     * Tree node size
     */
    size?: number;
    submodule?: RepoSubmodule;
    type?: RepoTreeNodeType;
};

/**
 * RepoTreeNodeMetadata
 *
 * Represents a repository tree node metadata.
 */
export type RepoTreeNodeMetadata = {
    /**
     * Tree node ID
     */
    id?: string;
    last_commit?: RepoCommit;
    /**
     * Tree node name
     */
    name?: string;
    path?: TreePath;
};

/**
 * RepoTreeNodeType
 *
 * Represents repository tree node type.
 */
export type RepoTreeNodeType = string;

/**
 * RepoUsageQuotas
 *
 * Repo usage quotas.
 */
export type RepoUsageQuotas = {
    /**
     * Defines if repo exceeds hard limit
     */
    repo_exceed_hard_limit?: boolean;
    /**
     * Defines if repo exceeds soft limit
     */
    repo_exceed_soft_limit?: boolean;
    /**
     * Repository size in bytes
     */
    repo_size?: number;
    /**
     * Repository size in human readable format
     */
    repo_size_human?: string;
    /**
     * Hard limit repository usage quotas setting.
     */
    repo_storage_policy_hard_limit?: number;
    /**
     * Hard limit repository usage quotas setting in human readable format.
     */
    repo_storage_policy_hard_limit_human?: string;
    /**
     * Soft limit repository usage quotas setting.
     */
    repo_storage_policy_soft_limit?: number;
    /**
     * Soft limit repository usage quotas setting in human readable format.
     */
    repo_storage_policy_soft_limit_human?: string;
    /**
     * UsageQuotasMessageEng a message that will be sent to further inform the user in English
     */
    usage_quotas_message_eng?: string;
    /**
     * UsageQuotasMessageRus a message that will be sent to further inform the user in Russian
     */
    usage_quotas_message_rus?: string;
};

/**
 * ReposGroupsInfo
 *
 * Represents repos and groups aggregate info.
 */
export type ReposGroupsInfo = {
    groups?: Array<Project>;
    repos?: Array<RepositoryListItem>;
};

/**
 * Repository
 *
 * Represents a repository.
 */
export type Repository = {
    clone_links?: CloneLinks;
    /**
     * Repo created timestamp.
     */
    created_at?: string;
    /**
     * Original repository URL set by the owner.
     * Default branch name.
     */
    default_branch?: string;
    /**
     * Description set by the owner.
     */
    description?: string;
    enable_paths_restrictions?: boolean;
    fork_slug?: RepoSlug;
    /**
     * IsFork flag identifying repo as fork
     */
    is_fork?: boolean;
    /**
     * Unique name.
     */
    name?: string;
    /**
     * Project key.
     */
    owner_name?: string;
    permissions?: RepositoryPermissions;
    repo_structure_paths_exclude?: Array<RepoStructure>;
    repo_structure_paths_include?: Array<RepoStructure>;
    /**
     * Repo topics (tags) set by owner.
     */
    topics?: Array<string>;
    /**
     * Repo updated timestamp.
     */
    updated_at?: string;
};

/**
 * RepositoryBranchCreated
 *
 * is emitted on branch created.
 */
export type RepositoryBranchCreated = {
    branch?: string;
    commit?: RepoCommit;
    requester?: SimpleUser;
    source_issue?: Issue;
};

/**
 * RepositoryBranchDeleted
 *
 * is emitted on branch deleted.
 */
export type RepositoryBranchDeleted = {
    branch?: string;
    requester?: SimpleUser;
    source_issue?: Issue;
};

/**
 * RepositoryBranchOrTagCreatedDeprecated
 * Deprecated events, remove in release 2024.11 or later
 * is emitted on branch/tag created.
 */
export type RepositoryBranchOrTagCreatedDeprecated = {
    branch?: string;
    commit?: RepoCommit;
    message?: string;
    requester?: SimpleUser;
    tag?: string;
};

/**
 * RepositoryBranchOrTagDeletedDeprecated
 * Deprecated events, remove in release 2024.11 or later
 * is emitted on branch/tag deleted.
 */
export type RepositoryBranchOrTagDeletedDeprecated = {
    branch?: string;
    message?: string;
    requester?: SimpleUser;
    tag?: string;
};

/**
 * RepositoryCreated
 * is emitted on repository creation
 */
export type RepositoryCreated = {
    requester?: SimpleUser;
};

/**
 * RepositoryDeleted
 * is emitted on repository deletion
 */
export type RepositoryDeleted = {
    requester?: SimpleUser;
};

/**
 * RepositoryListItem
 *
 * Represents a repository list item.
 */
export type RepositoryListItem = {
    clone_links?: CloneLinks;
    /**
     * Repo created timestamp.
     */
    created_at?: string;
    /**
     * Original repository URL set by the owner.
     * Default branch name.
     */
    default_branch?: string;
    /**
     * Description set by the owner.
     */
    description?: string;
    fork_slug?: RepoSlug;
    /**
     * IsFork flag identifying repo as fork
     */
    is_fork?: boolean;
    /**
     * Unique name.
     */
    name?: string;
    /**
     * Project key.
     */
    owner_name?: string;
    permissions?: RepositoryPermissions;
    /**
     * Repo topics (tags) set by owner.
     */
    topics?: Array<string>;
    /**
     * Repo updated timestamp.
     */
    updated_at?: string;
};

/**
 * RepositoryPermissions
 *
 * Represents repository permissions for user.
 */
export type RepositoryPermissions = {
    /**
     * CanCreateBranch defines access to create branches.
     */
    can_create_branch?: boolean;
    /**
     * CanCreatePr defines access to create pull request
     */
    can_create_pr?: boolean;
    /**
     * CanDeleteBranch defines access to delete branches.
     */
    can_delete_branch?: boolean;
    /**
     * CanEditAdvancedSettings defines access to edit repository webhooks settings.
     */
    can_edit_advanced_settings?: boolean;
    /**
     * CanEditContent defines access to edit files, push commits, create or delete branches etc.
     */
    can_edit_content?: boolean;
    /**
     * CanEditIssues defines access to create, edit, delete etc. pull request issues and comments.
     */
    can_edit_issues?: boolean;
    /**
     * CanEditPrSettings defines access to edit repository pull request settings.
     */
    can_edit_pr_settings?: boolean;
    /**
     * CanEditSettings defines access to edit repository settings (general, protected branches, etc.)
     */
    can_edit_settings?: boolean;
    /**
     * CanViewContent defines access to view commits, branches, diffs, files and to clone repository.
     */
    can_view_content?: boolean;
    /**
     * CanViewIssues defines access to view pull request issues and comments.
     */
    can_view_issues?: boolean;
    /**
     * CanViewPr defines access to view pull request
     */
    can_view_pr?: boolean;
    /**
     * CanViewSettings defines access to view repository settings (general, protected branches, webhooks etc.)
     */
    can_view_settings?: boolean;
    /**
     * CanWriteAdvanced defines access to delete repo.
     */
    can_write_advanced?: boolean;
};

/**
 * RepositoryPush
 *
 * is emitted on new commit push.
 */
export type RepositoryPush = {
    branch?: string;
    commit?: RepoCommit;
    requester?: SimpleUser;
    source_issue?: Issue;
};

/**
 * RepositoryTagCreated
 *
 * is emitted on tag created.
 */
export type RepositoryTagCreated = {
    commit?: RepoCommit;
    message?: string;
    requester?: SimpleUser;
    tag?: string;
};

/**
 * RepositoryTagDeleted
 *
 * is emitted on tag deleted.
 */
export type RepositoryTagDeleted = {
    message?: string;
    requester?: SimpleUser;
    tag?: string;
};

/**
 * ResolveConflictsInput
 *
 * Represents a pull request resolve conflicts input model.
 */
export type ResolveConflictsInput = {
    merge_commit_message?: string;
    resolved_files?: Array<MergeConflict>;
};

export type ResponsePageMeta = {
    /**
     * Next page cursor if available.
     */
    next_cursor?: string;
    /**
     * Previous page cursor if available.
     */
    prev_cursor?: string;
};

/**
 * ResponseWarning
 *
 * Defines the response warning.
 */
export type ResponseWarning = {
    data?: {
        [key: string]: unknown;
    };
    type?: ResponseWarningType;
};

/**
 * ResponseWarningType
 *
 * Defines the response warning type.
 */
export type ResponseWarningType = string;

/**
 * ResponseWarnings
 *
 * Defines the response occurred warnings.
 */
export type ResponseWarnings = {
    /**
     * List of warnings that occurred during the request.
     */
    warnings?: Array<ResponseWarning>;
};

/**
 * ReviewerGroup
 *
 * Represents reviewer group.
 */
export type ReviewerGroup = {
    /**
     * Auto approve by author, not considered within new logic after 2025.5
     */
    auto_approve_by_author?: boolean;
    /**
     * List of reviewers
     */
    default_reviewers?: Array<SimpleUser>;
    /**
     * File masks
     */
    file_masks?: Array<string>;
    id?: ReviewerGroupId;
    /**
     * Minimap amount of approves
     */
    min_approvals?: number;
    /**
     * Group name
     */
    name?: string;
    repo_slug?: RepoSlug;
    /**
     * Specify reviewers flag
     */
    specify_reviewers?: boolean;
    /**
     * Exclusive branch mask (implies multiple masks separated by comma)
     */
    target_branch_ignore_mask?: string;
    /**
     * Target branch mask (implies multiple masks separated by comma)
     */
    target_branch_mask?: string;
};

/**
 * ReviewerGroupAssignees
 *
 * # Represents pull request group reviewer assignees
 */
export type ReviewerGroupAssignees = {
    /**
     * Assignees list
     */
    assignees?: Array<Assignee>;
    id?: PullRequestReviewerGroupId;
    /**
     * Minimal amount of required approvals
     */
    min_approvals?: number;
    /**
     * Reviewer group name
     */
    name?: string;
};

export type ReviewerGroupId = number;

/**
 * ReviewerGroupInput
 *
 * Represents a reviewer group create/update options.
 */
export type ReviewerGroupInput = {
    /**
     * Auto approve by author
     */
    auto_approve_by_author?: boolean;
    /**
     * Default reviewers (list of principal names)
     */
    default_reviewers?: Array<string>;
    /**
     * File masks
     */
    file_masks?: Array<string>;
    id?: ReviewerGroupId;
    /**
     * Minimum amount of approvals
     */
    min_approvals?: number;
    /**
     * Group name
     */
    name: string;
    /**
     * Specify reviewers flag
     */
    specify_reviewers?: boolean;
    /**
     * Target branch ignore mask
     */
    target_branch_ignore_mask?: string;
    /**
     * Target branch mask
     */
    target_branch_mask?: string;
};

/**
 * SearchInput
 *
 * Represents the repository search input.
 */
export type SearchInput = {
    branch_names?: Array<string>;
    context_lines?: number;
    exclude_files?: string;
    include_files?: string;
    match_case?: boolean;
    match_whole_word?: boolean;
    max_match_count?: number;
    query?: string;
    use_regex?: boolean;
};

/**
 * SearchResult
 *
 * Represents repo search response.
 */
export type SearchResult = {
    files?: Array<FileMatch>;
    has_more_matches?: boolean;
};

/**
 * SearchSettings
 *
 * Represents repository search settings.
 */
export type SearchSettings = {
    /**
     * Branches defined for indexing
     */
    branches?: Array<IndexedBranch>;
    slug?: RepoSlug;
};

/**
 * SearchSettingsInput
 *
 * Represents repository search settings input.
 */
export type SearchSettingsInput = {
    /**
     * Branches defined for indexing
     */
    branches?: Array<string>;
};

/**
 * SecurityConfig
 *
 * Security limits from app config.
 */
export type SecurityConfig = {
    ssh_key?: TtlSecurityConfig;
    user_token?: TtlSecurityConfig;
};

/**
 * ServiceAccount
 *
 * Represents the project service account.
 */
export type ServiceAccount = {
    /**
     * Created timestamp.
     */
    created_at?: string;
    /**
     * Description.
     */
    description?: string;
    /**
     * Login.
     */
    login?: string;
    /**
     * Name.
     */
    name?: string;
    /**
     * Project key.
     */
    project_key?: string;
    /**
     * Updated timestamp.
     */
    updated_at?: string;
};

/**
 * ServiceAccountEntities
 *
 * Represents the project service account.
 */
export type ServiceAccountEntities = {
    /**
     * Names and IDs of all webhooks in a given project with a given service account.
     */
    webhooks?: Array<WebhookInfo>;
};

/**
 * ServiceInformation
 *
 * Service information about the object, which is strictly tied to the label.
 */
export type ServiceInformation = {
    /**
     * Label name
     */
    LabelName?: string;
    /**
     * Service information message in English up to 3000 characters.
     */
    message_en?: string;
    /**
     * Service information message in Russian up to 3000 characters.
     */
    message_ru?: string;
};

/**
 * ServiceTaskType
 *
 * Task service type.
 * enum:
 * sfera.task
 * none
 * type: string
 */
export type ServiceTaskType = string;

/**
 * Sha1 represents hash of the git objects (such as commit, blob, tag etc.)
 */
export type Sha1 = string;

/**
 * SimpleUser
 *
 * Represents basic user information.
 */
export type SimpleUser = {
    /**
     * Unique primary email.
     */
    email?: string;
    /**
     * First name.
     */
    first_name?: string;
    /**
     * Full name.
     */
    full_name?: string;
    /**
     * Last name.
     */
    last_name?: string;
    /**
     * Unique username (login).
     */
    login?: string;
    /**
     * Middle name.
     */
    middle_name?: string;
    /**
     * User principal name.
     */
    principal_name?: string;
};

/**
 * SourceBranchDeleteStatus
 *
 * Represents repository pull request source branch deletion status
 * none: no deletion was triggered
 * success: successfully deleted
 * not_found: source branch was not found
 * no_permission: user has no permissions for branch deletion
 * forbid_default_branch: cannot delete default branch
 * forbid_protected_branch: cannot delete protected branch
 * forbid_open_pull_requests: cannot delete branch with open pull requests
 * internal_error: unknown internal error happened during branch deletion
 */
export type SourceBranchDeleteStatus = string;

/**
 * SubmoduleRepoContent
 *
 * Represents a submodule element related information.
 * Deprecated: Use RepoSubmodule instead
 */
export type SubmoduleRepoContent = {
    /**
     * URL to the external submodule repository
     */
    url?: string;
};

/**
 * TTLSecurityConfig
 *
 * SSH keys limits from app config.
 */
export type TtlSecurityConfig = {
    allow_infinite_ttl?: boolean;
    /**
     * as duration string 3h12m33s
     */
    max_ttl?: string;
};

/**
 * TreePath is a path to the repository content entry
 */
export type TreePath = string;

/**
 * UpdateAutolinkSettingsInput
 *
 * Represents a repository autolink settings update options.
 */
export type UpdateAutolinkSettingsInput = {
    /**
     * If set then issues auto-linking are enabled.
     */
    is_active?: boolean;
    /**
     * This prefix appended by alphanumeric string(A-Z, 0-9,-) will generate a link anytime it is found in an issue, pull request or commit.
     */
    issue_prefix?: string;
    /**
     * Defines target URL template.
     * The URL must contain <num> for the reference number.
     */
    target_url_template?: string;
};

/**
 * UpdateIssueInput
 *
 * Represents the user issue update options.
 */
export type UpdateIssueInput = {
    /**
     * Issue name.
     */
    name?: string;
    /**
     * Issue external URL.
     */
    url?: string;
};

/**
 * UpdatePrSettingsInput
 *
 * Represents a repository pull request settings update options.
 *
 * # DEPRECATED
 */
export type UpdatePrSettingsInput = {
    /**
     * Indicates whether auto merge is allowed for the PR.
     */
    allow_auto_merge?: boolean;
    /**
     * Indicates whether fast-forward is allowed as a merge type.
     */
    allow_merge_types_fast_forward?: boolean;
    /**
     * Indicates whether merge commit is allowed as a merge type.
     */
    allow_merge_types_merge_commit?: boolean;
    /**
     * Indicated whether squash is allowed as a merge type.
     */
    allow_merge_types_squash?: boolean;
    /**
     * Minimum number of assignee approvals needed to merge a PR.
     */
    approvals_min?: number;
    /**
     * Indicates whether pull request merging should be blocked according to unassigned changed files.
     */
    block_merging_for_unassigned_changed_files?: boolean;
    /**
     * Indicates whether pull request merging should be blocked according to no linked issues.
     */
    block_merging_without_linked_issues?: boolean;
    /**
     * Defines the necessity of a successful code quality scan to merge a PR.
     * If False, code quality scan doesn't block the merge.
     */
    code_quality_scan?: boolean;
    /**
     * If set, the Git CLI displays a web link to create a new PR when a new branch is pushed.
     */
    create_pr_hook_message?: boolean;
    /**
     * List of default assignee principal names to set for each new PR created.
     */
    default_assignees?: Array<string>;
    /**
     * Indicates whether the source branch should be deleted after merge by default.
     */
    delete_source_branch_after_merge_by_default?: boolean;
    /**
     * Defines the necessity of a successful code quality scan to merge a PR.
     * If False, code quality scan doesn't block the merge.
     */
    merge_branch_source_up_to_date?: boolean;
    /**
     * Maximum number of assignee rejects that is acceptable to merge a PR.
     */
    rejects_max?: number;
};

/**
 * UpdateProjectInput
 *
 * Represents the project update options.
 */
export type UpdateProjectInput = {
    /**
     * Description.
     */
    description?: string;
    /**
     * Name.
     */
    full_name?: string;
    /**
     * Is project public or private (default - false).
     */
    is_public?: boolean;
    /**
     * Is project has lfs (default - false).
     */
    lfs_allow?: boolean;
};

/**
 * UpdateProjectUsageQuotasSettingsInput
 *
 * Update project usage quotas settings.
 */
export type UpdateProjectUsageQuotasSettingsInput = {
    /**
     * Enable soft file size usage quotas setting.
     */
    enable_file_storage_policy_limit?: boolean;
    /**
     * Enable soft repository usage quotas limit setting.
     */
    enable_repo_storage_policy_limit?: boolean;
    /**
     * Hard limit file usage quotas setting.
     */
    file_storage_policy_hard_limit?: number;
    /**
     * Soft limit file usage quotas setting.
     */
    file_storage_policy_soft_limit?: number;
    /**
     * Hard limit repository usage quotas setting.
     */
    repo_storage_policy_hard_limit?: number;
    /**
     * Soft limit repository usage quotas setting.
     */
    repo_storage_policy_soft_limit?: number;
};

/**
 * UpdateProtectedBranchesSettingsInput
 *
 * Represents repository protected branches settings update input.
 */
export type UpdateProtectedBranchesSettingsInput = Array<ProtectedBranchInput>;

/**
 * UpdatePullRequestInput
 *
 * Represents a repository pull request update options.
 */
export type UpdatePullRequestInput = {
    /**
     * Pull request description to set.
     */
    description?: string;
    /**
     * Pull request title to set.
     */
    title?: string;
};

/**
 * UpdateRepoPolicyInput
 *
 * Represents a repository pull request settings update options.
 */
export type UpdateRepoPolicyInput = {
    allow_authors_to_approve_their_pull_requests?: RepoPolicyMode;
    /**
     * Indicates whether auto merge is allowed for the PR.
     */
    allow_auto_merge?: boolean;
    /**
     * Minimum number of assignee approvals needed to merge a PR.
     */
    approvals_min?: number;
    block_merging_without_reviewers_assigned_to_changed_files?: RepoPolicyMode;
    code_quality_scan_mode?: RepoPolicyMode;
    create_pr_hook_message_mode?: RepoPolicyMode;
    /**
     * List of default assignee principal names to set for each new PR created.
     */
    default_assignees?: Array<string>;
    delete_source_branch_after_merge_by_default_mode?: RepoPolicyMode;
    /**
     * Description pull request setting description.
     */
    description?: string;
    /**
     * IsActive tag which indicates whether the setting is enabled
     */
    is_active?: boolean;
    merge_branch_source_up_to_date_mode?: RepoPolicyMode;
    merge_types_fast_forward_mode?: RepoPolicyMode;
    merge_types_merge_commit_mode?: RepoPolicyMode;
    merge_types_squash_mode?: RepoPolicyMode;
    merging_for_unassigned_changed_files_mode?: RepoPolicyMode;
    merging_without_linked_issues_mode?: RepoPolicyMode;
    /**
     * Name pull request setting name.
     */
    name?: string;
    /**
     * Maximum number of assignee rejects that is acceptable to merge a PR.
     */
    rejects_max?: number;
    repo_structure_branches_exclude?: Array<RepoStructureId>;
    repo_structure_branches_include?: Array<RepoStructureId>;
    repo_structure_paths_exclude?: Array<RepoStructureId>;
    repo_structure_paths_include?: Array<RepoStructureId>;
    /**
     * ReviewerGroups represents policy reviewer groups
     */
    reviewer_groups?: Array<PolicyReviewerGroupInput>;
    /**
     * SettingBuilds represents policy assembly settings
     */
    setting_builds?: Array<PolicyCiBuildUpdateInput>;
};

/**
 * UpdateRepositoryInput
 *
 * Represents the repository update options.
 */
export type UpdateRepositoryInput = {
    /**
     * Default branch name (a valid GitRefName).
     */
    default_branch?: string;
    /**
     * Short description.
     */
    description?: string;
    enable_paths_restrictions?: boolean;
    repo_structure_paths_exclude?: Array<RepoStructureId>;
    repo_structure_paths_include?: Array<RepoStructureId>;
    /**
     * Repo topics (tags).
     */
    topics?: Array<string>;
};

/**
 * UpdateServiceAccountInput
 *
 * Represents the project service account update options.
 */
export type UpdateServiceAccountInput = {
    /**
     * Description.
     */
    description?: string;
    /**
     * Login.
     */
    login?: string;
    /**
     * Password.
     */
    password?: string;
};

/**
 * UpdateUserPublicKeyInput
 *
 * Represents the user public key update options.
 */
export type UpdateUserPublicKeyInput = {
    /**
     * Public key data.
     */
    data?: string;
    /**
     * Key name (description).
     */
    name?: string;
    /**
     * Public key TTL.
     */
    ttl?: string;
};

/**
 * UpdateUserTokenInput
 *
 * Represents the user access token update options.
 */
export type UpdateUserTokenInput = {
    /**
     * Token name (description).
     */
    name?: string;
    /**
     * Token TTL.
     */
    ttl?: string;
};

/**
 * UpdateWebhookInput
 *
 * Represents webhook update options.
 */
export type UpdateWebhookInput = {
    branch_and_tag_filter?: WebhookBranchAndTagFilter;
    events?: WebhookEvents;
    /**
     * Is webhook active or disabled.
     */
    is_active?: boolean;
    /**
     * Unique name.
     */
    name?: string;
    pull_request_target_branch_filter?: WebhookPullRequestTargetBranchFilter;
    receiver?: WebhookReceiver;
};

/**
 * User
 *
 * Represents the application user.
 */
export type User = {
    /**
     * User created timestamp.
     */
    created_at?: string;
    /**
     * Unique primary email.
     */
    email?: string;
    /**
     * First name.
     */
    first_name?: string;
    /**
     * Full name.
     */
    full_name?: string;
    /**
     * Last name.
     */
    last_name?: string;
    /**
     * Unique username (login).
     */
    login?: string;
    /**
     * Middle name.
     */
    middle_name?: string;
    permissions?: UserPermissions;
    /**
     * User principal name.
     */
    principal_name?: string;
};

/**
 * UserLoginsInput
 *
 * Represents user principal names input.
 */
export type UserLoginsInput = Array<string>;

/**
 * UserPermissions
 *
 * Represents user permissions.
 */
export type UserPermissions = {
    /**
     * CanCreateProject defines access to create projects.
     */
    can_create_project?: boolean;
    /**
     * CanEditAdvancedQualityGate defines access to delete quality gates and to edit plugins.
     */
    can_edit_advanced_quality_gate?: boolean;
    /**
     * CanEditAdvancedQualityPlugin defines access to activate, deactivate or delete plugin.
     */
    can_edit_advanced_quality_plugin?: boolean;
    /**
     * CanEditQualityGate defines access to edit quality gates.
     */
    can_edit_quality_gate?: boolean;
    /**
     * CanEditQualityPlugin defines access to edit plugin general settings, activate/deactivate plugin rules, etc.
     */
    can_edit_quality_plugin?: boolean;
    /**
     * CanEditRoles defines access to assign roles, actions.
     */
    can_edit_roles?: boolean;
    /**
     * CanViewKnowledgeBase defines access to view list of rules and rules itself.
     */
    can_view_knowledge_base?: boolean;
    /**
     * CanViewQualityGate defines access to view quality gates.
     */
    can_view_quality_gate?: boolean;
    /**
     * CanViewQualityPlugin defines access to view plugins and plugin's rules.
     */
    can_view_quality_plugin?: boolean;
    /**
     * CanViewRoles defines access to view roles, actions.
     */
    can_view_roles?: boolean;
    /**
     * CanViewSelfSshKey defines access to view list of ssh keys itself.
     */
    can_view_self_ssh_key?: boolean;
    /**
     * CanViewSelfToken defines access to view list of tokens itself.
     */
    can_view_self_token?: boolean;
    /**
     * CanViewSshKey defines access to view list of ssh keys.
     */
    can_view_ssh_key?: boolean;
    /**
     * CanWriteAdvancedSelfSshKey defines advanced access to edit list of ssh keys itself.
     */
    can_write_advanced_self_ssh_key?: boolean;
    /**
     * CanWriteAdvancedSelfToken defines advanced access to edit list of tokens itself.
     */
    can_write_advanced_self_token?: boolean;
    /**
     * CanWriteAdvancedSshKey defines access to edit list of ssh keys.
     */
    can_write_advanced_ssh_key?: boolean;
    /**
     * CanWriteSelfSshKey defines access to edit list of ssh keys itself.
     */
    can_write_self_ssh_key?: boolean;
    /**
     * CanWriteSelfToken defines access to edit list of tokens itself.
     */
    can_write_self_token?: boolean;
};

/**
 * UserPublicFingerprint
 *
 * defines a user public key fingerprint (hash).
 */
export type UserPublicFingerprint = string;

/**
 * UserPublicKey
 *
 * Represents the user public key used for interaction with a repository over SSH.
 */
export type UserPublicKey = {
    /**
     * Key data.
     */
    content?: string;
    /**
     * Key created timestamp.
     */
    created_at?: string;
    /**
     * Key expiration timestamp.
     */
    expires_at?: string;
    fingerprint?: UserPublicFingerprint;
    /**
     * Key expiration flag.
     */
    is_expired?: boolean;
    /**
     * Name of the key.
     */
    name?: string;
    /**
     * Key owner name (username).
     */
    owner_name?: string;
};

/**
 * UserSuggestion
 *
 * Represents the suggestion user.
 */
export type UserSuggestion = {
    /**
     * Unique primary email.
     */
    email?: string;
    /**
     * First name.
     */
    first_name?: string;
    /**
     * Full name.
     */
    full_name?: string;
    /**
     * Last name.
     */
    last_name?: string;
    /**
     * User login.
     */
    login?: string;
    /**
     * Middle name.
     */
    middle_name?: string;
    /**
     * User principal name.
     */
    principal_name?: string;
};

/**
 * UserToken
 *
 * Represents the user access token.
 */
export type UserToken = {
    /**
     * Token created timestamp.
     */
    created_at?: string;
    /**
     * Token expiration timestamp.
     */
    expires_at?: string;
    hash?: UserTokenHash;
    /**
     * Token expiration flag.
     */
    is_expired?: boolean;
    /**
     * Name of the token.
     */
    name?: string;
    /**
     * Last eight characters of the token.
     */
    suffix?: string;
    /**
     * Token value (returned only on creation).
     */
    token?: string;
};

/**
 * UserTokenHash
 *
 * defines a unique user access token hash (ID).
 */
export type UserTokenHash = string;

/**
 * Webhook
 *
 * Represents webhook information.
 */
export type Webhook = {
    branch_and_tag_filter?: WebhookBranchAndTagFilter;
    /**
     * Creation time.
     */
    created_at?: string;
    /**
     * List of events.
     */
    events?: Array<WebhookEvent>;
    id?: WebhookId;
    /**
     * Is webhook active or disabled.
     */
    is_active?: boolean;
    /**
     * Unique name.
     */
    name?: string;
    pull_request_target_branch_filter?: WebhookPullRequestTargetBranchFilter;
    receiver?: WebhookReceiver;
    /**
     * Last update time.
     */
    updated_at?: string;
};

/**
 * WebhookBranchAndTagFilter
 *
 * Represents webhook branch and tag filter (glob).
 */
export type WebhookBranchAndTagFilter = string;

/**
 * WebhookEvent
 *
 * Represents webhook event.
 * pull_request_created: created event, which is guaranteed to trigger once upon pull request creation.
 * pull_request_open: triggers on some events of pull_request_status_change (pr_status=open, pr_merge_status=ready)
 * pull_request_commit: triggers on pull request commit
 * pull_request_merged: triggers on pull request merged
 * pull_request_closed: triggers on pull request closed
 * repository_push: triggers on push
 * repository_branch_created: triggers on branch created
 * repository_branch_deleted: triggers on branch deleted
 * repository_tag_created: triggers on tag created
 * repository_tag_deleted: triggers on tag deleted
 */
export type WebhookEvent = string;

/**
 * WebhookEvents
 *
 * Represents list of WebhookEvent
 */
export type WebhookEvents = Array<WebhookEvent>;

export type WebhookId = number;

/**
 * WebhookInfo
 *
 * A brief description of the webhooks created for display before deleting the service account.
 */
export type WebhookInfo = {
    id?: WebhookId;
    name?: string;
};

/**
 * WebhookPullRequestTargetBranchFilter
 *
 * Represents webhook branch filter (glob).
 */
export type WebhookPullRequestTargetBranchFilter = string;

/**
 * WebhookReceiver
 *
 * Represents event receiver.
 */
export type WebhookReceiver = {
    http?: WebhookReceiverHttp;
    jenkins?: WebhookReceiverJenkins;
    sfera?: WebhookReceiverSferaOrch;
    telegram?: WebhookReceiverTelegram;
};

/**
 * WebhookReceiverHttp
 *
 * Represents http webhook receiver.
 */
export type WebhookReceiverHttp = {
    auth?: WebhookReceiverHttpAuth;
    /**
     * Request content type.
     */
    content_type?: string;
    /**
     * Request method.
     */
    method?: string;
    /**
     * Request URL.
     */
    url?: string;
};

/**
 * WebhookReceiverHttpAuth
 *
 * Represents http receiver authentication method.
 */
export type WebhookReceiverHttpAuth = {
    /**
     * Authentication via sfera.channel (without credentials).
     */
    sfera_channel?: {
        [key: string]: unknown;
    };
};

/**
 * WebhookReceiverJenkins
 *
 * Represents jenkins webhook receiver.
 */
export type WebhookReceiverJenkins = {
    /**
     * API token
     */
    api_token?: string;
    /**
     * Request content type
     */
    content_type?: string;
    /**
     * Crumb service account name
     */
    crumb_service_account?: string;
    /**
     * URL for fetching crumb
     */
    crumb_url?: string;
    /**
     * Jenkins url
     */
    jenkins_url?: string;
    /**
     * Request method
     */
    method?: string;
    /**
     * Use crumb toggle
     */
    use_crumb?: boolean;
};

/**
 * WebhookReceiverSferaOrch
 *
 * Represents sfera orchestration webhook receiver.
 */
export type WebhookReceiverSferaOrch = {
    /**
     * Request content type.
     */
    content_type?: string;
    /**
     * Request method.
     */
    method?: string;
    /**
     * Sfera CI/CD project ID or URL.
     */
    project_id_or_url?: string;
    /**
     * Service account name (unique within project).
     */
    service_account?: string;
};

/**
 * WebhookReceiverTelegram
 *
 * Represents telegram webhook receiver.
 */
export type WebhookReceiverTelegram = {
    /**
     * Account/Group chat id.
     */
    chat_id?: string;
    /**
     * Bot token.
     */
    token?: string;
};

export type DtoPullRequestPolicyReviewerGroup = {
    allow_approve_by_author_mode?: RepoPolicyMode;
    /**
     * Creation timestamp
     */
    created_at?: string;
    /**
     * ID of the reviewer group
     */
    group_id?: string;
    /**
     * LDAP key for the group
     */
    group_ldap_key?: string;
    /**
     * List of group member IDs
     */
    group_members?: Array<number>;
    /**
     * Name of the reviewer group
     */
    group_name?: string;
    /**
     * List of group user details
     */
    group_users?: Array<Assignee>;
    /**
     * Unique identifier of the reviewer group
     */
    id?: number;
    /**
     * Whether this is an external review group
     */
    is_external?: boolean;
    /**
     * Whether this group can be removed
     */
    is_removable?: boolean;
    /**
     * Whether this group is required for approval
     */
    is_required?: boolean;
    merging_for_unassigned_changed_files_mode?: RepoPolicyMode;
    /**
     * Number of required approvals from this group
     */
    number_of_approvals?: number;
    pr_id?: PullRequestId;
    /**
     * ID policy of the pull request
     */
    pr_policy_id?: number;
    /**
     * ID of the user
     */
    reviewer_id?: number;
    reviewer_user?: Assignee;
    /**
     * Whether specific reviewers must be specified
     */
    specify_reviewers?: boolean;
    /**
     * Last update timestamp
     */
    updated_at?: string;
};

export type EngrAuthResetCacheData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * user ids array
         */
        user_ids?: Array<string>;
        /**
         * if self is true, then the cache value is reset for the user who makes the request
         */
        self?: boolean;
    };
    url: '/admin/cache/permissions';
};

export type EngrAuthResetCacheErrors = {
    400: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    403: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    500: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type EngrAuthResetCacheError = EngrAuthResetCacheErrors[keyof EngrAuthResetCacheErrors];

export type EngrAuthResetCacheResponses = {
    /**
     * No Content
     */
    200: unknown;
};

export type ConfigData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/config';
};

export type ConfigErrors = {
    500: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type ConfigError = ConfigErrors[keyof ConfigErrors];

export type ConfigResponses = {
    200: {
        data?: Config;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type ConfigResponse = ConfigResponses[keyof ConfigResponses];

export type DeleteFavoriteProjectData = {
    body?: never;
    path: {
        /**
         * key of the project
         */
        projectKey: string;
    };
    query?: never;
    url: '/favorite/projects/{projectKey}';
};

export type DeleteFavoriteProjectErrors = {
    400: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    403: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    500: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type DeleteFavoriteProjectError = DeleteFavoriteProjectErrors[keyof DeleteFavoriteProjectErrors];

export type DeleteFavoriteProjectResponses = {
    /**
     * No Content
     */
    200: unknown;
};

export type AddFavoriteProjectData = {
    body?: never;
    path: {
        /**
         * key of the project
         */
        projectKey: string;
    };
    query?: never;
    url: '/favorite/projects/{projectKey}';
};

export type AddFavoriteProjectErrors = {
    403: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    500: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type AddFavoriteProjectError = AddFavoriteProjectErrors[keyof AddFavoriteProjectErrors];

export type AddFavoriteProjectResponses = {
    200: {
        data?: FavoriteProject;
        page?: ResponsePageMeta;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type AddFavoriteProjectResponse = AddFavoriteProjectResponses[keyof AddFavoriteProjectResponses];

export type HealthCheckData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/health';
};

export type HealthCheckResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type RunJobData = {
    body?: JobInput;
    path?: never;
    query?: never;
    url: '/jobs/run';
};

export type RunJobErrors = {
    400: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    403: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    500: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type RunJobError = RunJobErrors[keyof RunJobErrors];

export type RunJobResponses = {
    200: {
        data?: Job;
        page?: ResponsePageMeta;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type RunJobResponse = RunJobResponses[keyof RunJobResponses];

export type GetJobData = {
    body?: never;
    path: {
        /**
         * id of the project
         */
        jobId: number;
    };
    query?: never;
    url: '/jobs/{jobId}';
};

export type GetJobErrors = {
    400: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    403: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    500: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type GetJobError = GetJobErrors[keyof GetJobErrors];

export type GetJobResponses = {
    200: {
        data?: Job;
        page?: ResponsePageMeta;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type GetJobResponse = GetJobResponses[keyof GetJobResponses];

export type ListProjectsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * cursor of the requested page (received from the previous request)
         */
        cursor?: string;
        /**
         * page size of results (ignored if cursor is set)
         */
        limit?: number;
        /**
         * sorting type of results
         */
        sort?: string;
        /**
         * sort order of results
         */
        order?: string;
        /**
         * filter organizations by name
         */
        q?: string;
        /**
         * filter favorite projects
         */
        favoriteProjects?: number;
        /**
         * filter projects with sfera.code.project.repo.create available permission
         */
        createAction?: unknown;
    };
    url: '/projects';
};

export type ListProjectsErrors = {
    400: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    403: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    500: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type ListProjectsError = ListProjectsErrors[keyof ListProjectsErrors];

export type ListProjectsResponses = {
    200: {
        data?: Array<Project>;
        page?: ResponsePageMeta;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type ListProjectsResponse = ListProjectsResponses[keyof ListProjectsResponses];

export type CreateProjectData = {
    body?: CreateProjectInput;
    path?: never;
    query?: never;
    url: '/projects';
};

export type CreateProjectErrors = {
    400: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    403: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    500: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type CreateProjectError = CreateProjectErrors[keyof CreateProjectErrors];

export type CreateProjectResponses = {
    200: {
        data?: Project;
        page?: ResponsePageMeta;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type CreateProjectResponse = CreateProjectResponses[keyof CreateProjectResponses];

export type StartRepositoriesMigrationData = {
    body?: MultiMigrationOptions;
    path?: never;
    query?: never;
    url: '/projects/repos/migration';
};

export type StartRepositoriesMigrationErrors = {
    400: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    403: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    500: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type StartRepositoriesMigrationError = StartRepositoriesMigrationErrors[keyof StartRepositoriesMigrationErrors];

export type StartRepositoriesMigrationResponses = {
    200: {
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type StartRepositoriesMigrationResponse = StartRepositoriesMigrationResponses[keyof StartRepositoriesMigrationResponses];

export type DeleteProjectData = {
    body?: never;
    path: {
        /**
         * key of the project
         */
        projectKey: string;
    };
    query?: never;
    url: '/projects/{projectKey}';
};

export type DeleteProjectErrors = {
    400: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    403: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    500: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type DeleteProjectError = DeleteProjectErrors[keyof DeleteProjectErrors];

export type DeleteProjectResponses = {
    200: {
        data?: Array<DeleteAsyncProjectInfo>;
        page?: ResponsePageMeta;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type DeleteProjectResponse = DeleteProjectResponses[keyof DeleteProjectResponses];

export type GetProjectData = {
    body?: never;
    path: {
        /**
         * key of the project
         */
        projectKey: string;
    };
    query?: never;
    url: '/projects/{projectKey}';
};

export type GetProjectErrors = {
    400: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    403: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    500: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type GetProjectError = GetProjectErrors[keyof GetProjectErrors];

export type GetProjectResponses = {
    200: {
        data?: Project;
        page?: ResponsePageMeta;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type GetProjectResponse = GetProjectResponses[keyof GetProjectResponses];

export type UpdateProjectData = {
    body?: UpdateProjectInput;
    path: {
        /**
         * key of the project
         */
        projectKey: string;
    };
    query?: never;
    url: '/projects/{projectKey}';
};

export type UpdateProjectErrors = {
    400: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    403: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    500: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type UpdateProjectError = UpdateProjectErrors[keyof UpdateProjectErrors];

export type UpdateProjectResponses = {
    200: {
        data?: Project;
        page?: ResponsePageMeta;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type UpdateProjectResponse = UpdateProjectResponses[keyof UpdateProjectResponses];

export type ListProjectContentData = {
    body?: never;
    path: {
        /**
         * key of the project
         */
        projectKey: string;
    };
    query?: {
        /**
         * cursor of the requested page (received from the previous request)
         */
        cursor?: string;
        /**
         * page size of results (ignored if cursor is set)
         */
        limit?: number;
        /**
         * sorting type of results
         */
        sort?: string;
        /**
         * sort order of results
         */
        order?: string;
        /**
         * filter repos by name
         */
        q?: string;
    };
    url: '/projects/{projectKey}/content';
};

export type ListProjectContentErrors = {
    400: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    403: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    404: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    500: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type ListProjectContentError = ListProjectContentErrors[keyof ListProjectContentErrors];

export type ListProjectContentResponses = {
    200: {
        data?: Repository;
        page?: ResponsePageMeta;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type ListProjectContentResponse = ListProjectContentResponses[keyof ListProjectContentResponses];

export type GetProjectGroupsData = {
    body?: never;
    path: {
        /**
         * key of the project
         */
        projectKey: string;
    };
    query?: {
        /**
         * get groups recursively
         */
        recursive?: boolean;
        /**
         * sorting type of results
         */
        sort?: string;
        /**
         * sort order of results
         */
        order?: string;
        /**
         * cursor of the requested page (received from the previous request)
         */
        cursor?: string;
        /**
         * page size of results
         */
        limit?: number;
    };
    url: '/projects/{projectKey}/groups';
};

export type GetProjectGroupsErrors = {
    400: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    403: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    500: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type GetProjectGroupsError = GetProjectGroupsErrors[keyof GetProjectGroupsErrors];

export type GetProjectGroupsResponses = {
    200: {
        data?: Array<Project>;
        page?: ResponsePageMeta;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type GetProjectGroupsResponse = GetProjectGroupsResponses[keyof GetProjectGroupsResponses];

export type ListProjectReposData = {
    body?: never;
    path: {
        /**
         * key of the project
         */
        projectKey: string;
    };
    query?: {
        /**
         * cursor of the requested page (received from the previous request)
         */
        cursor?: string;
        /**
         * page size of results (ignored if cursor is set)
         */
        limit?: number;
        /**
         * sorting type of results
         */
        sort?: string;
        /**
         * sort order of results
         */
        order?: string;
        /**
         * filter repos by name
         */
        q?: string;
    };
    url: '/projects/{projectKey}/repos';
};

export type ListProjectReposErrors = {
    400: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    403: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    404: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    500: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type ListProjectReposError = ListProjectReposErrors[keyof ListProjectReposErrors];

export type ListProjectReposResponses = {
    200: {
        data?: Array<RepositoryListItem>;
        page?: ResponsePageMeta;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type ListProjectReposResponse = ListProjectReposResponses[keyof ListProjectReposResponses];

export type CreateProjectRepoData = {
    body?: CreateRepositoryInput;
    path: {
        /**
         * key of the project
         */
        projectKey: string;
    };
    query?: never;
    url: '/projects/{projectKey}/repos';
};

export type CreateProjectRepoErrors = {
    400: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    403: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    500: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type CreateProjectRepoError = CreateProjectRepoErrors[keyof CreateProjectRepoErrors];

export type CreateProjectRepoResponses = {
    200: {
        data?: Repository;
        page?: ResponsePageMeta;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type CreateProjectRepoResponse = CreateProjectRepoResponses[keyof CreateProjectRepoResponses];

export type DeleteProjectRepoData = {
    body?: never;
    path: {
        /**
         * key of the project
         */
        projectKey: string;
        /**
         * name of the repository
         */
        repoName: string;
    };
    query?: never;
    url: '/projects/{projectKey}/repos/{repoName}';
};

export type DeleteProjectRepoErrors = {
    400: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    403: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    500: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type DeleteProjectRepoError = DeleteProjectRepoErrors[keyof DeleteProjectRepoErrors];

export type DeleteProjectRepoResponses = {
    200: {
        data?: DeleteRepoInfo;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type DeleteProjectRepoResponse = DeleteProjectRepoResponses[keyof DeleteProjectRepoResponses];

export type GetProjectRepoData = {
    body?: never;
    path: {
        /**
         * key of the project
         */
        projectKey: string;
        /**
         * name of the repository
         */
        repoName: string;
    };
    query?: never;
    url: '/projects/{projectKey}/repos/{repoName}';
};

export type GetProjectRepoErrors = {
    400: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    403: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    500: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type GetProjectRepoError = GetProjectRepoErrors[keyof GetProjectRepoErrors];

export type GetProjectRepoResponses = {
    200: {
        data?: Repository;
        page?: ResponsePageMeta;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type GetProjectRepoResponse = GetProjectRepoResponses[keyof GetProjectRepoResponses];

export type UpdateProjectRepoData = {
    body?: UpdateRepositoryInput;
    path: {
        /**
         * key of the project
         */
        projectKey: string;
        /**
         * name of the repository
         */
        repoName: string;
    };
    query?: never;
    url: '/projects/{projectKey}/repos/{repoName}';
};

export type UpdateProjectRepoErrors = {
    400: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    403: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    500: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type UpdateProjectRepoError = UpdateProjectRepoErrors[keyof UpdateProjectRepoErrors];

export type UpdateProjectRepoResponses = {
    200: {
        data?: Repository;
        page?: ResponsePageMeta;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type UpdateProjectRepoResponse = UpdateProjectRepoResponses[keyof UpdateProjectRepoResponses];

export type ArchiveRepoData = {
    body?: never;
    path: {
        /**
         * key of the project
         */
        projectKey: string;
        /**
         * name of the repository
         */
        repoName: string;
        /**
         * revision of the repository, refs or commit hash
         */
        gitRev: string;
        /**
         * format of the archive file
         */
        format: string;
    };
    query?: never;
    url: '/projects/{projectKey}/repos/{repoName}/archive/{gitRev}.{format}';
};

export type ArchiveRepoErrors = {
    400: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    403: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    404: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    500: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type ArchiveRepoError = ArchiveRepoErrors[keyof ArchiveRepoErrors];

export type ArchiveRepoResponses = {
    /**
     * archive file
     */
    200: Blob | File;
};

export type ArchiveRepoResponse = ArchiveRepoResponses[keyof ArchiveRepoResponses];

export type GetProjectRepoFileBlameInfoData = {
    body?: never;
    path: {
        /**
         * key of the project
         */
        projectKey: string;
        /**
         * name of the repository
         */
        repoName: string;
        /**
         * path to the repository file object
         */
        treePath: string;
    };
    query: {
        /**
         * git rev (commit/branch/tag,commit-ish or any other git revision).
         */
        rev: string;
        /**
         * cursor of the requested page (received from the previous request)
         */
        cursor?: string;
        /**
         * page size of results (ignored if cursor is set)
         */
        limit?: number;
    };
    url: '/projects/{projectKey}/repos/{repoName}/blame/{treePath}';
};

export type GetProjectRepoFileBlameInfoErrors = {
    400: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    401: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    403: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    500: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type GetProjectRepoFileBlameInfoError = GetProjectRepoFileBlameInfoErrors[keyof GetProjectRepoFileBlameInfoErrors];

export type GetProjectRepoFileBlameInfoResponses = {
    200: {
        data?: Array<LineBlameInfo>;
        page?: ResponsePageMeta;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type GetProjectRepoFileBlameInfoResponse = GetProjectRepoFileBlameInfoResponses[keyof GetProjectRepoFileBlameInfoResponses];

export type DeleteProjectRepoBranchesData = {
    body?: DeleteBranchesInput;
    path: {
        /**
         * key of the project
         */
        projectKey: string;
        /**
         * name of the repository
         */
        repoName: string;
    };
    query?: never;
    url: '/projects/{projectKey}/repos/{repoName}/branches';
};

export type DeleteProjectRepoBranchesErrors = {
    400: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    403: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    500: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type DeleteProjectRepoBranchesError = DeleteProjectRepoBranchesErrors[keyof DeleteProjectRepoBranchesErrors];

export type DeleteProjectRepoBranchesResponses = {
    200: {
        data?: DeleteBranchesInfo;
        page?: ResponsePageMeta;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type DeleteProjectRepoBranchesResponse = DeleteProjectRepoBranchesResponses[keyof DeleteProjectRepoBranchesResponses];

export type ListProjectRepoBranchesData = {
    body?: never;
    path: {
        /**
         * key of the project
         */
        projectKey: string;
        /**
         * name of the repository
         */
        repoName: string;
    };
    query?: {
        /**
         * sorting type of results
         */
        sort?: string;
        /**
         * sort order of results
         */
        order?: string;
        /**
         * filter branches by name
         */
        q?: string;
        /**
         * list merged branches
         */
        merged?: boolean;
        /**
         * issue name to find all branches to which the issue entity is linked.
         */
        issueName?: string;
    };
    url: '/projects/{projectKey}/repos/{repoName}/branches';
};

export type ListProjectRepoBranchesErrors = {
    400: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    403: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    500: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type ListProjectRepoBranchesError = ListProjectRepoBranchesErrors[keyof ListProjectRepoBranchesErrors];

export type ListProjectRepoBranchesResponses = {
    200: {
        data?: Array<RepoBranch>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type ListProjectRepoBranchesResponse = ListProjectRepoBranchesResponses[keyof ListProjectRepoBranchesResponses];

export type CreateProjectRepoBranchData = {
    body?: CreateBranchInput;
    path: {
        /**
         * key of the project
         */
        projectKey: string;
        /**
         * name of the repository
         */
        repoName: string;
    };
    query?: never;
    url: '/projects/{projectKey}/repos/{repoName}/branches';
};

export type CreateProjectRepoBranchErrors = {
    400: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    403: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    500: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type CreateProjectRepoBranchError = CreateProjectRepoBranchErrors[keyof CreateProjectRepoBranchErrors];

export type CreateProjectRepoBranchResponses = {
    200: {
        data?: RepoBranch;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type CreateProjectRepoBranchResponse = CreateProjectRepoBranchResponses[keyof CreateProjectRepoBranchResponses];

export type GetProjectRepoBranchMetadataData = {
    body?: BranchWithMetadataInput;
    path: {
        /**
         * key of the project
         */
        projectKey: string;
        /**
         * name of the repository
         */
        repoName: string;
    };
    query?: {
        /**
         * git ahead-behind rev (commit/branch/tag,commit-ish or any other git revision). See git-for-each-ref.
         */
        behindAheadBaseRev?: string;
        /**
         * whether to include orphan status
         */
        withOrphanStatus?: boolean;
    };
    url: '/projects/{projectKey}/repos/{repoName}/branches/metadata';
};

export type GetProjectRepoBranchMetadataErrors = {
    403: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    500: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type GetProjectRepoBranchMetadataError = GetProjectRepoBranchMetadataErrors[keyof GetProjectRepoBranchMetadataErrors];

export type GetProjectRepoBranchMetadataResponses = {
    200: {
        data?: {
            [key: string]: RepoBranchWithMetadata;
        };
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type GetProjectRepoBranchMetadataResponse = GetProjectRepoBranchMetadataResponses[keyof GetProjectRepoBranchMetadataResponses];

export type DeleteProjectRepoBranchData = {
    body?: never;
    path: {
        /**
         * key of the project
         */
        projectKey: string;
        /**
         * name of the repository
         */
        repoName: string;
        /**
         * name of the branch
         */
        branchName: string;
    };
    query?: never;
    url: '/projects/{projectKey}/repos/{repoName}/branches/{branchName}';
};

export type DeleteProjectRepoBranchErrors = {
    400: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    403: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    500: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type DeleteProjectRepoBranchError = DeleteProjectRepoBranchErrors[keyof DeleteProjectRepoBranchErrors];

export type DeleteProjectRepoBranchResponses = {
    /**
     * No Content
     */
    200: unknown;
};

export type GetProjectRepoBranchData = {
    body?: never;
    path: {
        /**
         * key of the project
         */
        projectKey: string;
        /**
         * name of the repository
         */
        repoName: string;
        /**
         * name of the branch
         */
        branchName: string;
    };
    query?: {
        /**
         * git ahead-behind rev (commit/branch/tag,commit-ish or any other git revision). See git-for-each-ref.
         */
        behindAheadBaseRev?: string;
    };
    url: '/projects/{projectKey}/repos/{repoName}/branches/{branchName}';
};

export type GetProjectRepoBranchErrors = {
    400: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    403: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    500: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type GetProjectRepoBranchError = GetProjectRepoBranchErrors[keyof GetProjectRepoBranchErrors];

export type GetProjectRepoBranchResponses = {
    200: {
        data?: RepoBranch;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type GetProjectRepoBranchResponse = GetProjectRepoBranchResponses[keyof GetProjectRepoBranchResponses];

export type GetBundleData = {
    body?: never;
    path: {
        /**
         * key of the project
         */
        projectKey: string;
        /**
         * name of the repository
         */
        repoName: string;
        /**
         * id of the bundle
         */
        bundleId: string;
    };
    query?: never;
    url: '/projects/{projectKey}/repos/{repoName}/bundles/{bundleId}';
};

export type GetBundleErrors = {
    400: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    403: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    404: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    500: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type GetBundleError = GetBundleErrors[keyof GetBundleErrors];

export type GetBundleResponses = {
    /**
     * bundle file data
     */
    200: unknown;
};

export type ListProjectRepoCommitsData = {
    body?: never;
    path: {
        /**
         * key of the project
         */
        projectKey: string;
        /**
         * name of the repository
         */
        repoName: string;
    };
    query?: {
        /**
         * DEPRECATED!!! use `rev` parameter instead.
         */
        ref?: string;
        /**
         * git rev (commit/branch/tag,commit-ish or any other git revision). Returns all commits by default.
         */
        rev?: string;
        /**
         * git until rev (commit/branch/tag,commit-ish or any other git revision). See git log A..B.
         */
        until?: string;
        /**
         * commit author
         */
        author?: string;
        /**
         * committer of the commit
         */
        committer?: string;
        /**
         * cursor of the requested page (received from the previous request)
         */
        cursor?: string;
        /**
         * page size of results (ignored if cursor is set)
         */
        limit?: number;
        /**
         * show commits older than a specific date.
         */
        before?: string;
        /**
         * show commits more recent than a specific date.
         */
        after?: string;
        /**
         * reference type ('refs/tag/' or 'refs/heads/')
         */
        refType?: string;
        /**
         * file or directory path
         */
        path?: string;
        /**
         * show full history incl. all merge commits
         */
        fullHistory?: boolean;
    };
    url: '/projects/{projectKey}/repos/{repoName}/commits';
};

export type ListProjectRepoCommitsErrors = {
    400: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    403: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    500: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type ListProjectRepoCommitsError = ListProjectRepoCommitsErrors[keyof ListProjectRepoCommitsErrors];

export type ListProjectRepoCommitsResponses = {
    200: {
        data?: Array<RepoCommit>;
        page?: ResponsePageMeta;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type ListProjectRepoCommitsResponse = ListProjectRepoCommitsResponses[keyof ListProjectRepoCommitsResponses];

export type GetProjectRepoCommitsDiffData = {
    body?: never;
    path: {
        /**
         * key of the project
         */
        projectKey: string;
        /**
         * name of the repository
         */
        repoName: string;
    };
    query: {
        /**
         * git rev (commit/branch/tag,commit-ish or any other git revision).
         */
        rev: string;
        /**
         * git until rev (commit/branch/tag,commit-ish or any other git revision). See `git diff A B`. The resulting diff doesn't include `until` commit content, but you could use `<refname>^` syntax to include commit content. If not set diff includes all commits up to and including the initial.
         */
        until?: string;
        /**
         * whether to include binary file changes. if true, the diff is applicable with git apply
         */
        binary?: boolean;
        /**
         * file or directory path
         */
        path?: string;
    };
    url: '/projects/{projectKey}/repos/{repoName}/commits/diff';
};

export type GetProjectRepoCommitsDiffErrors = {
    400: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    403: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    500: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type GetProjectRepoCommitsDiffError = GetProjectRepoCommitsDiffErrors[keyof GetProjectRepoCommitsDiffErrors];

export type GetProjectRepoCommitsDiffResponses = {
    200: {
        data?: Diff;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type GetProjectRepoCommitsDiffResponse = GetProjectRepoCommitsDiffResponses[keyof GetProjectRepoCommitsDiffResponses];

export type GetProjectRepoCommitData = {
    body?: never;
    path: {
        /**
         * key of the project
         */
        projectKey: string;
        /**
         * name of the repository
         */
        repoName: string;
        /**
         * commit SHA1 hash.
         */
        sha1: string;
    };
    query?: never;
    url: '/projects/{projectKey}/repos/{repoName}/commits/{sha1}';
};

export type GetProjectRepoCommitErrors = {
    400: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    403: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    500: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type GetProjectRepoCommitError = GetProjectRepoCommitErrors[keyof GetProjectRepoCommitErrors];

export type GetProjectRepoCommitResponses = {
    200: {
        data?: RepoCommit;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type GetProjectRepoCommitResponse = GetProjectRepoCommitResponses[keyof GetProjectRepoCommitResponses];

export type GetProjectRepoCommitDiffData = {
    body?: never;
    path: {
        /**
         * key of the project
         */
        projectKey: string;
        /**
         * name of the repository
         */
        repoName: string;
        /**
         * commit SHA1 hash.
         */
        sha1: string;
    };
    query?: {
        /**
         * whether to include binary file changes. if true, the diff is applicable with git apply
         */
        binary?: boolean;
    };
    url: '/projects/{projectKey}/repos/{repoName}/commits/{sha1}/diff';
};

export type GetProjectRepoCommitDiffErrors = {
    400: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    403: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    500: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type GetProjectRepoCommitDiffError = GetProjectRepoCommitDiffErrors[keyof GetProjectRepoCommitDiffErrors];

export type GetProjectRepoCommitDiffResponses = {
    200: {
        data?: Diff;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type GetProjectRepoCommitDiffResponse = GetProjectRepoCommitDiffResponses[keyof GetProjectRepoCommitDiffResponses];

export type GetProjectRepoContentData = {
    body?: never;
    path: {
        /**
         * key of the project
         */
        projectKey: string;
        /**
         * name of the repository
         */
        repoName: string;
        /**
         * path to the repository tree object
         */
        treePath: string;
    };
    query: {
        /**
         * git rev (commit/branch/tag,commit-ish or any other git revision).
         */
        rev: string;
    };
    url: '/projects/{projectKey}/repos/{repoName}/content/{treePath}';
};

export type GetProjectRepoContentErrors = {
    400: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    401: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    403: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    500: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type GetProjectRepoContentError = GetProjectRepoContentErrors[keyof GetProjectRepoContentErrors];

export type GetProjectRepoContentResponses = {
    200: {
        data?: Array<RepoContent>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type GetProjectRepoContentResponse = GetProjectRepoContentResponses[keyof GetProjectRepoContentResponses];

export type GetProjectRepoFileData = {
    body?: never;
    path: {
        /**
         * key of the project
         */
        projectKey: string;
        /**
         * name of the repository
         */
        repoName: string;
        /**
         * path to the repository file object
         */
        treePath: string;
    };
    query: {
        /**
         * DEPRECATED!!! use `rev` parameter instead.
         */
        ref?: string;
        /**
         * git rev (commit/branch/tag,commit-ish or any other git revision).
         */
        rev: string;
    };
    url: '/projects/{projectKey}/repos/{repoName}/file/{treePath}';
};

export type GetProjectRepoFileErrors = {
    400: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    401: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    403: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    500: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type GetProjectRepoFileError = GetProjectRepoFileErrors[keyof GetProjectRepoFileErrors];

export type GetProjectRepoFileResponses = {
    200: {
        data?: RepoFile;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type GetProjectRepoFileResponse = GetProjectRepoFileResponses[keyof GetProjectRepoFileResponses];

export type GetProjectRepoFilesPathsData = {
    body?: ListFilesByPatternInput;
    path: {
        /**
         * key of the project
         */
        projectKey: string;
        /**
         * name of the repository
         */
        repoName: string;
    };
    query: {
        /**
         * git rev (commit/branch/tag,commit-ish or any other git revision).
         */
        rev: string;
    };
    url: '/projects/{projectKey}/repos/{repoName}/file_path';
};

export type GetProjectRepoFilesPathsErrors = {
    400: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    401: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    403: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    500: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type GetProjectRepoFilesPathsError = GetProjectRepoFilesPathsErrors[keyof GetProjectRepoFilesPathsErrors];

export type GetProjectRepoFilesPathsResponses = {
    200: {
        data?: Array<TreePath>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
        /**
         * List of warnings that occurred during the request.
         */
        warnings?: Array<ResponseWarning>;
    };
};

export type GetProjectRepoFilesPathsResponse = GetProjectRepoFilesPathsResponses[keyof GetProjectRepoFilesPathsResponses];

export type GetProjectRepoFilesData = {
    body?: ListFilesContentInput;
    path: {
        /**
         * key of the project
         */
        projectKey: string;
        /**
         * name of the repository
         */
        repoName: string;
    };
    query: {
        /**
         * git rev (commit/branch/tag,commit-ish or any other git revision).
         */
        rev: string;
    };
    url: '/projects/{projectKey}/repos/{repoName}/files';
};

export type GetProjectRepoFilesErrors = {
    400: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    401: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    403: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    500: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type GetProjectRepoFilesError = GetProjectRepoFilesErrors[keyof GetProjectRepoFilesErrors];

export type GetProjectRepoFilesResponses = {
    200: {
        data?: {
            [key: string]: RepoFile;
        };
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type GetProjectRepoFilesResponse = GetProjectRepoFilesResponses[keyof GetProjectRepoFilesResponses];

export type CreateRepoForkData = {
    body?: CreateForkInput;
    path: {
        /**
         * key of the source project
         */
        projectKey: string;
        /**
         * name of the source repository
         */
        repoName: string;
    };
    query?: never;
    url: '/projects/{projectKey}/repos/{repoName}/fork';
};

export type CreateRepoForkErrors = {
    400: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    403: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    500: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type CreateRepoForkError = CreateRepoForkErrors[keyof CreateRepoForkErrors];

export type CreateRepoForkResponses = {
    200: {
        data?: RepoForkAsyncInfo;
        page?: ResponsePageMeta;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type CreateRepoForkResponse = CreateRepoForkResponses[keyof CreateRepoForkResponses];

export type ListRepoForksData = {
    body?: never;
    path: {
        /**
         * key of the project
         */
        projectKey: string;
        /**
         * name of the repository
         */
        repoName: string;
    };
    query?: {
        /**
         * cursor of the requested page (received from the previous request)
         */
        cursor?: string;
        /**
         * page size of results (ignored if cursor is set)
         */
        limit?: number;
        /**
         * filter projects by name
         */
        q?: string;
        /**
         * sorting type of results
         */
        sort?: string;
        /**
         * sort order of results
         */
        order?: string;
    };
    url: '/projects/{projectKey}/repos/{repoName}/forks';
};

export type ListRepoForksErrors = {
    400: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    403: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    500: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type ListRepoForksError = ListRepoForksErrors[keyof ListRepoForksErrors];

export type ListRepoForksResponses = {
    200: {
        data?: Array<RepoFork>;
        page?: ResponsePageMeta;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type ListRepoForksResponse = ListRepoForksResponses[keyof ListRepoForksResponses];

export type ListProjectRepoBranchesWithIssuesData = {
    body?: never;
    path: {
        /**
         * key of the project
         */
        projectKey: string;
        /**
         * name of the repository
         */
        repoName: string;
    };
    query?: {
        /**
         * sorting type of results
         */
        sort?: string;
        /**
         * sort order of results
         */
        order?: string;
        /**
         * filter branches by name
         */
        q?: string;
        /**
         * git ahead-behind rev (commit/branch/tag,commit-ish or any other git revision). See git-for-each-ref.
         */
        behindAheadBaseRev?: string;
    };
    url: '/projects/{projectKey}/repos/{repoName}/issues';
};

export type ListProjectRepoBranchesWithIssuesErrors = {
    400: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    403: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    500: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type ListProjectRepoBranchesWithIssuesError = ListProjectRepoBranchesWithIssuesErrors[keyof ListProjectRepoBranchesWithIssuesErrors];

export type ListProjectRepoBranchesWithIssuesResponses = {
    200: {
        data?: Array<RepoBranchWithIssue>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type ListProjectRepoBranchesWithIssuesResponse = ListProjectRepoBranchesWithIssuesResponses[keyof ListProjectRepoBranchesWithIssuesResponses];

export type CreateProjectRepoIssueData = {
    body?: CreateIssueInput;
    path: {
        /**
         * key of the project
         */
        projectKey: string;
        /**
         * name of the repository
         */
        repoName: string;
    };
    query?: never;
    url: '/projects/{projectKey}/repos/{repoName}/issues';
};

export type CreateProjectRepoIssueErrors = {
    400: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    403: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    500: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type CreateProjectRepoIssueError = CreateProjectRepoIssueErrors[keyof CreateProjectRepoIssueErrors];

export type CreateProjectRepoIssueResponses = {
    200: {
        data?: Issue;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type CreateProjectRepoIssueResponse = CreateProjectRepoIssueResponses[keyof CreateProjectRepoIssueResponses];

export type DeleteProjectRepoIssueData = {
    body?: never;
    path: {
        /**
         * key of the project
         */
        projectKey: string;
        /**
         * name of the repository
         */
        repoName: string;
        /**
         * name of the branch
         */
        branchName: string;
    };
    query?: never;
    url: '/projects/{projectKey}/repos/{repoName}/issues/{branchName}';
};

export type DeleteProjectRepoIssueErrors = {
    400: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    403: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    500: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type DeleteProjectRepoIssueError = DeleteProjectRepoIssueErrors[keyof DeleteProjectRepoIssueErrors];

export type DeleteProjectRepoIssueResponses = {
    /**
     * No Content
     */
    200: unknown;
};

export type UpdateProjectRepoIssueData = {
    body?: UpdateIssueInput;
    path: {
        /**
         * key of the project
         */
        projectKey: string;
        /**
         * name of the repository
         */
        repoName: string;
        /**
         * name of the branch
         */
        branchName: string;
    };
    query?: never;
    url: '/projects/{projectKey}/repos/{repoName}/issues/{branchName}';
};

export type UpdateProjectRepoIssueErrors = {
    400: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    403: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    500: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type UpdateProjectRepoIssueError = UpdateProjectRepoIssueErrors[keyof UpdateProjectRepoIssueErrors];

export type UpdateProjectRepoIssueResponses = {
    200: {
        data?: Issue;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type UpdateProjectRepoIssueResponse = UpdateProjectRepoIssueResponses[keyof UpdateProjectRepoIssueResponses];

export type StartProjectRepoMigrationData = {
    body?: MigrationOptions;
    path: {
        /**
         * key of the project
         */
        projectKey: string;
        /**
         * name of the repository
         */
        repoName: string;
    };
    query?: never;
    url: '/projects/{projectKey}/repos/{repoName}/migration';
};

export type StartProjectRepoMigrationErrors = {
    400: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    403: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    500: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type StartProjectRepoMigrationError = StartProjectRepoMigrationErrors[keyof StartProjectRepoMigrationErrors];

export type StartProjectRepoMigrationResponses = {
    200: {
        data?: MigrationJobInfo;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type StartProjectRepoMigrationResponse = StartProjectRepoMigrationResponses[keyof StartProjectRepoMigrationResponses];

export type ApplyProjectRepoPatchData = {
    body?: ApplyRepositoryPatchInput;
    path: {
        /**
         * key of the project
         */
        projectKey: string;
        /**
         * name of the repository
         */
        repoName: string;
    };
    query?: never;
    url: '/projects/{projectKey}/repos/{repoName}/patch';
};

export type ApplyProjectRepoPatchErrors = {
    400: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    403: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    422: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    500: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type ApplyProjectRepoPatchError = ApplyProjectRepoPatchErrors[keyof ApplyProjectRepoPatchErrors];

export type ApplyProjectRepoPatchResponses = {
    200: {
        data?: RepoCommit;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type ApplyProjectRepoPatchResponse = ApplyProjectRepoPatchResponses[keyof ApplyProjectRepoPatchResponses];

export type ListProjectRepoPrsData = {
    body?: never;
    path: {
        /**
         * key of the project
         */
        projectKey: string;
        /**
         * name of the repository
         */
        repoName: string;
    };
    query?: {
        /**
         * cursor of the requested page (received from the previous request)
         */
        cursor?: string;
        /**
         * page size of results
         */
        limit?: number;
        /**
         * sorting type of results
         */
        sort?: string;
        /**
         * sort order of results
         */
        order?: string;
        /**
         * pull requests status to filter out
         */
        prStatus?: string;
        /**
         * filter pull requests by title or id pull request
         */
        q?: string;
        /**
         * pull requests target branch name to filter out
         */
        targetBranch?: string;
        /**
         * pull requests source branch name to filter out
         */
        sourceBranch?: string;
        /**
         * list of PR posters to filter out (usernames)
         */
        posters?: Array<string>;
        /**
         * author (principal_name) pull requests to filter out
         */
        author?: string;
        /**
         * list of PR assignees (reviewers) to filter out (usernames)
         */
        assignees?: Array<string>;
    };
    url: '/projects/{projectKey}/repos/{repoName}/pull-requests';
};

export type ListProjectRepoPrsErrors = {
    400: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    403: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    500: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type ListProjectRepoPrsError = ListProjectRepoPrsErrors[keyof ListProjectRepoPrsErrors];

export type ListProjectRepoPrsResponses = {
    200: {
        data?: Array<PullRequest>;
        page?: ResponsePageMeta;
    };
};

export type ListProjectRepoPrsResponse = ListProjectRepoPrsResponses[keyof ListProjectRepoPrsResponses];

export type CreateProjectRepoPrData = {
    body?: CreatePullRequestInput;
    path: {
        /**
         * key of the project
         */
        projectKey: string;
        /**
         * name of the repository
         */
        repoName: string;
    };
    query?: never;
    url: '/projects/{projectKey}/repos/{repoName}/pull-requests';
};

export type CreateProjectRepoPrErrors = {
    400: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    403: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    500: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type CreateProjectRepoPrError = CreateProjectRepoPrErrors[keyof CreateProjectRepoPrErrors];

export type CreateProjectRepoPrResponses = {
    200: {
        data?: PullRequest;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type CreateProjectRepoPrResponse = CreateProjectRepoPrResponses[keyof CreateProjectRepoPrResponses];

export type AuthorsProjectRepoPrsData = {
    body?: never;
    path: {
        /**
         * key of the project
         */
        projectKey: string;
        /**
         * name of the repository
         */
        repoName: string;
    };
    query?: never;
    url: '/projects/{projectKey}/repos/{repoName}/pull-requests/authors';
};

export type AuthorsProjectRepoPrsErrors = {
    400: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    403: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    500: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type AuthorsProjectRepoPrsError = AuthorsProjectRepoPrsErrors[keyof AuthorsProjectRepoPrsErrors];

export type AuthorsProjectRepoPrsResponses = {
    200: {
        data?: PullRequestAuthors;
    };
};

export type AuthorsProjectRepoPrsResponse = AuthorsProjectRepoPrsResponses[keyof AuthorsProjectRepoPrsResponses];

export type CountProjectRepoPrsData = {
    body?: never;
    path: {
        /**
         * key of the project
         */
        projectKey: string;
        /**
         * name of the repository
         */
        repoName: string;
    };
    query?: never;
    url: '/projects/{projectKey}/repos/{repoName}/pull-requests/counters';
};

export type CountProjectRepoPrsErrors = {
    400: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    403: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    500: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type CountProjectRepoPrsError = CountProjectRepoPrsErrors[keyof CountProjectRepoPrsErrors];

export type CountProjectRepoPrsResponses = {
    200: {
        data?: Array<PullRequestCounters>;
    };
};

export type CountProjectRepoPrsResponse = CountProjectRepoPrsResponses[keyof CountProjectRepoPrsResponses];

export type ListProjectRepoPrTargetBranchesData = {
    body?: never;
    path: {
        /**
         * key of the project
         */
        projectKey: string;
        /**
         * name of the repository
         */
        repoName: string;
    };
    query?: never;
    url: '/projects/{projectKey}/repos/{repoName}/pull-requests/target-branches';
};

export type ListProjectRepoPrTargetBranchesErrors = {
    400: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    403: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    500: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type ListProjectRepoPrTargetBranchesError = ListProjectRepoPrTargetBranchesErrors[keyof ListProjectRepoPrTargetBranchesErrors];

export type ListProjectRepoPrTargetBranchesResponses = {
    /**
     * branch names
     */
    200: Array<string>;
};

export type ListProjectRepoPrTargetBranchesResponse = ListProjectRepoPrTargetBranchesResponses[keyof ListProjectRepoPrTargetBranchesResponses];

export type GetUserSuggestionsData = {
    body?: never;
    path: {
        /**
         * key of the project
         */
        projectKey: string;
        /**
         * name of the repository
         */
        repoName: string;
    };
    query?: {
        /**
         * filter by name or email
         */
        q?: string;
        /**
         * pull request id
         */
        prId?: number;
        /**
         * skip current user from response
         */
        skipSelf?: boolean;
        /**
         * cursor of the requested page (received from the previous request)
         */
        cursor?: string;
        /**
         * page size of results
         */
        limit?: number;
    };
    url: '/projects/{projectKey}/repos/{repoName}/pull-requests/user-suggestions';
};

export type GetUserSuggestionsErrors = {
    400: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    403: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    500: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type GetUserSuggestionsError = GetUserSuggestionsErrors[keyof GetUserSuggestionsErrors];

export type GetUserSuggestionsResponses = {
    200: {
        data?: Array<UserSuggestion>;
        page?: ResponsePageMeta;
    };
};

export type GetUserSuggestionsResponse = GetUserSuggestionsResponses[keyof GetUserSuggestionsResponses];

export type GetProjectRepoPrData = {
    body?: never;
    path: {
        /**
         * key of the project
         */
        projectKey: string;
        /**
         * name of the repository
         */
        repoName: string;
        /**
         * pull request id
         */
        prId: number;
    };
    query?: never;
    url: '/projects/{projectKey}/repos/{repoName}/pull-requests/{prId}';
};

export type GetProjectRepoPrErrors = {
    400: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    403: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    500: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type GetProjectRepoPrError = GetProjectRepoPrErrors[keyof GetProjectRepoPrErrors];

export type GetProjectRepoPrResponses = {
    200: {
        data?: PullRequest;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type GetProjectRepoPrResponse = GetProjectRepoPrResponses[keyof GetProjectRepoPrResponses];

export type UpdateProjectRepoPrData = {
    body?: UpdatePullRequestInput;
    path: {
        /**
         * key of the project
         */
        projectKey: string;
        /**
         * name of the repository
         */
        repoName: string;
        /**
         * pull request id
         */
        prId: number;
    };
    query?: never;
    url: '/projects/{projectKey}/repos/{repoName}/pull-requests/{prId}';
};

export type UpdateProjectRepoPrErrors = {
    400: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    403: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    500: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type UpdateProjectRepoPrError = UpdateProjectRepoPrErrors[keyof UpdateProjectRepoPrErrors];

export type UpdateProjectRepoPrResponses = {
    200: {
        data?: PullRequest;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type UpdateProjectRepoPrResponse = UpdateProjectRepoPrResponses[keyof UpdateProjectRepoPrResponses];

export type ListPullRequestActivitiesData = {
    body?: never;
    path: {
        /**
         * key of the project
         */
        projectKey: string;
        /**
         * name of the repository
         */
        repoName: string;
        /**
         * pull request unique identifier
         */
        prId: number;
    };
    query?: {
        /**
         * event group name for filtering
         */
        eventGroups?: Array<string>;
        /**
         * cursor of the requested page (received from the previous request)
         */
        cursor?: string;
        /**
         * list page size
         */
        limit?: number;
    };
    url: '/projects/{projectKey}/repos/{repoName}/pull-requests/{prId}/activities';
};

export type ListPullRequestActivitiesErrors = {
    400: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    403: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    500: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type ListPullRequestActivitiesError = ListPullRequestActivitiesErrors[keyof ListPullRequestActivitiesErrors];

export type ListPullRequestActivitiesResponses = {
    200: {
        data?: Array<PullRequestActivity>;
        page?: ResponsePageMeta;
    };
};

export type ListPullRequestActivitiesResponse = ListPullRequestActivitiesResponses[keyof ListPullRequestActivitiesResponses];

export type RemoveProjectRepoPrAssigneesData = {
    body: unknown;
    path: {
        /**
         * key of the project
         */
        projectKey: string;
        /**
         * name of the repository
         */
        repoName: string;
        /**
         * pull request id
         */
        prId: number;
    };
    query?: never;
    url: '/projects/{projectKey}/repos/{repoName}/pull-requests/{prId}/assignees';
};

export type RemoveProjectRepoPrAssigneesErrors = {
    400: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    403: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    500: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type RemoveProjectRepoPrAssigneesError = RemoveProjectRepoPrAssigneesErrors[keyof RemoveProjectRepoPrAssigneesErrors];

export type RemoveProjectRepoPrAssigneesResponses = {
    200: {
        /**
         * Data is a list of the usernames added/removed to/from pull request.
         */
        data?: Array<string>;
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type RemoveProjectRepoPrAssigneesResponse = RemoveProjectRepoPrAssigneesResponses[keyof RemoveProjectRepoPrAssigneesResponses];

export type AddProjectRepoPrAssigneesData = {
    body: unknown;
    path: {
        /**
         * key of the project
         */
        projectKey: string;
        /**
         * name of the repository
         */
        repoName: string;
        /**
         * pull request id
         */
        prId: number;
    };
    query?: {
        /**
         * whether an assignee should be added to a list without a group
         */
        optional?: boolean;
    };
    url: '/projects/{projectKey}/repos/{repoName}/pull-requests/{prId}/assignees';
};

export type AddProjectRepoPrAssigneesErrors = {
    400: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    403: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    500: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type AddProjectRepoPrAssigneesError = AddProjectRepoPrAssigneesErrors[keyof AddProjectRepoPrAssigneesErrors];

export type AddProjectRepoPrAssigneesResponses = {
    200: {
        /**
         * Data is a list of the usernames added/removed to/from pull request.
         */
        data?: Array<string>;
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type AddProjectRepoPrAssigneesResponse = AddProjectRepoPrAssigneesResponses[keyof AddProjectRepoPrAssigneesResponses];

export type GetPullRequestAutoMergeData = {
    body?: never;
    path: {
        /**
         * key of the project
         */
        projectKey: string;
        /**
         * name of the repository
         */
        repoName: string;
        /**
         * pull request id
         */
        prId: number;
    };
    query?: never;
    url: '/projects/{projectKey}/repos/{repoName}/pull-requests/{prId}/auto-merge';
};

export type GetPullRequestAutoMergeErrors = {
    400: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    403: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    /**
     * DEPRECATED! See the description.
     */
    404: unknown;
    405: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    500: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type GetPullRequestAutoMergeError = GetPullRequestAutoMergeErrors[keyof GetPullRequestAutoMergeErrors];

export type GetPullRequestAutoMergeResponses = {
    200: {
        data?: PullRequestAutoMerge;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type GetPullRequestAutoMergeResponse = GetPullRequestAutoMergeResponses[keyof GetPullRequestAutoMergeResponses];

export type UpdatePullRequestAutoMergeData = {
    body?: AutoMergeUpdateInput;
    path: {
        /**
         * key of the project
         */
        projectKey: string;
        /**
         * name of the repository
         */
        repoName: string;
        /**
         * pull request id
         */
        prId: number;
    };
    query?: never;
    url: '/projects/{projectKey}/repos/{repoName}/pull-requests/{prId}/auto-merge';
};

export type UpdatePullRequestAutoMergeErrors = {
    400: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    403: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    405: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    500: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type UpdatePullRequestAutoMergeError = UpdatePullRequestAutoMergeErrors[keyof UpdatePullRequestAutoMergeErrors];

export type UpdatePullRequestAutoMergeResponses = {
    200: {
        data?: PullRequestAutoMerge;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type UpdatePullRequestAutoMergeResponse = UpdatePullRequestAutoMergeResponses[keyof UpdatePullRequestAutoMergeResponses];

export type ConfigurePullRequestAutoMergeData = {
    body?: AutoMergeInput;
    path: {
        /**
         * key of the project
         */
        projectKey: string;
        /**
         * name of the repository
         */
        repoName: string;
        /**
         * pull request id
         */
        prId: number;
    };
    query?: never;
    url: '/projects/{projectKey}/repos/{repoName}/pull-requests/{prId}/auto-merge';
};

export type ConfigurePullRequestAutoMergeErrors = {
    400: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    403: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    405: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    500: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type ConfigurePullRequestAutoMergeError = ConfigurePullRequestAutoMergeErrors[keyof ConfigurePullRequestAutoMergeErrors];

export type ConfigurePullRequestAutoMergeResponses = {
    200: {
        data?: PullRequestAutoMerge;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type ConfigurePullRequestAutoMergeResponse = ConfigurePullRequestAutoMergeResponses[keyof ConfigurePullRequestAutoMergeResponses];

export type GetBuildStatusData = {
    body?: never;
    path: {
        /**
         * key of the project
         */
        projectKey: string;
        /**
         * name of the repository
         */
        repoName: string;
        /**
         * pull request id
         */
        prId: number;
    };
    query?: never;
    url: '/projects/{projectKey}/repos/{repoName}/pull-requests/{prId}/build';
};

export type GetBuildStatusErrors = {
    400: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    403: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    /**
     * DEPRECATED! See the description.
     */
    404: unknown;
    500: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type GetBuildStatusError = GetBuildStatusErrors[keyof GetBuildStatusErrors];

export type GetBuildStatusResponses = {
    200: {
        data?: Array<CiBuild>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type GetBuildStatusResponse = GetBuildStatusResponses[keyof GetBuildStatusResponses];

export type SetProjectRepoPrAssigneeDecisionData = {
    body?: AssigneeDecisionInput;
    path: {
        /**
         * key of the project
         */
        projectKey: string;
        /**
         * name of the repository
         */
        repoName: string;
        /**
         * pull request id
         */
        prId: number;
    };
    query?: never;
    url: '/projects/{projectKey}/repos/{repoName}/pull-requests/{prId}/decision';
};

export type SetProjectRepoPrAssigneeDecisionErrors = {
    400: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    403: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    500: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type SetProjectRepoPrAssigneeDecisionError = SetProjectRepoPrAssigneeDecisionErrors[keyof SetProjectRepoPrAssigneeDecisionErrors];

export type SetProjectRepoPrAssigneeDecisionResponses = {
    200: {
        /**
         * Nothing to see here.
         */
        data?: Array<{
            [key: string]: unknown;
        }>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type SetProjectRepoPrAssigneeDecisionResponse = SetProjectRepoPrAssigneeDecisionResponses[keyof SetProjectRepoPrAssigneeDecisionResponses];

export type GetProjectRepoPrDiffData = {
    body?: never;
    path: {
        /**
         * key of the project
         */
        projectKey: string;
        /**
         * name of the repository
         */
        repoName: string;
        /**
         * pull request id
         */
        prId: number;
    };
    query?: {
        /**
         * whether to include binary file changes. if true, the diff is applicable with git apply
         */
        binary?: boolean;
    };
    url: '/projects/{projectKey}/repos/{repoName}/pull-requests/{prId}/diff';
};

export type GetProjectRepoPrDiffErrors = {
    400: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    403: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    500: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type GetProjectRepoPrDiffError = GetProjectRepoPrDiffErrors[keyof GetProjectRepoPrDiffErrors];

export type GetProjectRepoPrDiffResponses = {
    200: {
        data?: Diff;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type GetProjectRepoPrDiffResponse = GetProjectRepoPrDiffResponses[keyof GetProjectRepoPrDiffResponses];

export type RemoveLinkedIssuesData = {
    body: LinkedIssuesInput;
    path: {
        /**
         * key of the project
         */
        projectKey: string;
        /**
         * name of the repository
         */
        repoName: string;
        /**
         * pull request id
         */
        prId: number;
    };
    query?: never;
    url: '/projects/{projectKey}/repos/{repoName}/pull-requests/{prId}/linked-issues';
};

export type RemoveLinkedIssuesErrors = {
    400: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    403: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    500: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type RemoveLinkedIssuesError = RemoveLinkedIssuesErrors[keyof RemoveLinkedIssuesErrors];

export type RemoveLinkedIssuesResponses = {
    200: unknown;
};

export type AddLinkedIssuesData = {
    body: LinkedIssuesInput;
    path: {
        /**
         * key of the project
         */
        projectKey: string;
        /**
         * name of the repository
         */
        repoName: string;
        /**
         * pull request id
         */
        prId: number;
    };
    query?: never;
    url: '/projects/{projectKey}/repos/{repoName}/pull-requests/{prId}/linked-issues';
};

export type AddLinkedIssuesErrors = {
    400: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    403: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    500: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type AddLinkedIssuesError = AddLinkedIssuesErrors[keyof AddLinkedIssuesErrors];

export type AddLinkedIssuesResponses = {
    200: {
        data?: Array<LinkedIssue>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type AddLinkedIssuesResponse = AddLinkedIssuesResponses[keyof AddLinkedIssuesResponses];

export type MergeProjectRepoPrData = {
    body?: MergePullRequestInput;
    path: {
        /**
         * key of the project
         */
        projectKey: string;
        /**
         * name of the repository
         */
        repoName: string;
        /**
         * pull request id
         */
        prId: number;
    };
    query?: {
        /**
         * force merge
         */
        force?: boolean;
    };
    url: '/projects/{projectKey}/repos/{repoName}/pull-requests/{prId}/merge';
};

export type MergeProjectRepoPrErrors = {
    400: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    403: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    405: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    409: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    500: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type MergeProjectRepoPrError = MergeProjectRepoPrErrors[keyof MergeProjectRepoPrErrors];

export type MergeProjectRepoPrResponses = {
    200: {
        data?: PullRequestMergeResult;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type MergeProjectRepoPrResponse = MergeProjectRepoPrResponses[keyof MergeProjectRepoPrResponses];

export type GetPullRequestMergeConflictsData = {
    body?: never;
    path: {
        /**
         * key of the project
         */
        projectKey: string;
        /**
         * name of the repository
         */
        repoName: string;
        /**
         * pull request id
         */
        prId: number;
    };
    query?: never;
    url: '/projects/{projectKey}/repos/{repoName}/pull-requests/{prId}/merge-conflicts';
};

export type GetPullRequestMergeConflictsErrors = {
    400: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    403: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    500: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type GetPullRequestMergeConflictsError = GetPullRequestMergeConflictsErrors[keyof GetPullRequestMergeConflictsErrors];

export type GetPullRequestMergeConflictsResponses = {
    200: {
        data?: PullRequestMergeConflict;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type GetPullRequestMergeConflictsResponse = GetPullRequestMergeConflictsResponses[keyof GetPullRequestMergeConflictsResponses];

export type RebasePullRequestSourceOnTargetData = {
    body?: never;
    path: {
        /**
         * key of the project
         */
        projectKey: string;
        /**
         * name of the repository
         */
        repoName: string;
        /**
         * pull request id
         */
        prId: number;
    };
    query?: never;
    url: '/projects/{projectKey}/repos/{repoName}/pull-requests/{prId}/rebase';
};

export type RebasePullRequestSourceOnTargetErrors = {
    400: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    403: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    405: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    500: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type RebasePullRequestSourceOnTargetError = RebasePullRequestSourceOnTargetErrors[keyof RebasePullRequestSourceOnTargetErrors];

export type RebasePullRequestSourceOnTargetResponses = {
    200: {
        data?: PullRequest;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type RebasePullRequestSourceOnTargetResponse = RebasePullRequestSourceOnTargetResponses[keyof RebasePullRequestSourceOnTargetResponses];

export type RejectProjectRepoPrData = {
    body?: never;
    path: {
        /**
         * key of the project
         */
        projectKey: string;
        /**
         * name of the repository
         */
        repoName: string;
        /**
         * pull request id
         */
        prId: number;
    };
    query?: never;
    url: '/projects/{projectKey}/repos/{repoName}/pull-requests/{prId}/reject';
};

export type RejectProjectRepoPrErrors = {
    400: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    403: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    405: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    500: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type RejectProjectRepoPrError = RejectProjectRepoPrErrors[keyof RejectProjectRepoPrErrors];

export type RejectProjectRepoPrResponses = {
    200: {
        /**
         * Nothing to see here.
         */
        data?: Array<{
            [key: string]: unknown;
        }>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type RejectProjectRepoPrResponse = RejectProjectRepoPrResponses[keyof RejectProjectRepoPrResponses];

export type ReopenProjectRepoPrData = {
    body?: never;
    path: {
        /**
         * key of the project
         */
        projectKey: string;
        /**
         * name of the repository
         */
        repoName: string;
        /**
         * pull request id
         */
        prId: number;
    };
    query?: never;
    url: '/projects/{projectKey}/repos/{repoName}/pull-requests/{prId}/reopen';
};

export type ReopenProjectRepoPrErrors = {
    400: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    403: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    405: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    500: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type ReopenProjectRepoPrError = ReopenProjectRepoPrErrors[keyof ReopenProjectRepoPrErrors];

export type ReopenProjectRepoPrResponses = {
    200: {
        data?: PullRequest;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type ReopenProjectRepoPrResponse = ReopenProjectRepoPrResponses[keyof ReopenProjectRepoPrResponses];

export type ResolvePullRequestMergeConflictsData = {
    body?: ResolveConflictsInput;
    path: {
        /**
         * key of the project
         */
        projectKey: string;
        /**
         * name of the repository
         */
        repoName: string;
        /**
         * pull request id
         */
        prId: number;
    };
    query?: never;
    url: '/projects/{projectKey}/repos/{repoName}/pull-requests/{prId}/resolve-conflicts';
};

export type ResolvePullRequestMergeConflictsErrors = {
    400: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    403: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    500: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type ResolvePullRequestMergeConflictsError = ResolvePullRequestMergeConflictsErrors[keyof ResolvePullRequestMergeConflictsErrors];

export type ResolvePullRequestMergeConflictsResponses = {
    200: {
        data?: PullRequest;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type ResolvePullRequestMergeConflictsResponse = ResolvePullRequestMergeConflictsResponses[keyof ResolvePullRequestMergeConflictsResponses];

export type UpdateMergeBranchData = {
    body?: never;
    path: {
        /**
         * key of the project
         */
        projectKey: string;
        /**
         * name of the repository
         */
        repoName: string;
        /**
         * pull request id
         */
        prId: number;
    };
    query?: never;
    url: '/projects/{projectKey}/repos/{repoName}/pull-requests/{prId}/update-merge-branch';
};

export type UpdateMergeBranchErrors = {
    400: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    403: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    500: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type UpdateMergeBranchError = UpdateMergeBranchErrors[keyof UpdateMergeBranchErrors];

export type UpdateMergeBranchResponses = {
    200: {
        /**
         * Nothing to see here.
         */
        data?: Array<{
            [key: string]: unknown;
        }>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type UpdateMergeBranchResponse = UpdateMergeBranchResponses[keyof UpdateMergeBranchResponses];

export type RemovePullRequestViewedFileData = {
    body?: PullRequestViewedFileInput;
    path: {
        /**
         * key of the project
         */
        projectKey: string;
        /**
         * name of the repository
         */
        repoName: string;
        /**
         * pull request id
         */
        prId: number;
    };
    query?: never;
    url: '/projects/{projectKey}/repos/{repoName}/pull-requests/{prId}/viewed-files';
};

export type RemovePullRequestViewedFileErrors = {
    400: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    403: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    500: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type RemovePullRequestViewedFileError = RemovePullRequestViewedFileErrors[keyof RemovePullRequestViewedFileErrors];

export type RemovePullRequestViewedFileResponses = {
    200: {
        /**
         * Nothing to see here.
         */
        data?: Array<{
            [key: string]: unknown;
        }>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type RemovePullRequestViewedFileResponse = RemovePullRequestViewedFileResponses[keyof RemovePullRequestViewedFileResponses];

export type GetPullRequestViewedFilesData = {
    body?: never;
    path: {
        /**
         * key of the project
         */
        projectKey: string;
        /**
         * name of the repository
         */
        repoName: string;
        /**
         * pull request id
         */
        prId: number;
    };
    query?: never;
    url: '/projects/{projectKey}/repos/{repoName}/pull-requests/{prId}/viewed-files';
};

export type GetPullRequestViewedFilesErrors = {
    400: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    403: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    500: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type GetPullRequestViewedFilesError = GetPullRequestViewedFilesErrors[keyof GetPullRequestViewedFilesErrors];

export type GetPullRequestViewedFilesResponses = {
    200: {
        data?: Array<PullRequestViewedFile>;
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type GetPullRequestViewedFilesResponse = GetPullRequestViewedFilesResponses[keyof GetPullRequestViewedFilesResponses];

export type AddPullRequestViewedFileData = {
    body?: PullRequestViewedFileInput;
    path: {
        /**
         * key of the project
         */
        projectKey: string;
        /**
         * name of the repository
         */
        repoName: string;
        /**
         * pull request id
         */
        prId: number;
    };
    query?: never;
    url: '/projects/{projectKey}/repos/{repoName}/pull-requests/{prId}/viewed-files';
};

export type AddPullRequestViewedFileErrors = {
    400: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    403: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    500: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type AddPullRequestViewedFileError = AddPullRequestViewedFileErrors[keyof AddPullRequestViewedFileErrors];

export type AddPullRequestViewedFileResponses = {
    200: {
        data?: PullRequestViewedFile;
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type AddPullRequestViewedFileResponse = AddPullRequestViewedFileResponses[keyof AddPullRequestViewedFileResponses];

export type GetProjectRepoRawFileData = {
    body?: never;
    path: {
        /**
         * key of the project
         */
        projectKey: string;
        /**
         * name of the repository
         */
        repoName: string;
        /**
         * path to the repository file object
         */
        treePath: string;
    };
    query: {
        /**
         * git rev (commit/branch/tag,commit-ish or any other git revision).
         */
        rev: string;
    };
    url: '/projects/{projectKey}/repos/{repoName}/raw/file/{treePath}';
};

export type GetProjectRepoRawFileErrors = {
    400: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    401: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    403: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    404: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    500: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type GetProjectRepoRawFileError = GetProjectRepoRawFileErrors[keyof GetProjectRepoRawFileErrors];

export type GetProjectRepoRawFileResponses = {
    /**
     * Returns raw file content.
     */
    200: unknown;
};

export type SearchTextInSourceCodeData = {
    body?: SearchInput;
    path: {
        /**
         * key of the source project
         */
        projectKey: string;
        /**
         * name of the source repository
         */
        repoName: string;
    };
    query?: never;
    url: '/projects/{projectKey}/repos/{repoName}/search';
};

export type SearchTextInSourceCodeErrors = {
    400: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    403: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    500: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type SearchTextInSourceCodeError = SearchTextInSourceCodeErrors[keyof SearchTextInSourceCodeErrors];

export type SearchTextInSourceCodeResponses = {
    200: {
        Data?: SearchResult;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type SearchTextInSourceCodeResponse = SearchTextInSourceCodeResponses[keyof SearchTextInSourceCodeResponses];

export type DeleteProjectRepoAutolinkSettingsData = {
    body?: never;
    path: {
        /**
         * key of the project
         */
        projectKey: string;
        /**
         * name of the repository
         */
        repoName: string;
    };
    query?: never;
    url: '/projects/{projectKey}/repos/{repoName}/settings/autolink';
};

export type DeleteProjectRepoAutolinkSettingsErrors = {
    400: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    403: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    500: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type DeleteProjectRepoAutolinkSettingsError = DeleteProjectRepoAutolinkSettingsErrors[keyof DeleteProjectRepoAutolinkSettingsErrors];

export type DeleteProjectRepoAutolinkSettingsResponses = {
    /**
     * No Content
     */
    200: unknown;
};

export type GetProjectRepoAutolinkSettingsData = {
    body?: never;
    path: {
        /**
         * key of the project
         */
        projectKey: string;
        /**
         * name of the repository
         */
        repoName: string;
    };
    query?: never;
    url: '/projects/{projectKey}/repos/{repoName}/settings/autolink';
};

export type GetProjectRepoAutolinkSettingsErrors = {
    400: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    403: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    500: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type GetProjectRepoAutolinkSettingsError = GetProjectRepoAutolinkSettingsErrors[keyof GetProjectRepoAutolinkSettingsErrors];

export type GetProjectRepoAutolinkSettingsResponses = {
    200: {
        data?: AutolinkSettings;
        page?: ResponsePageMeta;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type GetProjectRepoAutolinkSettingsResponse = GetProjectRepoAutolinkSettingsResponses[keyof GetProjectRepoAutolinkSettingsResponses];

export type UpdateProjectRepoAutolinkSettingsData = {
    body?: UpdateAutolinkSettingsInput;
    path: {
        /**
         * key of the project
         */
        projectKey: string;
        /**
         * name of the repository
         */
        repoName: string;
    };
    query?: never;
    url: '/projects/{projectKey}/repos/{repoName}/settings/autolink';
};

export type UpdateProjectRepoAutolinkSettingsErrors = {
    400: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    403: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    500: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type UpdateProjectRepoAutolinkSettingsError = UpdateProjectRepoAutolinkSettingsErrors[keyof UpdateProjectRepoAutolinkSettingsErrors];

export type UpdateProjectRepoAutolinkSettingsResponses = {
    200: {
        data?: AutolinkSettings;
        page?: ResponsePageMeta;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type UpdateProjectRepoAutolinkSettingsResponse = UpdateProjectRepoAutolinkSettingsResponses[keyof UpdateProjectRepoAutolinkSettingsResponses];

export type SetProjectRepoAutolinkSettingsData = {
    body?: CreateOrUpdateAutolinkSettingsInput;
    path: {
        /**
         * key of the project
         */
        projectKey: string;
        /**
         * name of the repository
         */
        repoName: string;
    };
    query?: never;
    url: '/projects/{projectKey}/repos/{repoName}/settings/autolink';
};

export type SetProjectRepoAutolinkSettingsErrors = {
    400: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    403: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    500: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type SetProjectRepoAutolinkSettingsError = SetProjectRepoAutolinkSettingsErrors[keyof SetProjectRepoAutolinkSettingsErrors];

export type SetProjectRepoAutolinkSettingsResponses = {
    200: {
        data?: AutolinkSettings;
        page?: ResponsePageMeta;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type SetProjectRepoAutolinkSettingsResponse = SetProjectRepoAutolinkSettingsResponses[keyof SetProjectRepoAutolinkSettingsResponses];

export type DisableProjectRepoMirrorData = {
    body?: never;
    path: {
        /**
         * key of the project
         */
        projectKey: string;
        /**
         * name of the repository
         */
        repoName: string;
    };
    query?: never;
    url: '/projects/{projectKey}/repos/{repoName}/settings/mirror';
};

export type DisableProjectRepoMirrorErrors = {
    400: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    403: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    500: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type DisableProjectRepoMirrorError = DisableProjectRepoMirrorErrors[keyof DisableProjectRepoMirrorErrors];

export type DisableProjectRepoMirrorResponses = {
    /**
     * No Content
     */
    200: unknown;
};

export type GetProjectRepoMirrorData = {
    body?: never;
    path: {
        /**
         * key of the project
         */
        projectKey: string;
        /**
         * name of the repository
         */
        repoName: string;
    };
    query?: never;
    url: '/projects/{projectKey}/repos/{repoName}/settings/mirror';
};

export type GetProjectRepoMirrorErrors = {
    400: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    403: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    /**
     * DEPRECATED! See the description.
     */
    404: unknown;
    500: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type GetProjectRepoMirrorError = GetProjectRepoMirrorErrors[keyof GetProjectRepoMirrorErrors];

export type GetProjectRepoMirrorResponses = {
    200: {
        data?: MirrorSettings;
        page?: ResponsePageMeta;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type GetProjectRepoMirrorResponse = GetProjectRepoMirrorResponses[keyof GetProjectRepoMirrorResponses];

export type EnableProjectRepoMirrorData = {
    body?: EnableMirroringInput;
    path: {
        /**
         * key of the project
         */
        projectKey: string;
        /**
         * name of the repository
         */
        repoName: string;
    };
    query?: never;
    url: '/projects/{projectKey}/repos/{repoName}/settings/mirror';
};

export type EnableProjectRepoMirrorErrors = {
    400: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    403: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    500: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type EnableProjectRepoMirrorError = EnableProjectRepoMirrorErrors[keyof EnableProjectRepoMirrorErrors];

export type EnableProjectRepoMirrorResponses = {
    200: {
        data?: MirrorSettings;
        page?: ResponsePageMeta;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type EnableProjectRepoMirrorResponse = EnableProjectRepoMirrorResponses[keyof EnableProjectRepoMirrorResponses];

export type ListProjectRepoPolicyData = {
    body?: never;
    path: {
        /**
         * key of the project
         */
        projectKey: string;
        /**
         * name of the repository
         */
        repoName: string;
    };
    query?: never;
    url: '/projects/{projectKey}/repos/{repoName}/settings/policy';
};

export type ListProjectRepoPolicyErrors = {
    400: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    403: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    500: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type ListProjectRepoPolicyError = ListProjectRepoPolicyErrors[keyof ListProjectRepoPolicyErrors];

export type ListProjectRepoPolicyResponses = {
    200: {
        data?: Array<RepoPolicy>;
        page?: ResponsePageMeta;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type ListProjectRepoPolicyResponse = ListProjectRepoPolicyResponses[keyof ListProjectRepoPolicyResponses];

export type AddProjectRepoPolicyData = {
    body?: UpdateRepoPolicyInput;
    path: {
        /**
         * key of the project
         */
        projectKey: string;
        /**
         * name of the repository
         */
        repoName: string;
    };
    query?: never;
    url: '/projects/{projectKey}/repos/{repoName}/settings/policy';
};

export type AddProjectRepoPolicyErrors = {
    400: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    403: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    500: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type AddProjectRepoPolicyError = AddProjectRepoPolicyErrors[keyof AddProjectRepoPolicyErrors];

export type AddProjectRepoPolicyResponses = {
    200: {
        data?: RepoPolicy;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type AddProjectRepoPolicyResponse = AddProjectRepoPolicyResponses[keyof AddProjectRepoPolicyResponses];

export type GetProjectRepoProtectedBranchesSettingsData = {
    body?: never;
    path: {
        /**
         * key of the project
         */
        projectKey: string;
        /**
         * name of the repository
         */
        repoName: string;
    };
    query?: never;
    url: '/projects/{projectKey}/repos/{repoName}/settings/protected_branches';
};

export type GetProjectRepoProtectedBranchesSettingsErrors = {
    400: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    403: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    500: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type GetProjectRepoProtectedBranchesSettingsError = GetProjectRepoProtectedBranchesSettingsErrors[keyof GetProjectRepoProtectedBranchesSettingsErrors];

export type GetProjectRepoProtectedBranchesSettingsResponses = {
    200: {
        data?: ProtectedBranchesSettings;
        page?: ResponsePageMeta;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type GetProjectRepoProtectedBranchesSettingsResponse = GetProjectRepoProtectedBranchesSettingsResponses[keyof GetProjectRepoProtectedBranchesSettingsResponses];

export type SetProjectRepoProtectedBranchesSettingsData = {
    body?: UpdateProtectedBranchesSettingsInput;
    path: {
        /**
         * key of the project
         */
        projectKey: string;
        /**
         * name of the repository
         */
        repoName: string;
    };
    query?: never;
    url: '/projects/{projectKey}/repos/{repoName}/settings/protected_branches';
};

export type SetProjectRepoProtectedBranchesSettingsErrors = {
    400: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    403: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    500: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type SetProjectRepoProtectedBranchesSettingsError = SetProjectRepoProtectedBranchesSettingsErrors[keyof SetProjectRepoProtectedBranchesSettingsErrors];

export type SetProjectRepoProtectedBranchesSettingsResponses = {
    200: {
        data?: ProtectedBranchesSettings;
        page?: ResponsePageMeta;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type SetProjectRepoProtectedBranchesSettingsResponse = SetProjectRepoProtectedBranchesSettingsResponses[keyof SetProjectRepoProtectedBranchesSettingsResponses];

export type ListProjectRepoReviewerGroupsData = {
    body?: never;
    path: {
        /**
         * key of the project
         */
        projectKey: string;
        /**
         * name of the repository
         */
        repoName: string;
    };
    query?: never;
    url: '/projects/{projectKey}/repos/{repoName}/settings/reviewer_groups';
};

export type ListProjectRepoReviewerGroupsErrors = {
    400: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    403: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    500: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type ListProjectRepoReviewerGroupsError = ListProjectRepoReviewerGroupsErrors[keyof ListProjectRepoReviewerGroupsErrors];

export type ListProjectRepoReviewerGroupsResponses = {
    200: {
        data?: Array<ReviewerGroup>;
        page?: ResponsePageMeta;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type ListProjectRepoReviewerGroupsResponse = ListProjectRepoReviewerGroupsResponses[keyof ListProjectRepoReviewerGroupsResponses];

export type SetProjectRepoReviewerGroupData = {
    body?: ReviewerGroupInput;
    path: {
        /**
         * key of the project
         */
        projectKey: string;
        /**
         * name of the repository
         */
        repoName: string;
    };
    query?: never;
    url: '/projects/{projectKey}/repos/{repoName}/settings/reviewer_groups';
};

export type SetProjectRepoReviewerGroupErrors = {
    400: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    403: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    500: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type SetProjectRepoReviewerGroupError = SetProjectRepoReviewerGroupErrors[keyof SetProjectRepoReviewerGroupErrors];

export type SetProjectRepoReviewerGroupResponses = {
    200: {
        data?: ReviewerGroup;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type SetProjectRepoReviewerGroupResponse = SetProjectRepoReviewerGroupResponses[keyof SetProjectRepoReviewerGroupResponses];

export type DeleteProjectRepoReviewerGroupData = {
    body?: never;
    path: {
        /**
         * key of the project
         */
        projectKey: string;
        /**
         * name of the repository
         */
        repoName: string;
        /**
         * reviewer group id
         */
        reviewerGroup: string;
    };
    query?: never;
    url: '/projects/{projectKey}/repos/{repoName}/settings/reviewer_groups/{reviewerGroup}';
};

export type DeleteProjectRepoReviewerGroupErrors = {
    400: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    403: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    500: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type DeleteProjectRepoReviewerGroupError = DeleteProjectRepoReviewerGroupErrors[keyof DeleteProjectRepoReviewerGroupErrors];

export type DeleteProjectRepoReviewerGroupResponses = {
    200: {
        data?: ReviewerGroup;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type DeleteProjectRepoReviewerGroupResponse = DeleteProjectRepoReviewerGroupResponses[keyof DeleteProjectRepoReviewerGroupResponses];

export type GetRepoSearchSettingsData = {
    body?: never;
    path: {
        /**
         * key of the project
         */
        projectKey: string;
        /**
         * name of the repository
         */
        repoName: string;
    };
    query?: never;
    url: '/projects/{projectKey}/repos/{repoName}/settings/search';
};

export type GetRepoSearchSettingsErrors = {
    400: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    403: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    500: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type GetRepoSearchSettingsError = GetRepoSearchSettingsErrors[keyof GetRepoSearchSettingsErrors];

export type GetRepoSearchSettingsResponses = {
    200: {
        data?: SearchSettings;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type GetRepoSearchSettingsResponse = GetRepoSearchSettingsResponses[keyof GetRepoSearchSettingsResponses];

export type SetRepoSearchSettingsData = {
    body?: SearchSettingsInput;
    path: {
        /**
         * key of the project
         */
        projectKey: string;
        /**
         * name of the repository
         */
        repoName: string;
    };
    query?: never;
    url: '/projects/{projectKey}/repos/{repoName}/settings/search';
};

export type SetRepoSearchSettingsErrors = {
    400: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    403: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    500: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type SetRepoSearchSettingsError = SetRepoSearchSettingsErrors[keyof SetRepoSearchSettingsErrors];

export type SetRepoSearchSettingsResponses = {
    200: {
        data?: SearchSettings;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type SetRepoSearchSettingsResponse = SetRepoSearchSettingsResponses[keyof SetRepoSearchSettingsResponses];

export type ListRepoStructureBranchData = {
    body?: never;
    path: {
        /**
         * key of the project
         */
        projectKey: string;
        /**
         * name of the repository
         */
        repoName: string;
    };
    query?: never;
    url: '/projects/{projectKey}/repos/{repoName}/settings/structure/branches';
};

export type ListRepoStructureBranchErrors = {
    400: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    403: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    500: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type ListRepoStructureBranchError = ListRepoStructureBranchErrors[keyof ListRepoStructureBranchErrors];

export type ListRepoStructureBranchResponses = {
    200: {
        data?: Array<RepoStructure>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type ListRepoStructureBranchResponse = ListRepoStructureBranchResponses[keyof ListRepoStructureBranchResponses];

export type CreateRepoStructureBranchData = {
    body?: RepoStructureCreateInput;
    path: {
        /**
         * key of the project
         */
        projectKey: string;
        /**
         * name of the repository
         */
        repoName: string;
    };
    query?: never;
    url: '/projects/{projectKey}/repos/{repoName}/settings/structure/branches';
};

export type CreateRepoStructureBranchErrors = {
    400: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    403: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    500: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type CreateRepoStructureBranchError = CreateRepoStructureBranchErrors[keyof CreateRepoStructureBranchErrors];

export type CreateRepoStructureBranchResponses = {
    200: {
        data?: RepoStructure;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type CreateRepoStructureBranchResponse = CreateRepoStructureBranchResponses[keyof CreateRepoStructureBranchResponses];

export type DeleteRepoStructureBranchData = {
    body?: never;
    path: {
        /**
         * key of the project
         */
        projectKey: string;
        /**
         * name of the repository
         */
        repoName: string;
        /**
         * id of the regular expression setting for the branch
         */
        structureBranchId: number;
    };
    query?: never;
    url: '/projects/{projectKey}/repos/{repoName}/settings/structure/branches/{structureBranchId}';
};

export type DeleteRepoStructureBranchErrors = {
    400: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    403: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    500: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type DeleteRepoStructureBranchError = DeleteRepoStructureBranchErrors[keyof DeleteRepoStructureBranchErrors];

export type DeleteRepoStructureBranchResponses = {
    /**
     * No Content
     */
    200: unknown;
};

export type UpdateRepoStructureBranchData = {
    body?: RepoStructurePatchInput;
    path: {
        /**
         * key of the project
         */
        projectKey: string;
        /**
         * name of the repository
         */
        repoName: string;
        /**
         * id of the regular expression setting for the branch
         */
        structureBranchId: number;
    };
    query?: never;
    url: '/projects/{projectKey}/repos/{repoName}/settings/structure/branches/{structureBranchId}';
};

export type UpdateRepoStructureBranchErrors = {
    400: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    403: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    500: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type UpdateRepoStructureBranchError = UpdateRepoStructureBranchErrors[keyof UpdateRepoStructureBranchErrors];

export type UpdateRepoStructureBranchResponses = {
    200: {
        data?: RepoStructure;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type UpdateRepoStructureBranchResponse = UpdateRepoStructureBranchResponses[keyof UpdateRepoStructureBranchResponses];

export type ListRepoStructurePathData = {
    body?: never;
    path: {
        /**
         * key of the project
         */
        projectKey: string;
        /**
         * name of the repository
         */
        repoName: string;
    };
    query?: never;
    url: '/projects/{projectKey}/repos/{repoName}/settings/structure/paths';
};

export type ListRepoStructurePathErrors = {
    400: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    403: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    500: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type ListRepoStructurePathError = ListRepoStructurePathErrors[keyof ListRepoStructurePathErrors];

export type ListRepoStructurePathResponses = {
    200: {
        data?: Array<RepoStructure>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type ListRepoStructurePathResponse = ListRepoStructurePathResponses[keyof ListRepoStructurePathResponses];

export type CreateRepoStructurePathData = {
    body?: RepoStructureCreateInput;
    path: {
        /**
         * key of the project
         */
        projectKey: string;
        /**
         * name of the repository
         */
        repoName: string;
    };
    query?: never;
    url: '/projects/{projectKey}/repos/{repoName}/settings/structure/paths';
};

export type CreateRepoStructurePathErrors = {
    400: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    403: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    500: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type CreateRepoStructurePathError = CreateRepoStructurePathErrors[keyof CreateRepoStructurePathErrors];

export type CreateRepoStructurePathResponses = {
    200: {
        data?: RepoStructure;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type CreateRepoStructurePathResponse = CreateRepoStructurePathResponses[keyof CreateRepoStructurePathResponses];

export type ListTagsData = {
    body?: never;
    path: {
        /**
         * key of the project
         */
        projectKey: string;
        /**
         * name of the repository
         */
        repoName: string;
    };
    query?: {
        /**
         * tag name to filter by tag name pattern
         */
        tagName?: string;
        /**
         * cursor of the requested page (received from the previous request)
         */
        cursor?: string;
        /**
         * page size of results (ignored if cursor is set)
         */
        limit?: number;
    };
    url: '/projects/{projectKey}/repos/{repoName}/tags';
};

export type ListTagsErrors = {
    403: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    500: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type ListTagsError = ListTagsErrors[keyof ListTagsErrors];

export type ListTagsResponses = {
    200: {
        data?: Array<string>;
        page?: ResponsePageMeta;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type ListTagsResponse = ListTagsResponses[keyof ListTagsResponses];

export type CreateTagData = {
    body?: CreateTagInput;
    path: {
        /**
         * key of the project
         */
        projectKey: string;
        /**
         * name of the repository
         */
        repoName: string;
    };
    query?: never;
    url: '/projects/{projectKey}/repos/{repoName}/tags';
};

export type CreateTagErrors = {
    403: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    422: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    500: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type CreateTagError = CreateTagErrors[keyof CreateTagErrors];

export type CreateTagResponses = {
    200: {
        data?: RepoTag;
        page?: ResponsePageMeta;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type CreateTagResponse = CreateTagResponses[keyof CreateTagResponses];

export type DeleteTagData = {
    body?: never;
    path: {
        /**
         * key of the project
         */
        projectKey: string;
        /**
         * name of the repository
         */
        repoName: string;
        /**
         * tag name
         */
        tagName: string;
    };
    query?: never;
    url: '/projects/{projectKey}/repos/{repoName}/tags/{tagName}';
};

export type DeleteTagErrors = {
    403: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    500: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type DeleteTagError = DeleteTagErrors[keyof DeleteTagErrors];

export type DeleteTagResponses = {
    204: void;
};

export type DeleteTagResponse = DeleteTagResponses[keyof DeleteTagResponses];

export type GetProjectRepoTreeMetadataData = {
    body?: ListTreeMetadataInput;
    path: {
        /**
         * key of the project
         */
        projectKey: string;
        /**
         * name of the repository
         */
        repoName: string;
    };
    query: {
        /**
         * git rev (commit/branch/tag,commit-ish or any other git revision).
         */
        rev: string;
    };
    url: '/projects/{projectKey}/repos/{repoName}/tree-metadata';
};

export type GetProjectRepoTreeMetadataErrors = {
    400: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    401: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    403: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    500: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type GetProjectRepoTreeMetadataError = GetProjectRepoTreeMetadataErrors[keyof GetProjectRepoTreeMetadataErrors];

export type GetProjectRepoTreeMetadataResponses = {
    200: {
        data?: {
            [key: string]: RepoTreeNodeMetadata;
        };
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
        /**
         * List of warnings that occurred during the request.
         */
        warnings?: Array<ResponseWarning>;
    };
};

export type GetProjectRepoTreeMetadataResponse = GetProjectRepoTreeMetadataResponses[keyof GetProjectRepoTreeMetadataResponses];

export type GetProjectRepoTreeData = {
    body?: never;
    path: {
        /**
         * key of the project
         */
        projectKey: string;
        /**
         * name of the repository
         */
        repoName: string;
        /**
         * path to the repository tree object
         */
        treePath: string;
    };
    query?: {
        /**
         * git rev (commit/branch/tag,commit-ish or any other git revision).
         */
        rev?: string;
    };
    url: '/projects/{projectKey}/repos/{repoName}/tree/{treePath}';
};

export type GetProjectRepoTreeErrors = {
    400: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    401: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    403: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    500: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type GetProjectRepoTreeError = GetProjectRepoTreeErrors[keyof GetProjectRepoTreeErrors];

export type GetProjectRepoTreeResponses = {
    200: {
        data?: Array<RepoTreeNode>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
        /**
         * List of warnings that occurred during the request.
         */
        warnings?: Array<ResponseWarning>;
    };
};

export type GetProjectRepoTreeResponse = GetProjectRepoTreeResponses[keyof GetProjectRepoTreeResponses];

export type GetRepoUsageQuotasData = {
    body?: never;
    path: {
        /**
         * key of the project
         */
        projectKey: string;
        /**
         * name of the repository
         */
        repoName: string;
    };
    query?: never;
    url: '/projects/{projectKey}/repos/{repoName}/usage-quotas';
};

export type GetRepoUsageQuotasErrors = {
    400: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    403: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    500: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type GetRepoUsageQuotasError = GetRepoUsageQuotasErrors[keyof GetRepoUsageQuotasErrors];

export type GetRepoUsageQuotasResponses = {
    200: {
        data?: RepoUsageQuotas;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type GetRepoUsageQuotasResponse = GetRepoUsageQuotasResponses[keyof GetRepoUsageQuotasResponses];

export type GetUsersByLoginsData = {
    body?: UserLoginsInput;
    path: {
        /**
         * key of the project
         */
        projectKey: string;
        /**
         * name of the repository
         */
        repoName: string;
    };
    query?: never;
    url: '/projects/{projectKey}/repos/{repoName}/users';
};

export type GetUsersByLoginsErrors = {
    400: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    403: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    500: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type GetUsersByLoginsError = GetUsersByLoginsErrors[keyof GetUsersByLoginsErrors];

export type GetUsersByLoginsResponses = {
    200: {
        data?: Array<SimpleUser>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type GetUsersByLoginsResponse = GetUsersByLoginsResponses[keyof GetUsersByLoginsResponses];

export type GetProjectRepoWebhooksData = {
    body?: never;
    path: {
        /**
         * key of the project
         */
        projectKey: string;
        /**
         * name of the repository
         */
        repoName: string;
    };
    query?: never;
    url: '/projects/{projectKey}/repos/{repoName}/webhooks';
};

export type GetProjectRepoWebhooksErrors = {
    400: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    403: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    500: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type GetProjectRepoWebhooksError = GetProjectRepoWebhooksErrors[keyof GetProjectRepoWebhooksErrors];

export type GetProjectRepoWebhooksResponses = {
    200: {
        data?: Array<Webhook>;
        page?: ResponsePageMeta;
    };
};

export type GetProjectRepoWebhooksResponse = GetProjectRepoWebhooksResponses[keyof GetProjectRepoWebhooksResponses];

export type CreateProjectRepoWebhookData = {
    body?: CreateWebhookInput;
    path: {
        /**
         * key of the project
         */
        projectKey: string;
        /**
         * name of the repository
         */
        repoName: string;
    };
    query?: never;
    url: '/projects/{projectKey}/repos/{repoName}/webhooks';
};

export type CreateProjectRepoWebhookErrors = {
    400: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    403: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    500: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type CreateProjectRepoWebhookError = CreateProjectRepoWebhookErrors[keyof CreateProjectRepoWebhookErrors];

export type CreateProjectRepoWebhookResponses = {
    200: {
        data?: Webhook;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type CreateProjectRepoWebhookResponse = CreateProjectRepoWebhookResponses[keyof CreateProjectRepoWebhookResponses];

export type CheckConnectionWebhookData = {
    body?: WebhookReceiver;
    path: {
        /**
         * key of the project
         */
        projectKey: string;
        /**
         * name of the repository
         */
        repoName: string;
    };
    query?: never;
    url: '/projects/{projectKey}/repos/{repoName}/webhooks/check';
};

export type CheckConnectionWebhookErrors = {
    400: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    403: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    500: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type CheckConnectionWebhookError = CheckConnectionWebhookErrors[keyof CheckConnectionWebhookErrors];

export type CheckConnectionWebhookResponses = {
    200: {
        data?: CheckConnectionWebhook;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type CheckConnectionWebhookResponse = CheckConnectionWebhookResponses[keyof CheckConnectionWebhookResponses];

export type DeleteProjectRepoWebhookData = {
    body?: never;
    path: {
        /**
         * key of the project
         */
        projectKey: string;
        /**
         * name of the repository
         */
        repoName: string;
        /**
         * webhook id
         */
        whId: number;
    };
    query?: never;
    url: '/projects/{projectKey}/repos/{repoName}/webhooks/{whId}';
};

export type DeleteProjectRepoWebhookErrors = {
    400: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    403: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    500: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type DeleteProjectRepoWebhookError = DeleteProjectRepoWebhookErrors[keyof DeleteProjectRepoWebhookErrors];

export type DeleteProjectRepoWebhookResponses = {
    /**
     * No Content
     */
    200: unknown;
};

export type GetProjectRepoWebhookData = {
    body?: never;
    path: {
        /**
         * key of the project
         */
        projectKey: string;
        /**
         * name of the repository
         */
        repoName: string;
        /**
         * webhook id
         */
        whId: number;
    };
    query?: never;
    url: '/projects/{projectKey}/repos/{repoName}/webhooks/{whId}';
};

export type GetProjectRepoWebhookErrors = {
    400: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    403: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    500: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type GetProjectRepoWebhookError = GetProjectRepoWebhookErrors[keyof GetProjectRepoWebhookErrors];

export type GetProjectRepoWebhookResponses = {
    200: {
        data?: Webhook;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type GetProjectRepoWebhookResponse = GetProjectRepoWebhookResponses[keyof GetProjectRepoWebhookResponses];

export type UpdateProjectRepoWebhookData = {
    body?: UpdateWebhookInput;
    path: {
        /**
         * key of the project
         */
        projectKey: string;
        /**
         * name of the repository
         */
        repoName: string;
        /**
         * webhook id
         */
        whId: number;
    };
    query?: never;
    url: '/projects/{projectKey}/repos/{repoName}/webhooks/{whId}';
};

export type UpdateProjectRepoWebhookErrors = {
    400: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    403: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    500: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type UpdateProjectRepoWebhookError = UpdateProjectRepoWebhookErrors[keyof UpdateProjectRepoWebhookErrors];

export type UpdateProjectRepoWebhookResponses = {
    200: {
        data?: Webhook;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type UpdateProjectRepoWebhookResponse = UpdateProjectRepoWebhookResponses[keyof UpdateProjectRepoWebhookResponses];

export type ListServiceAccountsData = {
    body?: never;
    path: {
        /**
         * key of the project
         */
        projectKey: string;
    };
    query?: never;
    url: '/projects/{projectKey}/service-accounts/';
};

export type ListServiceAccountsErrors = {
    400: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    403: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    500: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type ListServiceAccountsError = ListServiceAccountsErrors[keyof ListServiceAccountsErrors];

export type ListServiceAccountsResponses = {
    200: {
        data?: Array<ServiceAccount>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type ListServiceAccountsResponse = ListServiceAccountsResponses[keyof ListServiceAccountsResponses];

export type CreateServiceAccountData = {
    body?: CreateServiceAccountInput;
    path: {
        /**
         * key of the project
         */
        projectKey: string;
    };
    query?: never;
    url: '/projects/{projectKey}/service-accounts/';
};

export type CreateServiceAccountErrors = {
    400: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    403: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    500: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type CreateServiceAccountError = CreateServiceAccountErrors[keyof CreateServiceAccountErrors];

export type CreateServiceAccountResponses = {
    200: {
        data?: ServiceAccount;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type CreateServiceAccountResponse = CreateServiceAccountResponses[keyof CreateServiceAccountResponses];

export type DeleteServiceAccountData = {
    body?: never;
    path: {
        /**
         * key of the project
         */
        projectKey: string;
        /**
         * service account name
         */
        saName: string;
    };
    query?: {
        /**
         * The name of the service account to be replaced with.
         */
        replace?: string;
    };
    url: '/projects/{projectKey}/service-accounts/{saName}';
};

export type DeleteServiceAccountErrors = {
    400: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    403: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    500: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type DeleteServiceAccountError = DeleteServiceAccountErrors[keyof DeleteServiceAccountErrors];

export type DeleteServiceAccountResponses = {
    /**
     * No Content
     */
    200: unknown;
};

export type GetServiceAccountData = {
    body?: never;
    path: {
        /**
         * key of the project
         */
        projectKey: string;
        /**
         * service account name
         */
        saName: string;
    };
    query?: never;
    url: '/projects/{projectKey}/service-accounts/{saName}';
};

export type GetServiceAccountErrors = {
    400: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    403: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    500: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type GetServiceAccountError = GetServiceAccountErrors[keyof GetServiceAccountErrors];

export type GetServiceAccountResponses = {
    200: {
        data?: ServiceAccount;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type GetServiceAccountResponse = GetServiceAccountResponses[keyof GetServiceAccountResponses];

export type UpdateServiceAccountData = {
    body?: UpdateServiceAccountInput;
    path: {
        /**
         * key of the project
         */
        projectKey: string;
        /**
         * service account name
         */
        saName: string;
    };
    query?: never;
    url: '/projects/{projectKey}/service-accounts/{saName}';
};

export type UpdateServiceAccountErrors = {
    400: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    403: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    500: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type UpdateServiceAccountError = UpdateServiceAccountErrors[keyof UpdateServiceAccountErrors];

export type UpdateServiceAccountResponses = {
    200: {
        data?: ServiceAccount;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type UpdateServiceAccountResponse = UpdateServiceAccountResponses[keyof UpdateServiceAccountResponses];

export type ListServiceAccountEntitiesData = {
    body?: never;
    path: {
        /**
         * key of the project
         */
        projectKey: string;
        /**
         * service account name
         */
        saName: string;
    };
    query?: never;
    url: '/projects/{projectKey}/service-accounts/{saName}/entities';
};

export type ListServiceAccountEntitiesErrors = {
    400: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    403: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    500: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type ListServiceAccountEntitiesError = ListServiceAccountEntitiesErrors[keyof ListServiceAccountEntitiesErrors];

export type ListServiceAccountEntitiesResponses = {
    200: {
        data?: ServiceAccountEntities;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type ListServiceAccountEntitiesResponse = ListServiceAccountEntitiesResponses[keyof ListServiceAccountEntitiesResponses];

export type GetUsageQuotasSettingsProjectData = {
    body?: never;
    path: {
        /**
         * key of the project
         */
        projectKey: string;
    };
    query?: never;
    url: '/projects/{projectKey}/settings/usage-quotas';
};

export type GetUsageQuotasSettingsProjectErrors = {
    400: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    403: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    500: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type GetUsageQuotasSettingsProjectError = GetUsageQuotasSettingsProjectErrors[keyof GetUsageQuotasSettingsProjectErrors];

export type GetUsageQuotasSettingsProjectResponses = {
    200: {
        data?: ProjectUsageQuotasSettings;
        page?: ResponsePageMeta;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type GetUsageQuotasSettingsProjectResponse = GetUsageQuotasSettingsProjectResponses[keyof GetUsageQuotasSettingsProjectResponses];

export type PutUsageQuotasSettingsProjectData = {
    body?: UpdateProjectUsageQuotasSettingsInput;
    path: {
        /**
         * key of the project
         */
        projectKey: string;
    };
    query?: never;
    url: '/projects/{projectKey}/settings/usage-quotas';
};

export type PutUsageQuotasSettingsProjectErrors = {
    400: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    403: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    500: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type PutUsageQuotasSettingsProjectError = PutUsageQuotasSettingsProjectErrors[keyof PutUsageQuotasSettingsProjectErrors];

export type PutUsageQuotasSettingsProjectResponses = {
    200: {
        data?: ProjectUsageQuotasSettings;
        page?: ResponsePageMeta;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type PutUsageQuotasSettingsProjectResponse = PutUsageQuotasSettingsProjectResponses[keyof PutUsageQuotasSettingsProjectResponses];

export type GetServiceInformationData = {
    body?: never;
    path?: never;
    query: {
        /**
         * list of label names
         */
        label_names: Array<string>;
    };
    url: '/service-information';
};

export type GetServiceInformationErrors = {
    400: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    403: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    500: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type GetServiceInformationError = GetServiceInformationErrors[keyof GetServiceInformationErrors];

export type GetServiceInformationResponses = {
    200: {
        data?: Array<ServiceInformation>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type GetServiceInformationResponse = GetServiceInformationResponses[keyof GetServiceInformationResponses];

export type AddNotificationSubscriptionData = {
    body?: NotificationSubscriptionInput;
    path?: never;
    query?: never;
    url: '/subscribe';
};

export type AddNotificationSubscriptionErrors = {
    400: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    403: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    500: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type AddNotificationSubscriptionError = AddNotificationSubscriptionErrors[keyof AddNotificationSubscriptionErrors];

export type AddNotificationSubscriptionResponses = {
    200: {
        data?: NotificationSubscription;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type AddNotificationSubscriptionResponse = AddNotificationSubscriptionResponses[keyof AddNotificationSubscriptionResponses];

export type GetNotificationSubscriptionInfoData = {
    body?: never;
    path?: never;
    query: {
        /**
         * subscription type
         */
        subscription_type: string;
        /**
         * subscription object
         */
        subscription_object: string;
    };
    url: '/subscription-info';
};

export type GetNotificationSubscriptionInfoErrors = {
    400: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    403: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    500: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type GetNotificationSubscriptionInfoError = GetNotificationSubscriptionInfoErrors[keyof GetNotificationSubscriptionInfoErrors];

export type GetNotificationSubscriptionInfoResponses = {
    200: {
        data?: NotificationSubscriptionInfo;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type GetNotificationSubscriptionInfoResponse = GetNotificationSubscriptionInfoResponses[keyof GetNotificationSubscriptionInfoResponses];

export type GetNotificationSubscriptionsData = {
    body?: never;
    path?: never;
    query: {
        /**
         * subscription type
         */
        subscription_type: string;
        /**
         * subscription object
         */
        subscription_object: string;
    };
    url: '/subscriptions';
};

export type GetNotificationSubscriptionsErrors = {
    400: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    403: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    500: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type GetNotificationSubscriptionsError = GetNotificationSubscriptionsErrors[keyof GetNotificationSubscriptionsErrors];

export type GetNotificationSubscriptionsResponses = {
    200: {
        data?: Array<NotificationSubscription>;
        page?: ResponsePageMeta;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type GetNotificationSubscriptionsResponse = GetNotificationSubscriptionsResponses[keyof GetNotificationSubscriptionsResponses];

export type DeleteNotificationSubscriptionData = {
    body?: NotificationSubscriptionInput;
    path?: never;
    query?: never;
    url: '/unsubscribe';
};

export type DeleteNotificationSubscriptionErrors = {
    400: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    403: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    500: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type DeleteNotificationSubscriptionError = DeleteNotificationSubscriptionErrors[keyof DeleteNotificationSubscriptionErrors];

export type DeleteNotificationSubscriptionResponses = {
    /**
     * No Content
     */
    200: unknown;
};

export type ListUsersData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * cursor of the requested page (received from the previous request)
         */
        cursor?: string;
        /**
         * page size of results (ignored if cursor is set)
         */
        limit?: number;
        /**
         * sorting type of results
         */
        sort?: string;
        /**
         * sort order of results
         */
        order?: string;
        /**
         * filter users by name / full_name / email
         */
        q?: string;
    };
    url: '/users';
};

export type ListUsersErrors = {
    400: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    403: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    500: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type ListUsersError = ListUsersErrors[keyof ListUsersErrors];

export type ListUsersResponses = {
    200: {
        data?: Array<User>;
        page?: ResponsePageMeta;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type ListUsersResponse = ListUsersResponses[keyof ListUsersResponses];

export type ListPublicKeysData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/users/keys';
};

export type ListPublicKeysErrors = {
    400: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    403: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    500: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type ListPublicKeysError = ListPublicKeysErrors[keyof ListPublicKeysErrors];

export type ListPublicKeysResponses = {
    200: {
        data?: Array<UserPublicKey>;
        page?: ResponsePageMeta;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type ListPublicKeysResponse = ListPublicKeysResponses[keyof ListPublicKeysResponses];

export type CreatePublicKeyData = {
    body?: CreateUserPublicKeyInput;
    path?: never;
    query?: never;
    url: '/users/keys';
};

export type CreatePublicKeyErrors = {
    400: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    403: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    500: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type CreatePublicKeyError = CreatePublicKeyErrors[keyof CreatePublicKeyErrors];

export type CreatePublicKeyResponses = {
    200: {
        data?: UserPublicKey;
        page?: ResponsePageMeta;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type CreatePublicKeyResponse = CreatePublicKeyResponses[keyof CreatePublicKeyResponses];

export type DeletePublicKeyData = {
    body?: never;
    path: {
        /**
         * URL-escaped key fingerprint (ssh-keygen -lf)
         */
        fingerprint: string;
    };
    query?: never;
    url: '/users/keys/{fingerprint}';
};

export type DeletePublicKeyErrors = {
    400: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    403: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    500: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type DeletePublicKeyError = DeletePublicKeyErrors[keyof DeletePublicKeyErrors];

export type DeletePublicKeyResponses = {
    /**
     * No Content
     */
    200: unknown;
};

export type UpdatePublicKeyData = {
    body?: UpdateUserPublicKeyInput;
    path: {
        /**
         * URL-escaped key fingerprint (ssh-keygen -lf)
         */
        fingerprint: string;
    };
    query?: never;
    url: '/users/keys/{fingerprint}';
};

export type UpdatePublicKeyErrors = {
    400: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    403: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    500: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type UpdatePublicKeyError = UpdatePublicKeyErrors[keyof UpdatePublicKeyErrors];

export type UpdatePublicKeyResponses = {
    200: {
        data?: UserPublicKey;
        page?: ResponsePageMeta;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type UpdatePublicKeyResponse = UpdatePublicKeyResponses[keyof UpdatePublicKeyResponses];

export type SelfData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/users/self';
};

export type SelfErrors = {
    403: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    500: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type SelfError = SelfErrors[keyof SelfErrors];

export type SelfResponses = {
    200: {
        data?: User;
        page?: ResponsePageMeta;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type SelfResponse = SelfResponses[keyof SelfResponses];

export type ListTokensData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/users/tokens';
};

export type ListTokensErrors = {
    400: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    403: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    500: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type ListTokensError = ListTokensErrors[keyof ListTokensErrors];

export type ListTokensResponses = {
    200: {
        data?: Array<UserToken>;
        page?: ResponsePageMeta;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type ListTokensResponse = ListTokensResponses[keyof ListTokensResponses];

export type CreateTokenData = {
    body?: CreateUserTokenInput;
    path?: never;
    query?: never;
    url: '/users/tokens';
};

export type CreateTokenErrors = {
    400: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    403: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    500: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type CreateTokenError = CreateTokenErrors[keyof CreateTokenErrors];

export type CreateTokenResponses = {
    200: {
        data?: UserToken;
        page?: ResponsePageMeta;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type CreateTokenResponse = CreateTokenResponses[keyof CreateTokenResponses];

export type DeleteTokenData = {
    body?: never;
    path: {
        /**
         * token hash
         */
        tokenHash: string;
    };
    query?: never;
    url: '/users/tokens/{tokenHash}';
};

export type DeleteTokenErrors = {
    400: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    403: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    500: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type DeleteTokenError = DeleteTokenErrors[keyof DeleteTokenErrors];

export type DeleteTokenResponses = {
    /**
     * No Content
     */
    200: unknown;
};

export type UpdateTokenData = {
    body?: UpdateUserTokenInput;
    path: {
        /**
         * token hash
         */
        tokenHash: string;
    };
    query?: never;
    url: '/users/tokens/{tokenHash}';
};

export type UpdateTokenErrors = {
    400: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    403: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    500: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type UpdateTokenError = UpdateTokenErrors[keyof UpdateTokenErrors];

export type UpdateTokenResponses = {
    200: {
        data?: UserToken;
        page?: ResponsePageMeta;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type UpdateTokenResponse = UpdateTokenResponses[keyof UpdateTokenResponses];

export type CheckTokenData = {
    body?: never;
    path: {
        /**
         * user token
         */
        token: string;
    };
    query?: never;
    url: '/users/tokens/{token}/check';
};

export type CheckTokenErrors = {
    400: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    403: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    500: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type CheckTokenError = CheckTokenErrors[keyof CheckTokenErrors];

export type CheckTokenResponses = {
    200: {
        data?: {
            token?: UserToken;
            user?: SimpleUser;
        };
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type CheckTokenResponse = CheckTokenResponses[keyof CheckTokenResponses];

export type GetUserData = {
    body?: never;
    path: {
        /**
         * username (login)
         */
        userName: string;
    };
    query?: never;
    url: '/users/{username}';
};

export type GetUserErrors = {
    403: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
    500: {
        /**
         * List of errors that occurred during the request.
         */
        errors?: Array<_Error>;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type GetUserError = GetUserErrors[keyof GetUserErrors];

export type GetUserResponses = {
    200: {
        data?: User;
        page?: ResponsePageMeta;
        /**
         * Unique ID for this request.
         */
        request_id?: string;
        /**
         * Response status (HTTP response code as string).
         * Useful to distinguish between network 404 and API 404.
         */
        status?: string;
    };
};

export type GetUserResponse = GetUserResponses[keyof GetUserResponses];

export type VersionCheckData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/version';
};

export type VersionCheckResponses = {
    /**
     * <last tag>-<advance commit>-g<hash commit>, <build date>
     */
    200: unknown;
};
